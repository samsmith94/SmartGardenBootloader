
F401_SmartGarden_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b30  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000934  08008cd0  08008cd0  00018cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009604  08009604  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08009604  08009604  00019604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800960c  0800960c  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800960c  0800960c  0001960c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009610  08009610  00019610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08009614  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004418  2000008c  080096a0  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200044a4  080096a0  000244a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011be9  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003499  00000000  00000000  00031ca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb8  00000000  00000000  00035140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e20  00000000  00000000  000360f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000194aa  00000000  00000000  00036f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000167cf  00000000  00000000  000503c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ac9d  00000000  00000000  00066b91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f182e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000457c  00000000  00000000  000f1880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000008c 	.word	0x2000008c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008cb8 	.word	0x08008cb8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000090 	.word	0x20000090
 80001dc:	08008cb8 	.word	0x08008cb8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <FLASH_If_Init>:

static uint32_t GetSector(uint32_t Address);

/* Clear flags */
void FLASH_If_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 8000588:	f001 ff48 	bl	800241c <HAL_FLASH_Unlock>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 800058c:	4b03      	ldr	r3, [pc, #12]	; (800059c <FLASH_If_Init+0x18>)
 800058e:	22f3      	movs	r2, #243	; 0xf3
 8000590:	60da      	str	r2, [r3, #12]
                           FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
    HAL_FLASH_Lock();
 8000592:	f001 ff65 	bl	8002460 <HAL_FLASH_Lock>
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40023c00 	.word	0x40023c00

080005a0 <FLASH_If_Erase>:

/* Erase flash memory */
uint32_t FLASH_If_Erase(uint32_t start)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08c      	sub	sp, #48	; 0x30
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
    uint32_t FirstSector, NbOfSectors, SectorError;
    FLASH_EraseInitTypeDef pEraseInit;
    HAL_StatusTypeDef status = HAL_OK;
 80005a8:	2300      	movs	r3, #0
 80005aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    HAL_FLASH_Unlock();
 80005ae:	f001 ff35 	bl	800241c <HAL_FLASH_Unlock>

    /* Erase from SECTOR 2~5 */
    FirstSector = GetSector(USER_START_ADDRESS);
 80005b2:	4815      	ldr	r0, [pc, #84]	; (8000608 <FLASH_If_Erase+0x68>)
 80005b4:	f000 f8b8 	bl	8000728 <GetSector>
 80005b8:	62b8      	str	r0, [r7, #40]	; 0x28
    NbOfSectors = GetSector(USER_END_ADDRESS) - FirstSector;
 80005ba:	4814      	ldr	r0, [pc, #80]	; (800060c <FLASH_If_Erase+0x6c>)
 80005bc:	f000 f8b4 	bl	8000728 <GetSector>
 80005c0:	4602      	mov	r2, r0
 80005c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005c4:	1ad3      	subs	r3, r2, r3
 80005c6:	627b      	str	r3, [r7, #36]	; 0x24

    pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60fb      	str	r3, [r7, #12]
    pEraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80005cc:	2302      	movs	r3, #2
 80005ce:	61fb      	str	r3, [r7, #28]
    pEraseInit.Sector = FirstSector;
 80005d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005d2:	617b      	str	r3, [r7, #20]
    pEraseInit.NbSectors = NbOfSectors;
 80005d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005d6:	61bb      	str	r3, [r7, #24]
    status = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80005d8:	f107 0220 	add.w	r2, r7, #32
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	4611      	mov	r1, r2
 80005e2:	4618      	mov	r0, r3
 80005e4:	f002 f8cc 	bl	8002780 <HAL_FLASHEx_Erase>
 80005e8:	4603      	mov	r3, r0
 80005ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    HAL_FLASH_Lock();
 80005ee:	f001 ff37 	bl	8002460 <HAL_FLASH_Lock>

    if (status != HAL_OK)
 80005f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <FLASH_If_Erase+0x5e>
    {
        return FLASHIF_ERASEKO;
 80005fa:	2301      	movs	r3, #1
 80005fc:	e000      	b.n	8000600 <FLASH_If_Erase+0x60>
    }

    return FLASHIF_OK;
 80005fe:	2300      	movs	r3, #0
}
 8000600:	4618      	mov	r0, r3
 8000602:	3730      	adds	r7, #48	; 0x30
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	08040000 	.word	0x08040000
 800060c:	08060000 	.word	0x08060000

08000610 <FLASH_If_FlashBegin>:

static uint32_t flash_ptr = USER_START_ADDRESS;

uint32_t FLASH_If_FlashBegin(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
    flash_ptr = USER_START_ADDRESS;
 8000614:	4b03      	ldr	r3, [pc, #12]	; (8000624 <FLASH_If_FlashBegin+0x14>)
 8000616:	4a04      	ldr	r2, [pc, #16]	; (8000628 <FLASH_If_FlashBegin+0x18>)
 8000618:	601a      	str	r2, [r3, #0]
    HAL_FLASH_Unlock();
 800061a:	f001 feff 	bl	800241c <HAL_FLASH_Unlock>
    return FLASHIF_OK;
 800061e:	2300      	movs	r3, #0
}
 8000620:	4618      	mov	r0, r3
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000000 	.word	0x20000000
 8000628:	08040000 	.word	0x08040000

0800062c <FLASH_If_Write>:

/* Write flash memory */
uint32_t FLASH_If_Write(uint32_t data)
{
 800062c:	b590      	push	{r4, r7, lr}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flash_ptr, data) == HAL_OK)
 8000634:	4911      	ldr	r1, [pc, #68]	; (800067c <FLASH_If_Write+0x50>)
 8000636:	6809      	ldr	r1, [r1, #0]
 8000638:	6878      	ldr	r0, [r7, #4]
 800063a:	2400      	movs	r4, #0
 800063c:	4602      	mov	r2, r0
 800063e:	4623      	mov	r3, r4
 8000640:	2002      	movs	r0, #2
 8000642:	f001 fe97 	bl	8002374 <HAL_FLASH_Program>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d110      	bne.n	800066e <FLASH_If_Write+0x42>
    {
        /* Validate the written value */
        if (*(uint32_t *)flash_ptr != data)
 800064c:	4b0b      	ldr	r3, [pc, #44]	; (800067c <FLASH_If_Write+0x50>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	687a      	ldr	r2, [r7, #4]
 8000654:	429a      	cmp	r2, r3
 8000656:	d003      	beq.n	8000660 <FLASH_If_Write+0x34>
        {
            HAL_FLASH_Lock();
 8000658:	f001 ff02 	bl	8002460 <HAL_FLASH_Lock>
            return FLASHIF_WRITINGCTRL_ERROR;
 800065c:	2302      	movs	r3, #2
 800065e:	e009      	b.n	8000674 <FLASH_If_Write+0x48>
        }

        /* Increase WORD length */
        flash_ptr += 4;
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <FLASH_If_Write+0x50>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	3304      	adds	r3, #4
 8000666:	4a05      	ldr	r2, [pc, #20]	; (800067c <FLASH_If_Write+0x50>)
 8000668:	6013      	str	r3, [r2, #0]
    {
        HAL_FLASH_Lock();
        return FLASHIF_WRITING_ERROR;
    }

    return FLASHIF_OK;
 800066a:	2300      	movs	r3, #0
 800066c:	e002      	b.n	8000674 <FLASH_If_Write+0x48>
        HAL_FLASH_Lock();
 800066e:	f001 fef7 	bl	8002460 <HAL_FLASH_Lock>
        return FLASHIF_WRITING_ERROR;
 8000672:	2303      	movs	r3, #3
}
 8000674:	4618      	mov	r0, r3
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	bd90      	pop	{r4, r7, pc}
 800067c:	20000000 	.word	0x20000000

08000680 <FLASH_If_FlashEnd>:

uint8_t FLASH_If_FlashEnd(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
    /* Lock flash */
    HAL_FLASH_Lock();
 8000684:	f001 feec 	bl	8002460 <HAL_FLASH_Lock>

    return FLASHIF_OK;
 8000688:	2300      	movs	r3, #0
}
 800068a:	4618      	mov	r0, r3
 800068c:	bd80      	pop	{r7, pc}

0800068e <FLASH_If_GetWriteProtectionStatus>:

/* Check write protection */
uint32_t FLASH_If_GetWriteProtectionStatus(void)
{
 800068e:	b580      	push	{r7, lr}
 8000690:	b088      	sub	sp, #32
 8000692:	af00      	add	r7, sp, #0
    uint32_t ProtectedSector = FLASHIF_PROTECTION_NONE;
 8000694:	2300      	movs	r3, #0
 8000696:	61fb      	str	r3, [r7, #28]
    FLASH_OBProgramInitTypeDef OptionsBytesStruct;

    HAL_FLASH_Unlock();
 8000698:	f001 fec0 	bl	800241c <HAL_FLASH_Unlock>
    HAL_FLASHEx_OBGetConfig(&OptionsBytesStruct);
 800069c:	463b      	mov	r3, r7
 800069e:	4618      	mov	r0, r3
 80006a0:	f002 f94c 	bl	800293c <HAL_FLASHEx_OBGetConfig>
    HAL_FLASH_Lock();
 80006a4:	f001 fedc 	bl	8002460 <HAL_FLASH_Lock>

    /* If sectors are protected, WRPSector bits are zero, so it needs to be inverted */
    ProtectedSector = ~(OptionsBytesStruct.WRPSector) & USER_WRP_SECTORS;
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	43db      	mvns	r3, r3
 80006ac:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80006b0:	61fb      	str	r3, [r7, #28]

    if (ProtectedSector != 0)
 80006b2:	69fb      	ldr	r3, [r7, #28]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <FLASH_If_GetWriteProtectionStatus+0x2e>
    {
        return FLASHIF_PROTECTION_WRPENABLED;
 80006b8:	2302      	movs	r3, #2
 80006ba:	e000      	b.n	80006be <FLASH_If_GetWriteProtectionStatus+0x30>
    }

    return FLASHIF_PROTECTION_NONE;
 80006bc:	2300      	movs	r3, #0
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3720      	adds	r7, #32
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <FLASH_If_WriteProtectionConfig>:

/* Configure write protection */
uint32_t FLASH_If_WriteProtectionConfig(uint32_t protectionstate)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b08a      	sub	sp, #40	; 0x28
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
    FLASH_OBProgramInitTypeDef OBInit;
    HAL_StatusTypeDef status = HAL_OK;
 80006ce:	2300      	movs	r3, #0
 80006d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    HAL_FLASH_OB_Unlock();
 80006d4:	f001 fed4 	bl	8002480 <HAL_FLASH_OB_Unlock>
    HAL_FLASH_Unlock();
 80006d8:	f001 fea0 	bl	800241c <HAL_FLASH_Unlock>

    /* Configure sector write protection */
    OBInit.OptionType = OPTIONBYTE_WRP;
 80006dc:	2301      	movs	r3, #1
 80006de:	60bb      	str	r3, [r7, #8]
    OBInit.Banks = FLASH_BANK_1;
 80006e0:	2301      	movs	r3, #1
 80006e2:	617b      	str	r3, [r7, #20]
    OBInit.WRPState = (protectionstate == FLASHIF_WRP_ENABLE ? OB_WRPSTATE_ENABLE : OB_WRPSTATE_DISABLE);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d101      	bne.n	80006ee <FLASH_If_WriteProtectionConfig+0x28>
 80006ea:	2301      	movs	r3, #1
 80006ec:	e000      	b.n	80006f0 <FLASH_If_WriteProtectionConfig+0x2a>
 80006ee:	2300      	movs	r3, #0
 80006f0:	60fb      	str	r3, [r7, #12]
    OBInit.WRPSector = USER_WRP_SECTORS;
 80006f2:	233c      	movs	r3, #60	; 0x3c
 80006f4:	613b      	str	r3, [r7, #16]

    HAL_FLASHEx_OBProgram(&OBInit);
 80006f6:	f107 0308 	add.w	r3, r7, #8
 80006fa:	4618      	mov	r0, r3
 80006fc:	f002 f8b0 	bl	8002860 <HAL_FLASHEx_OBProgram>
    status = HAL_FLASH_OB_Launch();
 8000700:	f001 feea 	bl	80024d8 <HAL_FLASH_OB_Launch>
 8000704:	4603      	mov	r3, r0
 8000706:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    HAL_FLASH_OB_Lock();
 800070a:	f001 fed5 	bl	80024b8 <HAL_FLASH_OB_Lock>
    HAL_FLASH_Lock();
 800070e:	f001 fea7 	bl	8002460 <HAL_FLASH_Lock>

    if (status != HAL_OK)
 8000712:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <FLASH_If_WriteProtectionConfig+0x58>
    {
        return FLASHIF_PROTECTION_ERRROR;
 800071a:	2304      	movs	r3, #4
 800071c:	e000      	b.n	8000720 <FLASH_If_WriteProtectionConfig+0x5a>
    }
    else
    {
        return FLASHIF_OK;
 800071e:	2300      	movs	r3, #0
    }
}
 8000720:	4618      	mov	r0, r3
 8000722:	3728      	adds	r7, #40	; 0x28
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <GetSector>:

/* Get sector number by address */
static uint32_t GetSector(uint32_t Address)
{
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
    uint32_t sector = 0;
 8000730:	2300      	movs	r3, #0
 8000732:	60fb      	str	r3, [r7, #12]

    if ((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	4a2a      	ldr	r2, [pc, #168]	; (80007e0 <GetSector+0xb8>)
 8000738:	4293      	cmp	r3, r2
 800073a:	d206      	bcs.n	800074a <GetSector+0x22>
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000742:	d302      	bcc.n	800074a <GetSector+0x22>
    {
        sector = FLASH_SECTOR_0;
 8000744:	2300      	movs	r3, #0
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	e043      	b.n	80007d2 <GetSector+0xaa>
    }
    else if ((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4a25      	ldr	r2, [pc, #148]	; (80007e4 <GetSector+0xbc>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d206      	bcs.n	8000760 <GetSector+0x38>
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4a22      	ldr	r2, [pc, #136]	; (80007e0 <GetSector+0xb8>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d302      	bcc.n	8000760 <GetSector+0x38>
    {
        sector = FLASH_SECTOR_1;
 800075a:	2301      	movs	r3, #1
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	e038      	b.n	80007d2 <GetSector+0xaa>
    }
    else if ((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4a21      	ldr	r2, [pc, #132]	; (80007e8 <GetSector+0xc0>)
 8000764:	4293      	cmp	r3, r2
 8000766:	d206      	bcs.n	8000776 <GetSector+0x4e>
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	4a1e      	ldr	r2, [pc, #120]	; (80007e4 <GetSector+0xbc>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d302      	bcc.n	8000776 <GetSector+0x4e>
    {
        sector = FLASH_SECTOR_2;
 8000770:	2302      	movs	r3, #2
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	e02d      	b.n	80007d2 <GetSector+0xaa>
    }
    else if ((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	4a1c      	ldr	r2, [pc, #112]	; (80007ec <GetSector+0xc4>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d806      	bhi.n	800078c <GetSector+0x64>
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4a19      	ldr	r2, [pc, #100]	; (80007e8 <GetSector+0xc0>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d302      	bcc.n	800078c <GetSector+0x64>
    {
        sector = FLASH_SECTOR_3;
 8000786:	2303      	movs	r3, #3
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	e022      	b.n	80007d2 <GetSector+0xaa>
    }
    else if ((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4a18      	ldr	r2, [pc, #96]	; (80007f0 <GetSector+0xc8>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d806      	bhi.n	80007a2 <GetSector+0x7a>
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	4a15      	ldr	r2, [pc, #84]	; (80007ec <GetSector+0xc4>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d902      	bls.n	80007a2 <GetSector+0x7a>
    {
        sector = FLASH_SECTOR_4;
 800079c:	2304      	movs	r3, #4
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	e017      	b.n	80007d2 <GetSector+0xaa>
    }
    else if ((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4a13      	ldr	r2, [pc, #76]	; (80007f4 <GetSector+0xcc>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d806      	bhi.n	80007b8 <GetSector+0x90>
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4a10      	ldr	r2, [pc, #64]	; (80007f0 <GetSector+0xc8>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d902      	bls.n	80007b8 <GetSector+0x90>
    {
        sector = FLASH_SECTOR_5;
 80007b2:	2305      	movs	r3, #5
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	e00c      	b.n	80007d2 <GetSector+0xaa>
    }
    else if ((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	4a0f      	ldr	r2, [pc, #60]	; (80007f8 <GetSector+0xd0>)
 80007bc:	4293      	cmp	r3, r2
 80007be:	d806      	bhi.n	80007ce <GetSector+0xa6>
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	4a0c      	ldr	r2, [pc, #48]	; (80007f4 <GetSector+0xcc>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d902      	bls.n	80007ce <GetSector+0xa6>
    {
        sector = FLASH_SECTOR_6;
 80007c8:	2306      	movs	r3, #6
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	e001      	b.n	80007d2 <GetSector+0xaa>
    }
    else
    {
    	sector = FLASH_SECTOR_7;
 80007ce:	2307      	movs	r3, #7
 80007d0:	60fb      	str	r3, [r7, #12]
    }

    return sector;
 80007d2:	68fb      	ldr	r3, [r7, #12]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3714      	adds	r7, #20
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	08004000 	.word	0x08004000
 80007e4:	08008000 	.word	0x08008000
 80007e8:	0800c000 	.word	0x0800c000
 80007ec:	0800ffff 	.word	0x0800ffff
 80007f0:	0801ffff 	.word	0x0801ffff
 80007f4:	0803ffff 	.word	0x0803ffff
 80007f8:	0805ffff 	.word	0x0805ffff

080007fc <Bootloader_JumpToApplication>:

typedef void (*pFunction)(void); /*!< Function pointer definition */

void Bootloader_JumpToApplication(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
    uint32_t JumpAddress = *(__IO uint32_t *)(USER_START_ADDRESS + 4);
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <Bootloader_JumpToApplication+0x4c>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	60fb      	str	r3, [r7, #12]
    pFunction Jump = (pFunction)JumpAddress;
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	60bb      	str	r3, [r7, #8]

    HAL_RCC_DeInit();
 800080c:	f003 f996 	bl	8003b3c <HAL_RCC_DeInit>
    HAL_DeInit();
 8000810:	f001 fba4 	bl	8001f5c <HAL_DeInit>

    SysTick->CTRL = 0;
 8000814:	4b0d      	ldr	r3, [pc, #52]	; (800084c <Bootloader_JumpToApplication+0x50>)
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
    SysTick->LOAD = 0;
 800081a:	4b0c      	ldr	r3, [pc, #48]	; (800084c <Bootloader_JumpToApplication+0x50>)
 800081c:	2200      	movs	r2, #0
 800081e:	605a      	str	r2, [r3, #4]
    SysTick->VAL = 0;
 8000820:	4b0a      	ldr	r3, [pc, #40]	; (800084c <Bootloader_JumpToApplication+0x50>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]

#if (SET_VECTOR_TABLE)
    SCB->VTOR = USER_START_ADDRESS;
 8000826:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <Bootloader_JumpToApplication+0x54>)
 8000828:	4a0a      	ldr	r2, [pc, #40]	; (8000854 <Bootloader_JumpToApplication+0x58>)
 800082a:	609a      	str	r2, [r3, #8]
#endif

    __set_MSP(*(__IO uint32_t *)USER_START_ADDRESS);
 800082c:	4b09      	ldr	r3, [pc, #36]	; (8000854 <Bootloader_JumpToApplication+0x58>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	f383 8808 	msr	MSP, r3
}
 8000838:	bf00      	nop
    Jump();
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	4798      	blx	r3
}
 800083e:	bf00      	nop
 8000840:	3710      	adds	r7, #16
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	08040004 	.word	0x08040004
 800084c:	e000e010 	.word	0xe000e010
 8000850:	e000ed00 	.word	0xe000ed00
 8000854:	08040000 	.word	0x08040000

08000858 <Bootloader_VerifyChecksum>:

uint8_t Bootloader_VerifyChecksum(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af02      	add	r7, sp, #8
    uint32_t calculated_crc;
    calculated_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)ROM_START, (uint32_t)ROM_LEN_WORD);
 800085e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000862:	4925      	ldr	r1, [pc, #148]	; (80008f8 <Bootloader_VerifyChecksum+0xa0>)
 8000864:	4825      	ldr	r0, [pc, #148]	; (80008fc <Bootloader_VerifyChecksum+0xa4>)
 8000866:	f001 fd52 	bl	800230e <HAL_CRC_Calculate>
 800086a:	60f8      	str	r0, [r7, #12]

    uint8_t crc_array[4];
    crc_array[0] = calculated_crc >> 24;
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	0e1b      	lsrs	r3, r3, #24
 8000870:	b2db      	uxtb	r3, r3
 8000872:	713b      	strb	r3, [r7, #4]
    crc_array[1] = calculated_crc >> 16;
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	0c1b      	lsrs	r3, r3, #16
 8000878:	b2db      	uxtb	r3, r3
 800087a:	717b      	strb	r3, [r7, #5]
    crc_array[2] = calculated_crc >> 8;
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	0a1b      	lsrs	r3, r3, #8
 8000880:	b2db      	uxtb	r3, r3
 8000882:	71bb      	strb	r3, [r7, #6]
    crc_array[3] = calculated_crc;
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	b2db      	uxtb	r3, r3
 8000888:	71fb      	strb	r3, [r7, #7]
    printf("Calculated CRC: %X:%X:%X:%X\r\n", crc_array[3], crc_array[2], crc_array[1], crc_array[0]);
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	4619      	mov	r1, r3
 800088e:	79bb      	ldrb	r3, [r7, #6]
 8000890:	461a      	mov	r2, r3
 8000892:	797b      	ldrb	r3, [r7, #5]
 8000894:	4618      	mov	r0, r3
 8000896:	793b      	ldrb	r3, [r7, #4]
 8000898:	9300      	str	r3, [sp, #0]
 800089a:	4603      	mov	r3, r0
 800089c:	4818      	ldr	r0, [pc, #96]	; (8000900 <Bootloader_VerifyChecksum+0xa8>)
 800089e:	f007 fa07 	bl	8007cb0 <iprintf>

    uint32_t crc;
    crc = *(uint32_t *)CHECKSUM_ADDR;
 80008a2:	4b18      	ldr	r3, [pc, #96]	; (8000904 <Bootloader_VerifyChecksum+0xac>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	60bb      	str	r3, [r7, #8]
    crc_array[0] = crc >> 24;
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	0e1b      	lsrs	r3, r3, #24
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	713b      	strb	r3, [r7, #4]
    crc_array[1] = crc >> 16;
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	0c1b      	lsrs	r3, r3, #16
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	717b      	strb	r3, [r7, #5]
    crc_array[2] = crc >> 8;
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	0a1b      	lsrs	r3, r3, #8
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	71bb      	strb	r3, [r7, #6]
    crc_array[3] = crc;
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	71fb      	strb	r3, [r7, #7]
    printf("CRC appended application.bin: %X:%X:%X:%X\r\n", crc_array[3], crc_array[2], crc_array[1], crc_array[0]);
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	4619      	mov	r1, r3
 80008ca:	79bb      	ldrb	r3, [r7, #6]
 80008cc:	461a      	mov	r2, r3
 80008ce:	797b      	ldrb	r3, [r7, #5]
 80008d0:	4618      	mov	r0, r3
 80008d2:	793b      	ldrb	r3, [r7, #4]
 80008d4:	9300      	str	r3, [sp, #0]
 80008d6:	4603      	mov	r3, r0
 80008d8:	480b      	ldr	r0, [pc, #44]	; (8000908 <Bootloader_VerifyChecksum+0xb0>)
 80008da:	f007 f9e9 	bl	8007cb0 <iprintf>

    if ((*(uint32_t *)CHECKSUM_ADDR) == calculated_crc)
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <Bootloader_VerifyChecksum+0xac>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	68fa      	ldr	r2, [r7, #12]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d101      	bne.n	80008ec <Bootloader_VerifyChecksum+0x94>
    {
        return 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	e000      	b.n	80008ee <Bootloader_VerifyChecksum+0x96>
    }
    return BL_CHKS_ERROR;
 80008ec:	2305      	movs	r3, #5
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3710      	adds	r7, #16
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	08040000 	.word	0x08040000
 80008fc:	200000a8 	.word	0x200000a8
 8000900:	08008cd0 	.word	0x08008cd0
 8000904:	0805fffc 	.word	0x0805fffc
 8000908:	08008cf0 	.word	0x08008cf0

0800090c <readWord>:

uint32_t readWord(uint32_t address)
{
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
    uint32_t read_data;
    read_data = *(uint32_t *)(address);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	60fb      	str	r3, [r7, #12]
    return read_data;
 800091a:	68fb      	ldr	r3, [r7, #12]
}
 800091c:	4618      	mov	r0, r3
 800091e:	3714      	adds	r7, #20
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <Bootloader_CheckForApplication>:

uint8_t Bootloader_CheckForApplication(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
    // Check if the application is there
    uint8_t emptyCellCount = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 10; i++)
 8000932:	2300      	movs	r3, #0
 8000934:	71bb      	strb	r3, [r7, #6]
 8000936:	e018      	b.n	800096a <Bootloader_CheckForApplication+0x42>
    {
        uint32_t word = readWord(ROM_START + (i * 4));
 8000938:	79bb      	ldrb	r3, [r7, #6]
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000940:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff ffe1 	bl	800090c <readWord>
 800094a:	6038      	str	r0, [r7, #0]

        printf("Word: %d\r\n", word);
 800094c:	6839      	ldr	r1, [r7, #0]
 800094e:	480d      	ldr	r0, [pc, #52]	; (8000984 <Bootloader_CheckForApplication+0x5c>)
 8000950:	f007 f9ae 	bl	8007cb0 <iprintf>

        if (word == 0xFFFF)
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800095a:	4293      	cmp	r3, r2
 800095c:	d102      	bne.n	8000964 <Bootloader_CheckForApplication+0x3c>
        {
            emptyCellCount++;
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	3301      	adds	r3, #1
 8000962:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 10; i++)
 8000964:	79bb      	ldrb	r3, [r7, #6]
 8000966:	3301      	adds	r3, #1
 8000968:	71bb      	strb	r3, [r7, #6]
 800096a:	79bb      	ldrb	r3, [r7, #6]
 800096c:	2b09      	cmp	r3, #9
 800096e:	d9e3      	bls.n	8000938 <Bootloader_CheckForApplication+0x10>
        }
    }

    if (emptyCellCount != 10)
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	2b0a      	cmp	r3, #10
 8000974:	d001      	beq.n	800097a <Bootloader_CheckForApplication+0x52>
    {
        return 0;
 8000976:	2300      	movs	r3, #0
 8000978:	e000      	b.n	800097c <Bootloader_CheckForApplication+0x54>
    }
    else
    {
        return -100;
 800097a:	239c      	movs	r3, #156	; 0x9c
    }
}
 800097c:	4618      	mov	r0, r3
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	08008d1c 	.word	0x08008d1c

08000988 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_CRC_Init+0x20>)
 800098e:	4a07      	ldr	r2, [pc, #28]	; (80009ac <MX_CRC_Init+0x24>)
 8000990:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_CRC_Init+0x20>)
 8000994:	f001 fc6f 	bl	8002276 <HAL_CRC_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800099e:	f001 f83d 	bl	8001a1c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200000a8 	.word	0x200000a8
 80009ac:	40023000 	.word	0x40023000

080009b0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a0b      	ldr	r2, [pc, #44]	; (80009ec <HAL_CRC_MspInit+0x3c>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d10d      	bne.n	80009de <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <HAL_CRC_MspInit+0x40>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a09      	ldr	r2, [pc, #36]	; (80009f0 <HAL_CRC_MspInit+0x40>)
 80009cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <HAL_CRC_MspInit+0x40>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80009de:	bf00      	nop
 80009e0:	3714      	adds	r7, #20
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	40023000 	.word	0x40023000
 80009f0:	40023800 	.word	0x40023800

080009f4 <HAL_CRC_MspDeInit>:

void HAL_CRC_MspDeInit(CRC_HandleTypeDef* crcHandle)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a07      	ldr	r2, [pc, #28]	; (8000a20 <HAL_CRC_MspDeInit+0x2c>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d105      	bne.n	8000a12 <HAL_CRC_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN CRC_MspDeInit 0 */

  /* USER CODE END CRC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CRC_CLK_DISABLE();
 8000a06:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <HAL_CRC_MspDeInit+0x30>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a06      	ldr	r2, [pc, #24]	; (8000a24 <HAL_CRC_MspDeInit+0x30>)
 8000a0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
  /* USER CODE BEGIN CRC_MspDeInit 1 */

  /* USER CODE END CRC_MspDeInit 1 */
  }
}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	40023000 	.word	0x40023000
 8000a24:	40023800 	.word	0x40023800

08000a28 <SELECT>:
static uint8_t CardType;                   /* SD type 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0;              /* Power condition Flag */

/* SPI Chip Select */
static void SELECT(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2110      	movs	r1, #16
 8000a30:	4802      	ldr	r0, [pc, #8]	; (8000a3c <SELECT+0x14>)
 8000a32:	f002 fbb7 	bl	80031a4 <HAL_GPIO_WritePin>
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40020000 	.word	0x40020000

08000a40 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000a44:	2201      	movs	r2, #1
 8000a46:	2110      	movs	r1, #16
 8000a48:	4802      	ldr	r0, [pc, #8]	; (8000a54 <DESELECT+0x14>)
 8000a4a:	f002 fbab 	bl	80031a4 <HAL_GPIO_WritePin>
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40020000 	.word	0x40020000

08000a58 <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	71fb      	strb	r3, [r7, #7]
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY)
 8000a62:	bf00      	nop
 8000a64:	4808      	ldr	r0, [pc, #32]	; (8000a88 <SPI_TxByte+0x30>)
 8000a66:	f003 fc9e 	bl	80043a6 <HAL_SPI_GetState>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d1f9      	bne.n	8000a64 <SPI_TxByte+0xc>
        ;
    HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8000a70:	1df9      	adds	r1, r7, #7
 8000a72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a76:	2201      	movs	r2, #1
 8000a78:	4803      	ldr	r0, [pc, #12]	; (8000a88 <SPI_TxByte+0x30>)
 8000a7a:	f003 f9b6 	bl	8003dea <HAL_SPI_Transmit>
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20004190 	.word	0x20004190

08000a8c <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af02      	add	r7, sp, #8
    uint8_t dummy, data;
    dummy = 0xFF;
 8000a92:	23ff      	movs	r3, #255	; 0xff
 8000a94:	71fb      	strb	r3, [r7, #7]
    data = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	71bb      	strb	r3, [r7, #6]

    while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY))
 8000a9a:	bf00      	nop
 8000a9c:	4809      	ldr	r0, [pc, #36]	; (8000ac4 <SPI_RxByte+0x38>)
 8000a9e:	f003 fc82 	bl	80043a6 <HAL_SPI_GetState>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d1f9      	bne.n	8000a9c <SPI_RxByte+0x10>
        ;
    HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8000aa8:	1dba      	adds	r2, r7, #6
 8000aaa:	1df9      	adds	r1, r7, #7
 8000aac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ab0:	9300      	str	r3, [sp, #0]
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	4803      	ldr	r0, [pc, #12]	; (8000ac4 <SPI_RxByte+0x38>)
 8000ab6:	f003 fad4 	bl	8004062 <HAL_SPI_TransmitReceive>

    return data;
 8000aba:	79bb      	ldrb	r3, [r7, #6]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20004190 	.word	0x20004190

08000ac8 <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
    *buff = SPI_RxByte();
 8000ad0:	f7ff ffdc 	bl	8000a8c <SPI_RxByte>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	701a      	strb	r2, [r3, #0]
}
 8000adc:	bf00      	nop
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
    uint8_t res;

    /* 500ms Counter preparation*/
    Timer2 = 50;
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <SD_ReadyWait+0x34>)
 8000aec:	2232      	movs	r2, #50	; 0x32
 8000aee:	801a      	strh	r2, [r3, #0]

    SPI_RxByte();
 8000af0:	f7ff ffcc 	bl	8000a8c <SPI_RxByte>

    do
    {
        /* 0xFF SPI communication until a value is received */
        res = SPI_RxByte();
 8000af4:	f7ff ffca 	bl	8000a8c <SPI_RxByte>
 8000af8:	4603      	mov	r3, r0
 8000afa:	71fb      	strb	r3, [r7, #7]
    } while ((res != 0xFF) && Timer2);
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	2bff      	cmp	r3, #255	; 0xff
 8000b00:	d004      	beq.n	8000b0c <SD_ReadyWait+0x28>
 8000b02:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <SD_ReadyWait+0x34>)
 8000b04:	881b      	ldrh	r3, [r3, #0]
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d1f3      	bne.n	8000af4 <SD_ReadyWait+0x10>

    return res;
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200041ea 	.word	0x200041ea

08000b1c <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
    uint8_t cmd_arg[6];
    uint32_t Count = 0x1FFF;
 8000b22:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000b26:	617b      	str	r3, [r7, #20]

    DESELECT();
 8000b28:	f7ff ff8a 	bl	8000a40 <DESELECT>

    for (int i = 0; i < 10; i++)
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	e005      	b.n	8000b3e <SD_PowerOn+0x22>
    {
        SPI_TxByte(0xFF);
 8000b32:	20ff      	movs	r0, #255	; 0xff
 8000b34:	f7ff ff90 	bl	8000a58 <SPI_TxByte>
    for (int i = 0; i < 10; i++)
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	2b09      	cmp	r3, #9
 8000b42:	ddf6      	ble.n	8000b32 <SD_PowerOn+0x16>
    }

    /* SPI Chips Select */
    SELECT();
 8000b44:	f7ff ff70 	bl	8000a28 <SELECT>

    /*  GO_IDLE_STATE State transitions*/
    cmd_arg[0] = (CMD0 | 0x40);
 8000b48:	2340      	movs	r3, #64	; 0x40
 8000b4a:	713b      	strb	r3, [r7, #4]
    cmd_arg[1] = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	717b      	strb	r3, [r7, #5]
    cmd_arg[2] = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	71bb      	strb	r3, [r7, #6]
    cmd_arg[3] = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	71fb      	strb	r3, [r7, #7]
    cmd_arg[4] = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	723b      	strb	r3, [r7, #8]
    cmd_arg[5] = 0x95;
 8000b5c:	2395      	movs	r3, #149	; 0x95
 8000b5e:	727b      	strb	r3, [r7, #9]

    /* Command transmission*/
    for (int i = 0; i < 6; i++)
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	e009      	b.n	8000b7a <SD_PowerOn+0x5e>
    {
        SPI_TxByte(cmd_arg[i]);
 8000b66:	1d3a      	adds	r2, r7, #4
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff ff72 	bl	8000a58 <SPI_TxByte>
    for (int i = 0; i < 6; i++)
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	3301      	adds	r3, #1
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	2b05      	cmp	r3, #5
 8000b7e:	ddf2      	ble.n	8000b66 <SD_PowerOn+0x4a>
    }

    /* Answer waiting*/
    while ((SPI_RxByte() != 0x01) && Count)
 8000b80:	e002      	b.n	8000b88 <SD_PowerOn+0x6c>
    {
        Count--;
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	3b01      	subs	r3, #1
 8000b86:	617b      	str	r3, [r7, #20]
    while ((SPI_RxByte() != 0x01) && Count)
 8000b88:	f7ff ff80 	bl	8000a8c <SPI_RxByte>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d002      	beq.n	8000b98 <SD_PowerOn+0x7c>
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d1f4      	bne.n	8000b82 <SD_PowerOn+0x66>
    }

    DESELECT();
 8000b98:	f7ff ff52 	bl	8000a40 <DESELECT>
    SPI_TxByte(0XFF);
 8000b9c:	20ff      	movs	r0, #255	; 0xff
 8000b9e:	f7ff ff5b 	bl	8000a58 <SPI_TxByte>

    PowerFlag = 1;
 8000ba2:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <SD_PowerOn+0x94>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	701a      	strb	r2, [r3, #0]
}
 8000ba8:	bf00      	nop
 8000baa:	3718      	adds	r7, #24
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	200000b1 	.word	0x200000b1

08000bb4 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
    PowerFlag = 0;
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <SD_PowerOff+0x14>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	200000b1 	.word	0x200000b1

08000bcc <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
    /*  0=off, 1=on */
    return PowerFlag;
 8000bd0:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <SD_CheckPower+0x14>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	200000b1 	.word	0x200000b1

08000be4 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
    uint8_t token;

    /* 100ms 타이머 */
    Timer1 = 10;
 8000bee:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <SD_RxDataBlock+0x68>)
 8000bf0:	220a      	movs	r2, #10
 8000bf2:	801a      	strh	r2, [r3, #0]

    /* 응답 대기 */
    do
    {
        token = SPI_RxByte();
 8000bf4:	f7ff ff4a 	bl	8000a8c <SPI_RxByte>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	73fb      	strb	r3, [r7, #15]
    } while ((token == 0xFF) && Timer1);
 8000bfc:	7bfb      	ldrb	r3, [r7, #15]
 8000bfe:	2bff      	cmp	r3, #255	; 0xff
 8000c00:	d104      	bne.n	8000c0c <SD_RxDataBlock+0x28>
 8000c02:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <SD_RxDataBlock+0x68>)
 8000c04:	881b      	ldrh	r3, [r3, #0]
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d1f3      	bne.n	8000bf4 <SD_RxDataBlock+0x10>

    /* 0xFE 이외 Token 수신 시 에러 처리 */
    if (token != 0xFE)
 8000c0c:	7bfb      	ldrb	r3, [r7, #15]
 8000c0e:	2bfe      	cmp	r3, #254	; 0xfe
 8000c10:	d001      	beq.n	8000c16 <SD_RxDataBlock+0x32>
        return FALSE;
 8000c12:	2300      	movs	r3, #0
 8000c14:	e016      	b.n	8000c44 <SD_RxDataBlock+0x60>

    /* 버퍼에 데이터 수신 */
    do
    {
        SPI_RxBytePtr(buff++);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	1c5a      	adds	r2, r3, #1
 8000c1a:	607a      	str	r2, [r7, #4]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff ff53 	bl	8000ac8 <SPI_RxBytePtr>
        SPI_RxBytePtr(buff++);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	1c5a      	adds	r2, r3, #1
 8000c26:	607a      	str	r2, [r7, #4]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff ff4d 	bl	8000ac8 <SPI_RxBytePtr>
    } while (btr -= 2);
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	3b02      	subs	r3, #2
 8000c32:	603b      	str	r3, [r7, #0]
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d1ed      	bne.n	8000c16 <SD_RxDataBlock+0x32>

    SPI_RxByte(); /* CRC 무시 */
 8000c3a:	f7ff ff27 	bl	8000a8c <SPI_RxByte>
    SPI_RxByte();
 8000c3e:	f7ff ff25 	bl	8000a8c <SPI_RxByte>

    return TRUE;
 8000c42:	2301      	movs	r3, #1
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	200041e9 	.word	0x200041e9

08000c50 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	460b      	mov	r3, r1
 8000c5a:	70fb      	strb	r3, [r7, #3]
    uint8_t resp, wc;
    uint8_t i = 0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	737b      	strb	r3, [r7, #13]

    /* SD카드 준비 대기 */
    if (SD_ReadyWait() != 0xFF)
 8000c60:	f7ff ff40 	bl	8000ae4 <SD_ReadyWait>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2bff      	cmp	r3, #255	; 0xff
 8000c68:	d001      	beq.n	8000c6e <SD_TxDataBlock+0x1e>
        return FALSE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e040      	b.n	8000cf0 <SD_TxDataBlock+0xa0>

    /* 토큰 전송 */
    SPI_TxByte(token);
 8000c6e:	78fb      	ldrb	r3, [r7, #3]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fef1 	bl	8000a58 <SPI_TxByte>

    /* 데이터 토큰인 경우 */
    if (token != 0xFD)
 8000c76:	78fb      	ldrb	r3, [r7, #3]
 8000c78:	2bfd      	cmp	r3, #253	; 0xfd
 8000c7a:	d031      	beq.n	8000ce0 <SD_TxDataBlock+0x90>
    {
        wc = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	73bb      	strb	r3, [r7, #14]

        /* 512 바이트 데이터 전송 */
        do
        {
            SPI_TxByte(*buff++);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	1c5a      	adds	r2, r3, #1
 8000c84:	607a      	str	r2, [r7, #4]
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fee5 	bl	8000a58 <SPI_TxByte>
            SPI_TxByte(*buff++);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	1c5a      	adds	r2, r3, #1
 8000c92:	607a      	str	r2, [r7, #4]
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fede 	bl	8000a58 <SPI_TxByte>
        } while (--wc);
 8000c9c:	7bbb      	ldrb	r3, [r7, #14]
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	73bb      	strb	r3, [r7, #14]
 8000ca2:	7bbb      	ldrb	r3, [r7, #14]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d1eb      	bne.n	8000c80 <SD_TxDataBlock+0x30>

        SPI_RxByte(); /* CRC 무시 */
 8000ca8:	f7ff fef0 	bl	8000a8c <SPI_RxByte>
        SPI_RxByte();
 8000cac:	f7ff feee 	bl	8000a8c <SPI_RxByte>

        /* 데이트 응답 수신 */
        while (i <= 64)
 8000cb0:	e00b      	b.n	8000cca <SD_TxDataBlock+0x7a>
        {
            resp = SPI_RxByte();
 8000cb2:	f7ff feeb 	bl	8000a8c <SPI_RxByte>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	73fb      	strb	r3, [r7, #15]

            /* 에러 응답 처리 */
            if ((resp & 0x1F) == 0x05)
 8000cba:	7bfb      	ldrb	r3, [r7, #15]
 8000cbc:	f003 031f 	and.w	r3, r3, #31
 8000cc0:	2b05      	cmp	r3, #5
 8000cc2:	d006      	beq.n	8000cd2 <SD_TxDataBlock+0x82>
                break;

            i++;
 8000cc4:	7b7b      	ldrb	r3, [r7, #13]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	737b      	strb	r3, [r7, #13]
        while (i <= 64)
 8000cca:	7b7b      	ldrb	r3, [r7, #13]
 8000ccc:	2b40      	cmp	r3, #64	; 0x40
 8000cce:	d9f0      	bls.n	8000cb2 <SD_TxDataBlock+0x62>
 8000cd0:	e000      	b.n	8000cd4 <SD_TxDataBlock+0x84>
                break;
 8000cd2:	bf00      	nop
        }

        /* SPI 수신 버퍼 Clear */
        while (SPI_RxByte() == 0)
 8000cd4:	bf00      	nop
 8000cd6:	f7ff fed9 	bl	8000a8c <SPI_RxByte>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d0fa      	beq.n	8000cd6 <SD_TxDataBlock+0x86>
            ;
    }

    if ((resp & 0x1F) == 0x05)
 8000ce0:	7bfb      	ldrb	r3, [r7, #15]
 8000ce2:	f003 031f 	and.w	r3, r3, #31
 8000ce6:	2b05      	cmp	r3, #5
 8000ce8:	d101      	bne.n	8000cee <SD_TxDataBlock+0x9e>
        return TRUE;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e000      	b.n	8000cf0 <SD_TxDataBlock+0xa0>
    else
        return FALSE;
 8000cee:	2300      	movs	r3, #0
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	6039      	str	r1, [r7, #0]
 8000d02:	71fb      	strb	r3, [r7, #7]
    uint8_t crc, res;

    /* SD카드 대기 */
    if (SD_ReadyWait() != 0xFF)
 8000d04:	f7ff feee 	bl	8000ae4 <SD_ReadyWait>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2bff      	cmp	r3, #255	; 0xff
 8000d0c:	d001      	beq.n	8000d12 <SD_SendCmd+0x1a>
        return 0xFF;
 8000d0e:	23ff      	movs	r3, #255	; 0xff
 8000d10:	e040      	b.n	8000d94 <SD_SendCmd+0x9c>

    /* 명령 패킷 전송 */
    SPI_TxByte(cmd);               /* Command */
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fe9f 	bl	8000a58 <SPI_TxByte>
    SPI_TxByte((BYTE)(arg >> 24)); /* Argument[31..24] */
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	0e1b      	lsrs	r3, r3, #24
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fe99 	bl	8000a58 <SPI_TxByte>
    SPI_TxByte((BYTE)(arg >> 16)); /* Argument[23..16] */
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	0c1b      	lsrs	r3, r3, #16
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fe93 	bl	8000a58 <SPI_TxByte>
    SPI_TxByte((BYTE)(arg >> 8));  /* Argument[15..8] */
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	0a1b      	lsrs	r3, r3, #8
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fe8d 	bl	8000a58 <SPI_TxByte>
    SPI_TxByte((BYTE)arg);         /* Argument[7..0] */
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fe88 	bl	8000a58 <SPI_TxByte>

    /* 명령별 CRC 준비 */
    crc = 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	73fb      	strb	r3, [r7, #15]
    if (cmd == CMD0)
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	2b40      	cmp	r3, #64	; 0x40
 8000d50:	d101      	bne.n	8000d56 <SD_SendCmd+0x5e>
        crc = 0x95; /* CRC for CMD0(0) */
 8000d52:	2395      	movs	r3, #149	; 0x95
 8000d54:	73fb      	strb	r3, [r7, #15]

    if (cmd == CMD8)
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	2b48      	cmp	r3, #72	; 0x48
 8000d5a:	d101      	bne.n	8000d60 <SD_SendCmd+0x68>
        crc = 0x87; /* CRC for CMD8(0x1AA) */
 8000d5c:	2387      	movs	r3, #135	; 0x87
 8000d5e:	73fb      	strb	r3, [r7, #15]

    /* CRC 전송 */
    SPI_TxByte(crc);
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff fe78 	bl	8000a58 <SPI_TxByte>

    /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
    if (cmd == CMD12)
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	2b4c      	cmp	r3, #76	; 0x4c
 8000d6c:	d101      	bne.n	8000d72 <SD_SendCmd+0x7a>
        SPI_RxByte();
 8000d6e:	f7ff fe8d 	bl	8000a8c <SPI_RxByte>

    /* 10회 내에 정상 데이터를 수신한다. */
    uint8_t n = 10;
 8000d72:	230a      	movs	r3, #10
 8000d74:	73bb      	strb	r3, [r7, #14]
    do
    {
        res = SPI_RxByte();
 8000d76:	f7ff fe89 	bl	8000a8c <SPI_RxByte>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	737b      	strb	r3, [r7, #13]
    } while ((res & 0x80) && --n);
 8000d7e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	da05      	bge.n	8000d92 <SD_SendCmd+0x9a>
 8000d86:	7bbb      	ldrb	r3, [r7, #14]
 8000d88:	3b01      	subs	r3, #1
 8000d8a:	73bb      	strb	r3, [r7, #14]
 8000d8c:	7bbb      	ldrb	r3, [r7, #14]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d1f1      	bne.n	8000d76 <SD_SendCmd+0x7e>

    return res;
 8000d92:	7b7b      	ldrb	r3, [r7, #13]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000d9c:	b590      	push	{r4, r7, lr}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
    uint8_t n, type, ocr[4];

    /* 한종류의 드라이브만 지원 */
    if (drv)
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <SD_disk_initialize+0x14>
        return STA_NOINIT;
 8000dac:	2301      	movs	r3, #1
 8000dae:	e0d5      	b.n	8000f5c <SD_disk_initialize+0x1c0>

    /* SD카드 미삽입 */
    if (Stat & STA_NODISK)
 8000db0:	4b6c      	ldr	r3, [pc, #432]	; (8000f64 <SD_disk_initialize+0x1c8>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d003      	beq.n	8000dc6 <SD_disk_initialize+0x2a>
        return Stat;
 8000dbe:	4b69      	ldr	r3, [pc, #420]	; (8000f64 <SD_disk_initialize+0x1c8>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	e0ca      	b.n	8000f5c <SD_disk_initialize+0x1c0>

    /* SD카드 Power On */
    SD_PowerOn();
 8000dc6:	f7ff fea9 	bl	8000b1c <SD_PowerOn>

    /* SPI 통신을 위해 Chip Select */
    SELECT();
 8000dca:	f7ff fe2d 	bl	8000a28 <SELECT>

    /* SD카드 타입변수 초기화 */
    type = 0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	73bb      	strb	r3, [r7, #14]

    /* Idle 상태 진입 */
    if (SD_SendCmd(CMD0, 0) == 1)
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	2040      	movs	r0, #64	; 0x40
 8000dd6:	f7ff ff8f 	bl	8000cf8 <SD_SendCmd>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	f040 80a5 	bne.w	8000f2c <SD_disk_initialize+0x190>
    {
        /* 타이머 1초 설정 */
        Timer1 = 100;
 8000de2:	4b61      	ldr	r3, [pc, #388]	; (8000f68 <SD_disk_initialize+0x1cc>)
 8000de4:	2264      	movs	r2, #100	; 0x64
 8000de6:	801a      	strh	r2, [r3, #0]

        /* SD 인터페이스 동작 조건 확인 */
        if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000de8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000dec:	2048      	movs	r0, #72	; 0x48
 8000dee:	f7ff ff83 	bl	8000cf8 <SD_SendCmd>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d158      	bne.n	8000eaa <SD_disk_initialize+0x10e>
        {
            /* SDC Ver2+ */
            for (n = 0; n < 4; n++)
 8000df8:	2300      	movs	r3, #0
 8000dfa:	73fb      	strb	r3, [r7, #15]
 8000dfc:	e00c      	b.n	8000e18 <SD_disk_initialize+0x7c>
            {
                ocr[n] = SPI_RxByte();
 8000dfe:	7bfc      	ldrb	r4, [r7, #15]
 8000e00:	f7ff fe44 	bl	8000a8c <SPI_RxByte>
 8000e04:	4603      	mov	r3, r0
 8000e06:	461a      	mov	r2, r3
 8000e08:	f104 0310 	add.w	r3, r4, #16
 8000e0c:	443b      	add	r3, r7
 8000e0e:	f803 2c08 	strb.w	r2, [r3, #-8]
            for (n = 0; n < 4; n++)
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
 8000e14:	3301      	adds	r3, #1
 8000e16:	73fb      	strb	r3, [r7, #15]
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
 8000e1a:	2b03      	cmp	r3, #3
 8000e1c:	d9ef      	bls.n	8000dfe <SD_disk_initialize+0x62>
            }

            if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000e1e:	7abb      	ldrb	r3, [r7, #10]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	f040 8083 	bne.w	8000f2c <SD_disk_initialize+0x190>
 8000e26:	7afb      	ldrb	r3, [r7, #11]
 8000e28:	2baa      	cmp	r3, #170	; 0xaa
 8000e2a:	d17f      	bne.n	8000f2c <SD_disk_initialize+0x190>
            {
                /* 2.7-3.6V 전압범위 동작 */
                do
                {
                    if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	2077      	movs	r0, #119	; 0x77
 8000e30:	f7ff ff62 	bl	8000cf8 <SD_SendCmd>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d807      	bhi.n	8000e4a <SD_disk_initialize+0xae>
 8000e3a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000e3e:	2069      	movs	r0, #105	; 0x69
 8000e40:	f7ff ff5a 	bl	8000cf8 <SD_SendCmd>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d005      	beq.n	8000e56 <SD_disk_initialize+0xba>
                        break; /* ACMD41 with HCS bit */
                } while (Timer1);
 8000e4a:	4b47      	ldr	r3, [pc, #284]	; (8000f68 <SD_disk_initialize+0x1cc>)
 8000e4c:	881b      	ldrh	r3, [r3, #0]
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d1eb      	bne.n	8000e2c <SD_disk_initialize+0x90>
 8000e54:	e000      	b.n	8000e58 <SD_disk_initialize+0xbc>
                        break; /* ACMD41 with HCS bit */
 8000e56:	bf00      	nop

                if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000e58:	4b43      	ldr	r3, [pc, #268]	; (8000f68 <SD_disk_initialize+0x1cc>)
 8000e5a:	881b      	ldrh	r3, [r3, #0]
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d064      	beq.n	8000f2c <SD_disk_initialize+0x190>
 8000e62:	2100      	movs	r1, #0
 8000e64:	207a      	movs	r0, #122	; 0x7a
 8000e66:	f7ff ff47 	bl	8000cf8 <SD_SendCmd>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d15d      	bne.n	8000f2c <SD_disk_initialize+0x190>
                {
                    /* Check CCS bit */
                    for (n = 0; n < 4; n++)
 8000e70:	2300      	movs	r3, #0
 8000e72:	73fb      	strb	r3, [r7, #15]
 8000e74:	e00c      	b.n	8000e90 <SD_disk_initialize+0xf4>
                    {
                        ocr[n] = SPI_RxByte();
 8000e76:	7bfc      	ldrb	r4, [r7, #15]
 8000e78:	f7ff fe08 	bl	8000a8c <SPI_RxByte>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	461a      	mov	r2, r3
 8000e80:	f104 0310 	add.w	r3, r4, #16
 8000e84:	443b      	add	r3, r7
 8000e86:	f803 2c08 	strb.w	r2, [r3, #-8]
                    for (n = 0; n < 4; n++)
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	73fb      	strb	r3, [r7, #15]
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	2b03      	cmp	r3, #3
 8000e94:	d9ef      	bls.n	8000e76 <SD_disk_initialize+0xda>
                    }

                    type = (ocr[0] & 0x40) ? 6 : 2;
 8000e96:	7a3b      	ldrb	r3, [r7, #8]
 8000e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <SD_disk_initialize+0x108>
 8000ea0:	2306      	movs	r3, #6
 8000ea2:	e000      	b.n	8000ea6 <SD_disk_initialize+0x10a>
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	73bb      	strb	r3, [r7, #14]
 8000ea8:	e040      	b.n	8000f2c <SD_disk_initialize+0x190>
            }
        }
        else
        {
            /* SDC Ver1 or MMC */
            type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8000eaa:	2100      	movs	r1, #0
 8000eac:	2077      	movs	r0, #119	; 0x77
 8000eae:	f7ff ff23 	bl	8000cf8 <SD_SendCmd>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d808      	bhi.n	8000eca <SD_disk_initialize+0x12e>
 8000eb8:	2100      	movs	r1, #0
 8000eba:	2069      	movs	r0, #105	; 0x69
 8000ebc:	f7ff ff1c 	bl	8000cf8 <SD_SendCmd>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d801      	bhi.n	8000eca <SD_disk_initialize+0x12e>
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	e000      	b.n	8000ecc <SD_disk_initialize+0x130>
 8000eca:	2301      	movs	r3, #1
 8000ecc:	73bb      	strb	r3, [r7, #14]

            do
            {
                if (type == 2)
 8000ece:	7bbb      	ldrb	r3, [r7, #14]
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d10e      	bne.n	8000ef2 <SD_disk_initialize+0x156>
                {
                    if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	2077      	movs	r0, #119	; 0x77
 8000ed8:	f7ff ff0e 	bl	8000cf8 <SD_SendCmd>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d80e      	bhi.n	8000f00 <SD_disk_initialize+0x164>
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	2069      	movs	r0, #105	; 0x69
 8000ee6:	f7ff ff07 	bl	8000cf8 <SD_SendCmd>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d107      	bne.n	8000f00 <SD_disk_initialize+0x164>
                        break; /* ACMD41 */
 8000ef0:	e00d      	b.n	8000f0e <SD_disk_initialize+0x172>
                }
                else
                {
                    if (SD_SendCmd(CMD1, 0) == 0)
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	2041      	movs	r0, #65	; 0x41
 8000ef6:	f7ff feff 	bl	8000cf8 <SD_SendCmd>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d005      	beq.n	8000f0c <SD_disk_initialize+0x170>
                        break; /* CMD1 */
                }
            } while (Timer1);
 8000f00:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <SD_disk_initialize+0x1cc>)
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d1e1      	bne.n	8000ece <SD_disk_initialize+0x132>
 8000f0a:	e000      	b.n	8000f0e <SD_disk_initialize+0x172>
                        break; /* CMD1 */
 8000f0c:	bf00      	nop

            if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8000f0e:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <SD_disk_initialize+0x1cc>)
 8000f10:	881b      	ldrh	r3, [r3, #0]
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d007      	beq.n	8000f28 <SD_disk_initialize+0x18c>
 8000f18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f1c:	2050      	movs	r0, #80	; 0x50
 8000f1e:	f7ff feeb 	bl	8000cf8 <SD_SendCmd>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <SD_disk_initialize+0x190>
            {
                /* 블럭 길이 선택 */
                type = 0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	73bb      	strb	r3, [r7, #14]
            }
        }
    }

    CardType = type;
 8000f2c:	4a0f      	ldr	r2, [pc, #60]	; (8000f6c <SD_disk_initialize+0x1d0>)
 8000f2e:	7bbb      	ldrb	r3, [r7, #14]
 8000f30:	7013      	strb	r3, [r2, #0]

    DESELECT();
 8000f32:	f7ff fd85 	bl	8000a40 <DESELECT>

    SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8000f36:	f7ff fda9 	bl	8000a8c <SPI_RxByte>

    if (type)
 8000f3a:	7bbb      	ldrb	r3, [r7, #14]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d008      	beq.n	8000f52 <SD_disk_initialize+0x1b6>
    {
        /* Clear STA_NOINIT */
        Stat &= ~STA_NOINIT;
 8000f40:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <SD_disk_initialize+0x1c8>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	f023 0301 	bic.w	r3, r3, #1
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <SD_disk_initialize+0x1c8>)
 8000f4e:	701a      	strb	r2, [r3, #0]
 8000f50:	e001      	b.n	8000f56 <SD_disk_initialize+0x1ba>
    }
    else
    {
        /* Initialization failed */
        SD_PowerOff();
 8000f52:	f7ff fe2f 	bl	8000bb4 <SD_PowerOff>
    }

    return Stat;
 8000f56:	4b03      	ldr	r3, [pc, #12]	; (8000f64 <SD_disk_initialize+0x1c8>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	b2db      	uxtb	r3, r3
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3714      	adds	r7, #20
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd90      	pop	{r4, r7, pc}
 8000f64:	20000004 	.word	0x20000004
 8000f68:	200041e9 	.word	0x200041e9
 8000f6c:	200000b0 	.word	0x200000b0

08000f70 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
    if (drv)
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <SD_disk_status+0x14>
        return STA_NOINIT;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e002      	b.n	8000f8a <SD_disk_status+0x1a>

    return Stat;
 8000f84:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <SD_disk_status+0x28>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	b2db      	uxtb	r3, r3
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	20000004 	.word	0x20000004

08000f9c <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE *buff, DWORD sector, UINT count)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60b9      	str	r1, [r7, #8]
 8000fa4:	607a      	str	r2, [r7, #4]
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	4603      	mov	r3, r0
 8000faa:	73fb      	strb	r3, [r7, #15]
    if (pdrv || !count)
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d102      	bne.n	8000fb8 <SD_disk_read+0x1c>
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d101      	bne.n	8000fbc <SD_disk_read+0x20>
        return RES_PARERR;
 8000fb8:	2304      	movs	r3, #4
 8000fba:	e051      	b.n	8001060 <SD_disk_read+0xc4>

    if (Stat & STA_NOINIT)
 8000fbc:	4b2a      	ldr	r3, [pc, #168]	; (8001068 <SD_disk_read+0xcc>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <SD_disk_read+0x32>
        return RES_NOTRDY;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	e048      	b.n	8001060 <SD_disk_read+0xc4>

    if (!(CardType & 4))
 8000fce:	4b27      	ldr	r3, [pc, #156]	; (800106c <SD_disk_read+0xd0>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	f003 0304 	and.w	r3, r3, #4
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d102      	bne.n	8000fe0 <SD_disk_read+0x44>
        sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	025b      	lsls	r3, r3, #9
 8000fde:	607b      	str	r3, [r7, #4]

    SELECT();
 8000fe0:	f7ff fd22 	bl	8000a28 <SELECT>

    if (count == 1)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d111      	bne.n	800100e <SD_disk_read+0x72>
    {
        /* 싱글 블록 읽기 */
        if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8000fea:	6879      	ldr	r1, [r7, #4]
 8000fec:	2051      	movs	r0, #81	; 0x51
 8000fee:	f7ff fe83 	bl	8000cf8 <SD_SendCmd>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d129      	bne.n	800104c <SD_disk_read+0xb0>
 8000ff8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ffc:	68b8      	ldr	r0, [r7, #8]
 8000ffe:	f7ff fdf1 	bl	8000be4 <SD_RxDataBlock>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d021      	beq.n	800104c <SD_disk_read+0xb0>
            count = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	603b      	str	r3, [r7, #0]
 800100c:	e01e      	b.n	800104c <SD_disk_read+0xb0>
    }
    else
    {
        /* 다중 블록 읽기 */
        if (SD_SendCmd(CMD18, sector) == 0)
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	2052      	movs	r0, #82	; 0x52
 8001012:	f7ff fe71 	bl	8000cf8 <SD_SendCmd>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d117      	bne.n	800104c <SD_disk_read+0xb0>
        {
            do
            {
                if (!SD_RxDataBlock(buff, 512))
 800101c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001020:	68b8      	ldr	r0, [r7, #8]
 8001022:	f7ff fddf 	bl	8000be4 <SD_RxDataBlock>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d00a      	beq.n	8001042 <SD_disk_read+0xa6>
                    break;

                buff += 512;
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001032:	60bb      	str	r3, [r7, #8]
            } while (--count);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	3b01      	subs	r3, #1
 8001038:	603b      	str	r3, [r7, #0]
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d1ed      	bne.n	800101c <SD_disk_read+0x80>
 8001040:	e000      	b.n	8001044 <SD_disk_read+0xa8>
                    break;
 8001042:	bf00      	nop

            /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
            SD_SendCmd(CMD12, 0);
 8001044:	2100      	movs	r1, #0
 8001046:	204c      	movs	r0, #76	; 0x4c
 8001048:	f7ff fe56 	bl	8000cf8 <SD_SendCmd>
        }
    }

    DESELECT();
 800104c:	f7ff fcf8 	bl	8000a40 <DESELECT>
    SPI_RxByte(); /* Idle 상태(Release DO) */
 8001050:	f7ff fd1c 	bl	8000a8c <SPI_RxByte>

    return count ? RES_ERROR : RES_OK;
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	2b00      	cmp	r3, #0
 8001058:	bf14      	ite	ne
 800105a:	2301      	movne	r3, #1
 800105c:	2300      	moveq	r3, #0
 800105e:	b2db      	uxtb	r3, r3
}
 8001060:	4618      	mov	r0, r3
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000004 	.word	0x20000004
 800106c:	200000b0 	.word	0x200000b0

08001070 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE *buff, DWORD sector, UINT count)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	60b9      	str	r1, [r7, #8]
 8001078:	607a      	str	r2, [r7, #4]
 800107a:	603b      	str	r3, [r7, #0]
 800107c:	4603      	mov	r3, r0
 800107e:	73fb      	strb	r3, [r7, #15]
    if (pdrv || !count)
 8001080:	7bfb      	ldrb	r3, [r7, #15]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d102      	bne.n	800108c <SD_disk_write+0x1c>
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d101      	bne.n	8001090 <SD_disk_write+0x20>
        return RES_PARERR;
 800108c:	2304      	movs	r3, #4
 800108e:	e06b      	b.n	8001168 <SD_disk_write+0xf8>

    if (Stat & STA_NOINIT)
 8001090:	4b37      	ldr	r3, [pc, #220]	; (8001170 <SD_disk_write+0x100>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b2db      	uxtb	r3, r3
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <SD_disk_write+0x32>
        return RES_NOTRDY;
 800109e:	2303      	movs	r3, #3
 80010a0:	e062      	b.n	8001168 <SD_disk_write+0xf8>

    if (Stat & STA_PROTECT)
 80010a2:	4b33      	ldr	r3, [pc, #204]	; (8001170 <SD_disk_write+0x100>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	f003 0304 	and.w	r3, r3, #4
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <SD_disk_write+0x44>
        return RES_WRPRT;
 80010b0:	2302      	movs	r3, #2
 80010b2:	e059      	b.n	8001168 <SD_disk_write+0xf8>

    if (!(CardType & 4))
 80010b4:	4b2f      	ldr	r3, [pc, #188]	; (8001174 <SD_disk_write+0x104>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	f003 0304 	and.w	r3, r3, #4
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d102      	bne.n	80010c6 <SD_disk_write+0x56>
        sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	025b      	lsls	r3, r3, #9
 80010c4:	607b      	str	r3, [r7, #4]

    SELECT();
 80010c6:	f7ff fcaf 	bl	8000a28 <SELECT>

    if (count == 1)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d110      	bne.n	80010f2 <SD_disk_write+0x82>
    {
        /* 싱글 블록 쓰기 */
        if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80010d0:	6879      	ldr	r1, [r7, #4]
 80010d2:	2058      	movs	r0, #88	; 0x58
 80010d4:	f7ff fe10 	bl	8000cf8 <SD_SendCmd>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d13a      	bne.n	8001154 <SD_disk_write+0xe4>
 80010de:	21fe      	movs	r1, #254	; 0xfe
 80010e0:	68b8      	ldr	r0, [r7, #8]
 80010e2:	f7ff fdb5 	bl	8000c50 <SD_TxDataBlock>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d033      	beq.n	8001154 <SD_disk_write+0xe4>
            count = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	603b      	str	r3, [r7, #0]
 80010f0:	e030      	b.n	8001154 <SD_disk_write+0xe4>
    }
    else
    {
        /* 다중 블록 쓰기 */
        if (CardType & 2)
 80010f2:	4b20      	ldr	r3, [pc, #128]	; (8001174 <SD_disk_write+0x104>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d007      	beq.n	800110e <SD_disk_write+0x9e>
        {
            SD_SendCmd(CMD55, 0);
 80010fe:	2100      	movs	r1, #0
 8001100:	2077      	movs	r0, #119	; 0x77
 8001102:	f7ff fdf9 	bl	8000cf8 <SD_SendCmd>
            SD_SendCmd(CMD23, count); /* ACMD23 */
 8001106:	6839      	ldr	r1, [r7, #0]
 8001108:	2057      	movs	r0, #87	; 0x57
 800110a:	f7ff fdf5 	bl	8000cf8 <SD_SendCmd>
        }

        if (SD_SendCmd(CMD25, sector) == 0)
 800110e:	6879      	ldr	r1, [r7, #4]
 8001110:	2059      	movs	r0, #89	; 0x59
 8001112:	f7ff fdf1 	bl	8000cf8 <SD_SendCmd>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d11b      	bne.n	8001154 <SD_disk_write+0xe4>
        {
            do
            {
                if (!SD_TxDataBlock(buff, 0xFC))
 800111c:	21fc      	movs	r1, #252	; 0xfc
 800111e:	68b8      	ldr	r0, [r7, #8]
 8001120:	f7ff fd96 	bl	8000c50 <SD_TxDataBlock>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d00a      	beq.n	8001140 <SD_disk_write+0xd0>
                    break;

                buff += 512;
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001130:	60bb      	str	r3, [r7, #8]
            } while (--count);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	3b01      	subs	r3, #1
 8001136:	603b      	str	r3, [r7, #0]
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1ee      	bne.n	800111c <SD_disk_write+0xac>
 800113e:	e000      	b.n	8001142 <SD_disk_write+0xd2>
                    break;
 8001140:	bf00      	nop

            if (!SD_TxDataBlock(0, 0xFD))
 8001142:	21fd      	movs	r1, #253	; 0xfd
 8001144:	2000      	movs	r0, #0
 8001146:	f7ff fd83 	bl	8000c50 <SD_TxDataBlock>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d101      	bne.n	8001154 <SD_disk_write+0xe4>
            {
                count = 1;
 8001150:	2301      	movs	r3, #1
 8001152:	603b      	str	r3, [r7, #0]
            }
        }
    }

    DESELECT();
 8001154:	f7ff fc74 	bl	8000a40 <DESELECT>
    SPI_RxByte();
 8001158:	f7ff fc98 	bl	8000a8c <SPI_RxByte>

    return count ? RES_ERROR : RES_OK;
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	bf14      	ite	ne
 8001162:	2301      	movne	r3, #1
 8001164:	2300      	moveq	r3, #0
 8001166:	b2db      	uxtb	r3, r3
}
 8001168:	4618      	mov	r0, r3
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000004 	.word	0x20000004
 8001174:	200000b0 	.word	0x200000b0

08001178 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b08b      	sub	sp, #44	; 0x2c
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	603a      	str	r2, [r7, #0]
 8001182:	71fb      	strb	r3, [r7, #7]
 8001184:	460b      	mov	r3, r1
 8001186:	71bb      	strb	r3, [r7, #6]
    DRESULT res;
    BYTE n, csd[16], *ptr = buff;
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	623b      	str	r3, [r7, #32]
    WORD csize;

    if (drv)
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <SD_disk_ioctl+0x1e>
        return RES_PARERR;
 8001192:	2304      	movs	r3, #4
 8001194:	e11b      	b.n	80013ce <SD_disk_ioctl+0x256>

    res = RES_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (ctrl == CTRL_POWER)
 800119c:	79bb      	ldrb	r3, [r7, #6]
 800119e:	2b05      	cmp	r3, #5
 80011a0:	d129      	bne.n	80011f6 <SD_disk_ioctl+0x7e>
    {
        switch (*ptr)
 80011a2:	6a3b      	ldr	r3, [r7, #32]
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d017      	beq.n	80011da <SD_disk_ioctl+0x62>
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	dc1f      	bgt.n	80011ee <SD_disk_ioctl+0x76>
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d002      	beq.n	80011b8 <SD_disk_ioctl+0x40>
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d00b      	beq.n	80011ce <SD_disk_ioctl+0x56>
 80011b6:	e01a      	b.n	80011ee <SD_disk_ioctl+0x76>
        {
        case 0:
            if (SD_CheckPower())
 80011b8:	f7ff fd08 	bl	8000bcc <SD_CheckPower>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <SD_disk_ioctl+0x4e>
                SD_PowerOff(); /* Power Off */
 80011c2:	f7ff fcf7 	bl	8000bb4 <SD_PowerOff>
            res = RES_OK;
 80011c6:	2300      	movs	r3, #0
 80011c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80011cc:	e0fd      	b.n	80013ca <SD_disk_ioctl+0x252>
        case 1:
            SD_PowerOn(); /* Power On */
 80011ce:	f7ff fca5 	bl	8000b1c <SD_PowerOn>
            res = RES_OK;
 80011d2:	2300      	movs	r3, #0
 80011d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80011d8:	e0f7      	b.n	80013ca <SD_disk_ioctl+0x252>
        case 2:
            *(ptr + 1) = (BYTE)SD_CheckPower();
 80011da:	6a3b      	ldr	r3, [r7, #32]
 80011dc:	1c5c      	adds	r4, r3, #1
 80011de:	f7ff fcf5 	bl	8000bcc <SD_CheckPower>
 80011e2:	4603      	mov	r3, r0
 80011e4:	7023      	strb	r3, [r4, #0]
            res = RES_OK; /* Power Check */
 80011e6:	2300      	movs	r3, #0
 80011e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80011ec:	e0ed      	b.n	80013ca <SD_disk_ioctl+0x252>
        default:
            res = RES_PARERR;
 80011ee:	2304      	movs	r3, #4
 80011f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80011f4:	e0e9      	b.n	80013ca <SD_disk_ioctl+0x252>
        }
    }
    else
    {
        if (Stat & STA_NOINIT)
 80011f6:	4b78      	ldr	r3, [pc, #480]	; (80013d8 <SD_disk_ioctl+0x260>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <SD_disk_ioctl+0x90>
            return RES_NOTRDY;
 8001204:	2303      	movs	r3, #3
 8001206:	e0e2      	b.n	80013ce <SD_disk_ioctl+0x256>

        SELECT();
 8001208:	f7ff fc0e 	bl	8000a28 <SELECT>

        switch (ctrl)
 800120c:	79bb      	ldrb	r3, [r7, #6]
 800120e:	2b0d      	cmp	r3, #13
 8001210:	f200 80cc 	bhi.w	80013ac <SD_disk_ioctl+0x234>
 8001214:	a201      	add	r2, pc, #4	; (adr r2, 800121c <SD_disk_ioctl+0xa4>)
 8001216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800121a:	bf00      	nop
 800121c:	08001317 	.word	0x08001317
 8001220:	08001255 	.word	0x08001255
 8001224:	08001307 	.word	0x08001307
 8001228:	080013ad 	.word	0x080013ad
 800122c:	080013ad 	.word	0x080013ad
 8001230:	080013ad 	.word	0x080013ad
 8001234:	080013ad 	.word	0x080013ad
 8001238:	080013ad 	.word	0x080013ad
 800123c:	080013ad 	.word	0x080013ad
 8001240:	080013ad 	.word	0x080013ad
 8001244:	080013ad 	.word	0x080013ad
 8001248:	08001329 	.word	0x08001329
 800124c:	0800134d 	.word	0x0800134d
 8001250:	08001371 	.word	0x08001371
        {
        case GET_SECTOR_COUNT:
            /* SD카드 내 Sector의 개수 (DWORD) */
            if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001254:	2100      	movs	r1, #0
 8001256:	2049      	movs	r0, #73	; 0x49
 8001258:	f7ff fd4e 	bl	8000cf8 <SD_SendCmd>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	f040 80a8 	bne.w	80013b4 <SD_disk_ioctl+0x23c>
 8001264:	f107 030c 	add.w	r3, r7, #12
 8001268:	2110      	movs	r1, #16
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff fcba 	bl	8000be4 <SD_RxDataBlock>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	f000 809e 	beq.w	80013b4 <SD_disk_ioctl+0x23c>
            {
                if ((csd[0] >> 6) == 1)
 8001278:	7b3b      	ldrb	r3, [r7, #12]
 800127a:	099b      	lsrs	r3, r3, #6
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b01      	cmp	r3, #1
 8001280:	d10e      	bne.n	80012a0 <SD_disk_ioctl+0x128>
                {
                    /* SDC ver 2.00 */
                    csize = csd[9] + ((WORD)csd[8] << 8) + 1;
 8001282:	7d7b      	ldrb	r3, [r7, #21]
 8001284:	b29a      	uxth	r2, r3
 8001286:	7d3b      	ldrb	r3, [r7, #20]
 8001288:	b29b      	uxth	r3, r3
 800128a:	021b      	lsls	r3, r3, #8
 800128c:	b29b      	uxth	r3, r3
 800128e:	4413      	add	r3, r2
 8001290:	b29b      	uxth	r3, r3
 8001292:	3301      	adds	r3, #1
 8001294:	83fb      	strh	r3, [r7, #30]
                    *(DWORD *)buff = (DWORD)csize << 10;
 8001296:	8bfb      	ldrh	r3, [r7, #30]
 8001298:	029a      	lsls	r2, r3, #10
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	e02e      	b.n	80012fe <SD_disk_ioctl+0x186>
                }
                else
                {
                    /* MMC or SDC ver 1.XX */
                    n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80012a0:	7c7b      	ldrb	r3, [r7, #17]
 80012a2:	f003 030f 	and.w	r3, r3, #15
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	7dbb      	ldrb	r3, [r7, #22]
 80012aa:	09db      	lsrs	r3, r3, #7
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	4413      	add	r3, r2
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	7d7b      	ldrb	r3, [r7, #21]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	f003 0306 	and.w	r3, r3, #6
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	4413      	add	r3, r2
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	3302      	adds	r3, #2
 80012c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80012c8:	7d3b      	ldrb	r3, [r7, #20]
 80012ca:	099b      	lsrs	r3, r3, #6
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	7cfb      	ldrb	r3, [r7, #19]
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	4413      	add	r3, r2
 80012da:	b29a      	uxth	r2, r3
 80012dc:	7cbb      	ldrb	r3, [r7, #18]
 80012de:	029b      	lsls	r3, r3, #10
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	4413      	add	r3, r2
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	3301      	adds	r3, #1
 80012ee:	83fb      	strh	r3, [r7, #30]
                    *(DWORD *)buff = (DWORD)csize << (n - 9);
 80012f0:	8bfa      	ldrh	r2, [r7, #30]
 80012f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012f6:	3b09      	subs	r3, #9
 80012f8:	409a      	lsls	r2, r3
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	601a      	str	r2, [r3, #0]
                }

                res = RES_OK;
 80012fe:	2300      	movs	r3, #0
 8001300:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 8001304:	e056      	b.n	80013b4 <SD_disk_ioctl+0x23c>

        case GET_SECTOR_SIZE:
            /* 섹터의 단위 크기 (WORD) */
            *(WORD *)buff = 512;
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	f44f 7200 	mov.w	r2, #512	; 0x200
 800130c:	801a      	strh	r2, [r3, #0]
            res = RES_OK;
 800130e:	2300      	movs	r3, #0
 8001310:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8001314:	e055      	b.n	80013c2 <SD_disk_ioctl+0x24a>

        case CTRL_SYNC:
            /* 쓰기 동기화 */
            if (SD_ReadyWait() == 0xFF)
 8001316:	f7ff fbe5 	bl	8000ae4 <SD_ReadyWait>
 800131a:	4603      	mov	r3, r0
 800131c:	2bff      	cmp	r3, #255	; 0xff
 800131e:	d14b      	bne.n	80013b8 <SD_disk_ioctl+0x240>
                res = RES_OK;
 8001320:	2300      	movs	r3, #0
 8001322:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8001326:	e047      	b.n	80013b8 <SD_disk_ioctl+0x240>

        case MMC_GET_CSD:
            /* CSD 정보 수신 (16 bytes) */
            if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001328:	2100      	movs	r1, #0
 800132a:	2049      	movs	r0, #73	; 0x49
 800132c:	f7ff fce4 	bl	8000cf8 <SD_SendCmd>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d142      	bne.n	80013bc <SD_disk_ioctl+0x244>
 8001336:	2110      	movs	r1, #16
 8001338:	6a38      	ldr	r0, [r7, #32]
 800133a:	f7ff fc53 	bl	8000be4 <SD_RxDataBlock>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d03b      	beq.n	80013bc <SD_disk_ioctl+0x244>
                res = RES_OK;
 8001344:	2300      	movs	r3, #0
 8001346:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800134a:	e037      	b.n	80013bc <SD_disk_ioctl+0x244>

        case MMC_GET_CID:
            /* CID 정보 수신 (16 bytes) */
            if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800134c:	2100      	movs	r1, #0
 800134e:	204a      	movs	r0, #74	; 0x4a
 8001350:	f7ff fcd2 	bl	8000cf8 <SD_SendCmd>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d132      	bne.n	80013c0 <SD_disk_ioctl+0x248>
 800135a:	2110      	movs	r1, #16
 800135c:	6a38      	ldr	r0, [r7, #32]
 800135e:	f7ff fc41 	bl	8000be4 <SD_RxDataBlock>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d02b      	beq.n	80013c0 <SD_disk_ioctl+0x248>
                res = RES_OK;
 8001368:	2300      	movs	r3, #0
 800136a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800136e:	e027      	b.n	80013c0 <SD_disk_ioctl+0x248>

        case MMC_GET_OCR:
            /* OCR 정보 수신 (4 bytes) */
            if (SD_SendCmd(CMD58, 0) == 0)
 8001370:	2100      	movs	r1, #0
 8001372:	207a      	movs	r0, #122	; 0x7a
 8001374:	f7ff fcc0 	bl	8000cf8 <SD_SendCmd>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d116      	bne.n	80013ac <SD_disk_ioctl+0x234>
            {
                for (n = 0; n < 4; n++)
 800137e:	2300      	movs	r3, #0
 8001380:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001384:	e00b      	b.n	800139e <SD_disk_ioctl+0x226>
                {
                    *ptr++ = SPI_RxByte();
 8001386:	6a3c      	ldr	r4, [r7, #32]
 8001388:	1c63      	adds	r3, r4, #1
 800138a:	623b      	str	r3, [r7, #32]
 800138c:	f7ff fb7e 	bl	8000a8c <SPI_RxByte>
 8001390:	4603      	mov	r3, r0
 8001392:	7023      	strb	r3, [r4, #0]
                for (n = 0; n < 4; n++)
 8001394:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001398:	3301      	adds	r3, #1
 800139a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800139e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013a2:	2b03      	cmp	r3, #3
 80013a4:	d9ef      	bls.n	8001386 <SD_disk_ioctl+0x20e>
                }

                res = RES_OK;
 80013a6:	2300      	movs	r3, #0
 80013a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }

        default:
            res = RES_PARERR;
 80013ac:	2304      	movs	r3, #4
 80013ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80013b2:	e006      	b.n	80013c2 <SD_disk_ioctl+0x24a>
            break;
 80013b4:	bf00      	nop
 80013b6:	e004      	b.n	80013c2 <SD_disk_ioctl+0x24a>
            break;
 80013b8:	bf00      	nop
 80013ba:	e002      	b.n	80013c2 <SD_disk_ioctl+0x24a>
            break;
 80013bc:	bf00      	nop
 80013be:	e000      	b.n	80013c2 <SD_disk_ioctl+0x24a>
            break;
 80013c0:	bf00      	nop
        }

        DESELECT();
 80013c2:	f7ff fb3d 	bl	8000a40 <DESELECT>
        SPI_RxByte();
 80013c6:	f7ff fb61 	bl	8000a8c <SPI_RxByte>
    }

    return res;
 80013ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	372c      	adds	r7, #44	; 0x2c
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd90      	pop	{r4, r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000004 	.word	0x20000004

080013dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	; 0x28
 80013e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
 80013f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	4b2d      	ldr	r3, [pc, #180]	; (80014ac <MX_GPIO_Init+0xd0>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a2c      	ldr	r2, [pc, #176]	; (80014ac <MX_GPIO_Init+0xd0>)
 80013fc:	f043 0304 	orr.w	r3, r3, #4
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b2a      	ldr	r3, [pc, #168]	; (80014ac <MX_GPIO_Init+0xd0>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0304 	and.w	r3, r3, #4
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	4b26      	ldr	r3, [pc, #152]	; (80014ac <MX_GPIO_Init+0xd0>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a25      	ldr	r2, [pc, #148]	; (80014ac <MX_GPIO_Init+0xd0>)
 8001418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b23      	ldr	r3, [pc, #140]	; (80014ac <MX_GPIO_Init+0xd0>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <MX_GPIO_Init+0xd0>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a1e      	ldr	r2, [pc, #120]	; (80014ac <MX_GPIO_Init+0xd0>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b1c      	ldr	r3, [pc, #112]	; (80014ac <MX_GPIO_Init+0xd0>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	4b18      	ldr	r3, [pc, #96]	; (80014ac <MX_GPIO_Init+0xd0>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a17      	ldr	r2, [pc, #92]	; (80014ac <MX_GPIO_Init+0xd0>)
 8001450:	f043 0302 	orr.w	r3, r3, #2
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b15      	ldr	r3, [pc, #84]	; (80014ac <MX_GPIO_Init+0xd0>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8001462:	2200      	movs	r2, #0
 8001464:	2120      	movs	r1, #32
 8001466:	4812      	ldr	r0, [pc, #72]	; (80014b0 <MX_GPIO_Init+0xd4>)
 8001468:	f001 fe9c 	bl	80031a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800146c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001470:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001472:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001476:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	4619      	mov	r1, r3
 8001482:	480b      	ldr	r0, [pc, #44]	; (80014b0 <MX_GPIO_Init+0xd4>)
 8001484:	f001 fc26 	bl	8002cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8001488:	2320      	movs	r3, #32
 800148a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148c:	2301      	movs	r3, #1
 800148e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001494:	2300      	movs	r3, #0
 8001496:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	4619      	mov	r1, r3
 800149e:	4804      	ldr	r0, [pc, #16]	; (80014b0 <MX_GPIO_Init+0xd4>)
 80014a0:	f001 fc18 	bl	8002cd4 <HAL_GPIO_Init>

}
 80014a4:	bf00      	nop
 80014a6:	3728      	adds	r7, #40	; 0x28
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40020800 	.word	0x40020800

080014b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014b8:	f000 fd2e 	bl	8001f18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014bc:	f000 f8fe 	bl	80016bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014c0:	f7ff ff8c 	bl	80013dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014c4:	f000 fc6e 	bl	8001da4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80014c8:	f000 faae 	bl	8001a28 <MX_SPI1_Init>
  MX_FATFS_Init();
 80014cc:	f003 fc34 	bl	8004d38 <MX_FATFS_Init>
  MX_CRC_Init();
 80014d0:	f7ff fa5a 	bl	8000988 <MX_CRC_Init>

	/* Close file */
	f_close(&fil);
#endif

	printf("******** Welcome to bootloader. ********\r\n");
 80014d4:	4862      	ldr	r0, [pc, #392]	; (8001660 <main+0x1ac>)
 80014d6:	f006 fc71 	bl	8007dbc <puts>
	fresult = f_mount(&fs, "", 0);
 80014da:	2200      	movs	r2, #0
 80014dc:	4961      	ldr	r1, [pc, #388]	; (8001664 <main+0x1b0>)
 80014de:	4862      	ldr	r0, [pc, #392]	; (8001668 <main+0x1b4>)
 80014e0:	f005 fe78 	bl	80071d4 <f_mount>
 80014e4:	4603      	mov	r3, r0
 80014e6:	461a      	mov	r2, r3
 80014e8:	4b60      	ldr	r3, [pc, #384]	; (800166c <main+0x1b8>)
 80014ea:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) {
 80014ec:	4b5f      	ldr	r3, [pc, #380]	; (800166c <main+0x1b8>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d007      	beq.n	8001504 <main+0x50>
		printf("Error when mounting SD card.\r\n");
 80014f4:	485e      	ldr	r0, [pc, #376]	; (8001670 <main+0x1bc>)
 80014f6:	f006 fc61 	bl	8007dbc <puts>
		error = -1;
 80014fa:	4b5e      	ldr	r3, [pc, #376]	; (8001674 <main+0x1c0>)
 80014fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	e002      	b.n	800150a <main+0x56>
	} else {
		printf("SD card mounted successfully.\r\n");
 8001504:	485c      	ldr	r0, [pc, #368]	; (8001678 <main+0x1c4>)
 8001506:	f006 fc59 	bl	8007dbc <puts>
	}
	HAL_Delay(10);
 800150a:	200a      	movs	r0, #10
 800150c:	f000 fdaa 	bl	8002064 <HAL_Delay>

	fresult = f_open(&fil, "downloaded.bin",
 8001510:	2213      	movs	r2, #19
 8001512:	495a      	ldr	r1, [pc, #360]	; (800167c <main+0x1c8>)
 8001514:	485a      	ldr	r0, [pc, #360]	; (8001680 <main+0x1cc>)
 8001516:	f005 fea3 	bl	8007260 <f_open>
 800151a:	4603      	mov	r3, r0
 800151c:	461a      	mov	r2, r3
 800151e:	4b53      	ldr	r3, [pc, #332]	; (800166c <main+0x1b8>)
 8001520:	701a      	strb	r2, [r3, #0]
	FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
	if (fresult != FR_OK) {
 8001522:	4b52      	ldr	r3, [pc, #328]	; (800166c <main+0x1b8>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d006      	beq.n	8001538 <main+0x84>
		printf("Error when opening file.\r\n");
 800152a:	4856      	ldr	r0, [pc, #344]	; (8001684 <main+0x1d0>)
 800152c:	f006 fc46 	bl	8007dbc <puts>
		error = -2;
 8001530:	4b50      	ldr	r3, [pc, #320]	; (8001674 <main+0x1c0>)
 8001532:	f06f 0201 	mvn.w	r2, #1
 8001536:	601a      	str	r2, [r3, #0]
	}
	printf("f_open return: %d\r\n", fresult);
 8001538:	4b4c      	ldr	r3, [pc, #304]	; (800166c <main+0x1b8>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	4619      	mov	r1, r3
 800153e:	4852      	ldr	r0, [pc, #328]	; (8001688 <main+0x1d4>)
 8001540:	f006 fbb6 	bl	8007cb0 <iprintf>
	HAL_Delay(10);
 8001544:	200a      	movs	r0, #10
 8001546:	f000 fd8d 	bl	8002064 <HAL_Delay>

	printf("****************************************\r\n");
 800154a:	4850      	ldr	r0, [pc, #320]	; (800168c <main+0x1d8>)
 800154c:	f006 fc36 	bl	8007dbc <puts>
	printf("Entering Bootloader (flashing GREEN LED)...\r\n");
 8001550:	484f      	ldr	r0, [pc, #316]	; (8001690 <main+0x1dc>)
 8001552:	f006 fc33 	bl	8007dbc <puts>
	HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8001556:	2120      	movs	r1, #32
 8001558:	484e      	ldr	r0, [pc, #312]	; (8001694 <main+0x1e0>)
 800155a:	f001 fe3c 	bl	80031d6 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 800155e:	20fa      	movs	r0, #250	; 0xfa
 8001560:	f000 fd80 	bl	8002064 <HAL_Delay>
	HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8001564:	2120      	movs	r1, #32
 8001566:	484b      	ldr	r0, [pc, #300]	; (8001694 <main+0x1e0>)
 8001568:	f001 fe35 	bl	80031d6 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 800156c:	20fa      	movs	r0, #250	; 0xfa
 800156e:	f000 fd79 	bl	8002064 <HAL_Delay>
	HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8001572:	2120      	movs	r1, #32
 8001574:	4847      	ldr	r0, [pc, #284]	; (8001694 <main+0x1e0>)
 8001576:	f001 fe2e 	bl	80031d6 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 800157a:	20fa      	movs	r0, #250	; 0xfa
 800157c:	f000 fd72 	bl	8002064 <HAL_Delay>
	HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8001580:	2120      	movs	r1, #32
 8001582:	4844      	ldr	r0, [pc, #272]	; (8001694 <main+0x1e0>)
 8001584:	f001 fe27 	bl	80031d6 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 8001588:	20fa      	movs	r0, #250	; 0xfa
 800158a:	f000 fd6b 	bl	8002064 <HAL_Delay>
	HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 800158e:	2120      	movs	r1, #32
 8001590:	4840      	ldr	r0, [pc, #256]	; (8001694 <main+0x1e0>)
 8001592:	f001 fe20 	bl	80031d6 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 8001596:	20fa      	movs	r0, #250	; 0xfa
 8001598:	f000 fd64 	bl	8002064 <HAL_Delay>
	HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 800159c:	2120      	movs	r1, #32
 800159e:	483d      	ldr	r0, [pc, #244]	; (8001694 <main+0x1e0>)
 80015a0:	f001 fe19 	bl	80031d6 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 80015a4:	20fa      	movs	r0, #250	; 0xfa
 80015a6:	f000 fd5d 	bl	8002064 <HAL_Delay>
	HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 80015aa:	2120      	movs	r1, #32
 80015ac:	4839      	ldr	r0, [pc, #228]	; (8001694 <main+0x1e0>)
 80015ae:	f001 fe12 	bl	80031d6 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 80015b2:	20fa      	movs	r0, #250	; 0xfa
 80015b4:	f000 fd56 	bl	8002064 <HAL_Delay>
	HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 80015b8:	2120      	movs	r1, #32
 80015ba:	4836      	ldr	r0, [pc, #216]	; (8001694 <main+0x1e0>)
 80015bc:	f001 fe0b 	bl	80031d6 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 80015c0:	20fa      	movs	r0, #250	; 0xfa
 80015c2:	f000 fd4f 	bl	8002064 <HAL_Delay>
	Enter_Bootloader();
 80015c6:	f000 f903 	bl	80017d0 <Enter_Bootloader>

	// CHECK FOR APPLICATION
	if (Bootloader_CheckForApplication() == 0) {
 80015ca:	f7ff f9ad 	bl	8000928 <Bootloader_CheckForApplication>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d112      	bne.n	80015fa <main+0x146>
		printf("Application found in FLASH.\r\n");
 80015d4:	4830      	ldr	r0, [pc, #192]	; (8001698 <main+0x1e4>)
 80015d6:	f006 fbf1 	bl	8007dbc <puts>
		// VERIFY CHECKSUM:
		if (Bootloader_VerifyChecksum() != 0) {
 80015da:	f7ff f93d 	bl	8000858 <Bootloader_VerifyChecksum>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d007      	beq.n	80015f4 <main+0x140>
			printf("Checksum error.\r\n");
 80015e4:	482d      	ldr	r0, [pc, #180]	; (800169c <main+0x1e8>)
 80015e6:	f006 fbe9 	bl	8007dbc <puts>
			error = -3;
 80015ea:	4b22      	ldr	r3, [pc, #136]	; (8001674 <main+0x1c0>)
 80015ec:	f06f 0202 	mvn.w	r2, #2
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	e002      	b.n	80015fa <main+0x146>
		} else {
			printf("Checksum OK.\r\n");
 80015f4:	482a      	ldr	r0, [pc, #168]	; (80016a0 <main+0x1ec>)
 80015f6:	f006 fbe1 	bl	8007dbc <puts>
	//-- reset peripherals to guarantee flawless start of user application
	// HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
	// HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	// HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

	HAL_UART_DeInit(&huart2);
 80015fa:	482a      	ldr	r0, [pc, #168]	; (80016a4 <main+0x1f0>)
 80015fc:	f002 fff9 	bl	80045f2 <HAL_UART_DeInit>
	//	MX_FATFS_Init(); deinitje?
	HAL_CRC_DeInit(&hcrc);
 8001600:	4829      	ldr	r0, [pc, #164]	; (80016a8 <main+0x1f4>)
 8001602:	f000 fe54 	bl	80022ae <HAL_CRC_DeInit>

	__HAL_RCC_GPIOC_CLK_DISABLE();
 8001606:	4b29      	ldr	r3, [pc, #164]	; (80016ac <main+0x1f8>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a28      	ldr	r2, [pc, #160]	; (80016ac <main+0x1f8>)
 800160c:	f023 0304 	bic.w	r3, r3, #4
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
	__HAL_RCC_GPIOH_CLK_DISABLE();
 8001612:	4b26      	ldr	r3, [pc, #152]	; (80016ac <main+0x1f8>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	4a25      	ldr	r2, [pc, #148]	; (80016ac <main+0x1f8>)
 8001618:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800161c:	6313      	str	r3, [r2, #48]	; 0x30
	__HAL_RCC_GPIOA_CLK_DISABLE();
 800161e:	4b23      	ldr	r3, [pc, #140]	; (80016ac <main+0x1f8>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a22      	ldr	r2, [pc, #136]	; (80016ac <main+0x1f8>)
 8001624:	f023 0301 	bic.w	r3, r3, #1
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
	__HAL_RCC_GPIOB_CLK_DISABLE();
 800162a:	4b20      	ldr	r3, [pc, #128]	; (80016ac <main+0x1f8>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	4a1f      	ldr	r2, [pc, #124]	; (80016ac <main+0x1f8>)
 8001630:	f023 0302 	bic.w	r3, r3, #2
 8001634:	6313      	str	r3, [r2, #48]	; 0x30

	if (error == 0) {
 8001636:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <main+0x1c0>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d108      	bne.n	8001650 <main+0x19c>
		printf("Launching application in 3 seconds...\r\n");
 800163e:	481c      	ldr	r0, [pc, #112]	; (80016b0 <main+0x1fc>)
 8001640:	f006 fbbc 	bl	8007dbc <puts>
		HAL_Delay(3000);
 8001644:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001648:	f000 fd0c 	bl	8002064 <HAL_Delay>
		Bootloader_JumpToApplication();
 800164c:	f7ff f8d6 	bl	80007fc <Bootloader_JumpToApplication>
	}
	printf("\r\nWe should never get to here.\r\n");
 8001650:	4818      	ldr	r0, [pc, #96]	; (80016b4 <main+0x200>)
 8001652:	f006 fbb3 	bl	8007dbc <puts>
	printf("Some error must have happened.\r\n");
 8001656:	4818      	ldr	r0, [pc, #96]	; (80016b8 <main+0x204>)
 8001658:	f006 fbb0 	bl	8007dbc <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800165c:	e7fe      	b.n	800165c <main+0x1a8>
 800165e:	bf00      	nop
 8001660:	08008d28 	.word	0x08008d28
 8001664:	08008d54 	.word	0x08008d54
 8001668:	200000b4 	.word	0x200000b4
 800166c:	2000211c 	.word	0x2000211c
 8001670:	08008d58 	.word	0x08008d58
 8001674:	2000418c 	.word	0x2000418c
 8001678:	08008d78 	.word	0x08008d78
 800167c:	08008d98 	.word	0x08008d98
 8001680:	200010ec 	.word	0x200010ec
 8001684:	08008da8 	.word	0x08008da8
 8001688:	08008dc4 	.word	0x08008dc4
 800168c:	08008dd8 	.word	0x08008dd8
 8001690:	08008e04 	.word	0x08008e04
 8001694:	40020800 	.word	0x40020800
 8001698:	08008e34 	.word	0x08008e34
 800169c:	08008e54 	.word	0x08008e54
 80016a0:	08008e68 	.word	0x08008e68
 80016a4:	200041f0 	.word	0x200041f0
 80016a8:	200000a8 	.word	0x200000a8
 80016ac:	40023800 	.word	0x40023800
 80016b0:	08008e78 	.word	0x08008e78
 80016b4:	08008ea0 	.word	0x08008ea0
 80016b8:	08008ec0 	.word	0x08008ec0

080016bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b094      	sub	sp, #80	; 0x50
 80016c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016c2:	f107 0320 	add.w	r3, r7, #32
 80016c6:	2230      	movs	r2, #48	; 0x30
 80016c8:	2100      	movs	r1, #0
 80016ca:	4618      	mov	r0, r3
 80016cc:	f006 fae8 	bl	8007ca0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016d0:	f107 030c 	add.w	r3, r7, #12
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e0:	2300      	movs	r3, #0
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	4b29      	ldr	r3, [pc, #164]	; (800178c <SystemClock_Config+0xd0>)
 80016e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e8:	4a28      	ldr	r2, [pc, #160]	; (800178c <SystemClock_Config+0xd0>)
 80016ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ee:	6413      	str	r3, [r2, #64]	; 0x40
 80016f0:	4b26      	ldr	r3, [pc, #152]	; (800178c <SystemClock_Config+0xd0>)
 80016f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80016fc:	2300      	movs	r3, #0
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	4b23      	ldr	r3, [pc, #140]	; (8001790 <SystemClock_Config+0xd4>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001708:	4a21      	ldr	r2, [pc, #132]	; (8001790 <SystemClock_Config+0xd4>)
 800170a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800170e:	6013      	str	r3, [r2, #0]
 8001710:	4b1f      	ldr	r3, [pc, #124]	; (8001790 <SystemClock_Config+0xd4>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001718:	607b      	str	r3, [r7, #4]
 800171a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800171c:	2302      	movs	r3, #2
 800171e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001720:	2301      	movs	r3, #1
 8001722:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001724:	2310      	movs	r3, #16
 8001726:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001728:	2302      	movs	r3, #2
 800172a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800172c:	2300      	movs	r3, #0
 800172e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001730:	2310      	movs	r3, #16
 8001732:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001734:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001738:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800173a:	2304      	movs	r3, #4
 800173c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800173e:	2307      	movs	r3, #7
 8001740:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001742:	f107 0320 	add.w	r3, r7, #32
 8001746:	4618      	mov	r0, r3
 8001748:	f001 fd60 	bl	800320c <HAL_RCC_OscConfig>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001752:	f000 f963 	bl	8001a1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001756:	230f      	movs	r3, #15
 8001758:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800175a:	2302      	movs	r3, #2
 800175c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001766:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001768:	2300      	movs	r3, #0
 800176a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800176c:	f107 030c 	add.w	r3, r7, #12
 8001770:	2102      	movs	r1, #2
 8001772:	4618      	mov	r0, r3
 8001774:	f001 ffc2 	bl	80036fc <HAL_RCC_ClockConfig>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800177e:	f000 f94d 	bl	8001a1c <Error_Handler>
  }
}
 8001782:	bf00      	nop
 8001784:	3750      	adds	r7, #80	; 0x50
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40023800 	.word	0x40023800
 8001790:	40007000 	.word	0x40007000

08001794 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 800179c:	1d39      	adds	r1, r7, #4
 800179e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017a2:	2201      	movs	r2, #1
 80017a4:	4803      	ldr	r0, [pc, #12]	; (80017b4 <__io_putchar+0x20>)
 80017a6:	f002 ff53 	bl	8004650 <HAL_UART_Transmit>
	return ch;
 80017aa:	687b      	ldr	r3, [r7, #4]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	200041f0 	.word	0x200041f0

080017b8 <SD_Eject>:


/* USER CODE BEGIN 4 */
void SD_Eject(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
    f_mount(NULL, (TCHAR const *)SDPath, 0);
 80017bc:	2200      	movs	r2, #0
 80017be:	4903      	ldr	r1, [pc, #12]	; (80017cc <SD_Eject+0x14>)
 80017c0:	2000      	movs	r0, #0
 80017c2:	f005 fd07 	bl	80071d4 <f_mount>
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20002120 	.word	0x20002120

080017d0 <Enter_Bootloader>:
    // SDCARD_OFF();
}

/*** Bootloader ***************************************************************/
void Enter_Bootloader(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b090      	sub	sp, #64	; 0x40
 80017d4:	af00      	add	r7, sp, #0
    UINT num;
    uint8_t status;
    uint64_t data;
    uint32_t cntr;
    uint32_t addr;
    char msg[40] = {0x00};
 80017d6:	2300      	movs	r3, #0
 80017d8:	603b      	str	r3, [r7, #0]
 80017da:	1d3b      	adds	r3, r7, #4
 80017dc:	2224      	movs	r2, #36	; 0x24
 80017de:	2100      	movs	r1, #0
 80017e0:	4618      	mov	r0, r3
 80017e2:	f006 fa5d 	bl	8007ca0 <memset>

    /* Check for flash write protection */
    if (FLASH_If_GetWriteProtectionStatus() & FLASHIF_PROTECTION_WRPENABLED)
 80017e6:	f7fe ff52 	bl	800068e <FLASH_If_GetWriteProtectionStatus>
 80017ea:	4603      	mov	r3, r0
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d005      	beq.n	8001800 <Enter_Bootloader+0x30>
    {
        printf("Application space in flash is write protected. Disabling write protection and generating system reset...\r\n");
 80017f4:	4877      	ldr	r0, [pc, #476]	; (80019d4 <Enter_Bootloader+0x204>)
 80017f6:	f006 fae1 	bl	8007dbc <puts>
        FLASH_If_WriteProtectionConfig(FLASHIF_WRP_DISABLE);
 80017fa:	2001      	movs	r0, #1
 80017fc:	f7fe ff63 	bl	80006c6 <FLASH_If_WriteProtectionConfig>
    }

    // Mount SD card
    fr = f_mount(&SDFatFs, (TCHAR const *)SDPath, 1);
 8001800:	2201      	movs	r2, #1
 8001802:	4975      	ldr	r1, [pc, #468]	; (80019d8 <Enter_Bootloader+0x208>)
 8001804:	4875      	ldr	r0, [pc, #468]	; (80019dc <Enter_Bootloader+0x20c>)
 8001806:	f005 fce5 	bl	80071d4 <f_mount>
 800180a:	4603      	mov	r3, r0
 800180c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (fr != FR_OK)
 8001810:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001814:	2b00      	cmp	r3, #0
 8001816:	d006      	beq.n	8001826 <Enter_Bootloader+0x56>
    {
        // f_mount failed
        printf("SD card cannot be mounted. FatFs error code: %u\r\n", fr);
 8001818:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800181c:	4619      	mov	r1, r3
 800181e:	4870      	ldr	r0, [pc, #448]	; (80019e0 <Enter_Bootloader+0x210>)
 8001820:	f006 fa46 	bl	8007cb0 <iprintf>
        return;
 8001824:	e0d2      	b.n	80019cc <Enter_Bootloader+0x1fc>
    }
    printf("SD mounted.\r\n");
 8001826:	486f      	ldr	r0, [pc, #444]	; (80019e4 <Enter_Bootloader+0x214>)
 8001828:	f006 fac8 	bl	8007dbc <puts>

    // Open file for programming
    fr = f_open(&SDFile, "application.bin", FA_READ);
 800182c:	2201      	movs	r2, #1
 800182e:	496e      	ldr	r1, [pc, #440]	; (80019e8 <Enter_Bootloader+0x218>)
 8001830:	486e      	ldr	r0, [pc, #440]	; (80019ec <Enter_Bootloader+0x21c>)
 8001832:	f005 fd15 	bl	8007260 <f_open>
 8001836:	4603      	mov	r3, r0
 8001838:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (fr != FR_OK)
 800183c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001840:	2b00      	cmp	r3, #0
 8001842:	d00b      	beq.n	800185c <Enter_Bootloader+0x8c>
    {
        // f_open failed
        printf("File cannot be opened. FatFs error code: %u\r\n", fr);
 8001844:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001848:	4619      	mov	r1, r3
 800184a:	4869      	ldr	r0, [pc, #420]	; (80019f0 <Enter_Bootloader+0x220>)
 800184c:	f006 fa30 	bl	8007cb0 <iprintf>
        SD_Eject();
 8001850:	f7ff ffb2 	bl	80017b8 <SD_Eject>
        printf("SD ejected.\r\n");
 8001854:	4867      	ldr	r0, [pc, #412]	; (80019f4 <Enter_Bootloader+0x224>)
 8001856:	f006 fab1 	bl	8007dbc <puts>
        return;
 800185a:	e0b7      	b.n	80019cc <Enter_Bootloader+0x1fc>
    }
    printf("Software found on SD.\r\n");
 800185c:	4866      	ldr	r0, [pc, #408]	; (80019f8 <Enter_Bootloader+0x228>)
 800185e:	f006 faad 	bl	8007dbc <puts>
    }
    printf("App size OK.\r\n");
    */

    // Step 1: Init Bootloader and Flash
    FLASH_If_Init();
 8001862:	f7fe fe8f 	bl	8000584 <FLASH_If_Init>

    // Step 2: Erase Flash
    printf("Erasing flash...\r\n");
 8001866:	4865      	ldr	r0, [pc, #404]	; (80019fc <Enter_Bootloader+0x22c>)
 8001868:	f006 faa8 	bl	8007dbc <puts>
    FLASH_If_Erase(USER_START_ADDRESS);
 800186c:	4864      	ldr	r0, [pc, #400]	; (8001a00 <Enter_Bootloader+0x230>)
 800186e:	f7fe fe97 	bl	80005a0 <FLASH_If_Erase>
    printf("Flash erase finished.\r\n");
 8001872:	4864      	ldr	r0, [pc, #400]	; (8001a04 <Enter_Bootloader+0x234>)
 8001874:	f006 faa2 	bl	8007dbc <puts>

    // Step 3: Programming
    printf("Starting programming...\r\n");
 8001878:	4863      	ldr	r0, [pc, #396]	; (8001a08 <Enter_Bootloader+0x238>)
 800187a:	f006 fa9f 	bl	8007dbc <puts>
    cntr = 0;
 800187e:	2300      	movs	r3, #0
 8001880:	63fb      	str	r3, [r7, #60]	; 0x3c

    FLASH_If_FlashBegin();
 8001882:	f7fe fec5 	bl	8000610 <FLASH_If_FlashBegin>
    do
    {
        data = 0xFFFFFFFFFFFFFFFF;
 8001886:	f04f 32ff 	mov.w	r2, #4294967295
 800188a:	f04f 33ff 	mov.w	r3, #4294967295
 800188e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        fr = f_read(&SDFile, &data, 4, &num);
 8001892:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001896:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800189a:	2204      	movs	r2, #4
 800189c:	4853      	ldr	r0, [pc, #332]	; (80019ec <Enter_Bootloader+0x21c>)
 800189e:	f005 feab 	bl	80075f8 <f_read>
 80018a2:	4603      	mov	r3, r0
 80018a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if (num)
 80018a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d020      	beq.n	80018f0 <Enter_Bootloader+0x120>
        {
            status = FLASH_If_Write(data);
 80018ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80018b2:	4613      	mov	r3, r2
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7fe feb9 	bl	800062c <FLASH_If_Write>
 80018ba:	4603      	mov	r3, r0
 80018bc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
            if (status == FLASHIF_OK)
 80018c0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d103      	bne.n	80018d0 <Enter_Bootloader+0x100>
            {
                cntr++;
 80018c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018ca:	3301      	adds	r3, #1
 80018cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018ce:	e00f      	b.n	80018f0 <Enter_Bootloader+0x120>
            }
            else
            {
                printf(msg, "Programming error at: %lu byte\r\n", (cntr * 8));
 80018d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018d2:	00da      	lsls	r2, r3, #3
 80018d4:	463b      	mov	r3, r7
 80018d6:	494d      	ldr	r1, [pc, #308]	; (8001a0c <Enter_Bootloader+0x23c>)
 80018d8:	4618      	mov	r0, r3
 80018da:	f006 f9e9 	bl	8007cb0 <iprintf>
                f_close(&SDFile);
 80018de:	4843      	ldr	r0, [pc, #268]	; (80019ec <Enter_Bootloader+0x21c>)
 80018e0:	f006 f867 	bl	80079b2 <f_close>
                SD_Eject();
 80018e4:	f7ff ff68 	bl	80017b8 <SD_Eject>
                printf("SD ejected.\r\n");
 80018e8:	4842      	ldr	r0, [pc, #264]	; (80019f4 <Enter_Bootloader+0x224>)
 80018ea:	f006 fa67 	bl	8007dbc <puts>
                return;
 80018ee:	e06d      	b.n	80019cc <Enter_Bootloader+0x1fc>
            }
        }
    } while ((fr == FR_OK) && (num > 0));
 80018f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d102      	bne.n	80018fe <Enter_Bootloader+0x12e>
 80018f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1c3      	bne.n	8001886 <Enter_Bootloader+0xb6>

    // Step 4: Finalize Programming
    FLASH_If_FlashEnd();
 80018fe:	f7fe febf 	bl	8000680 <FLASH_If_FlashEnd>

    f_close(&SDFile);
 8001902:	483a      	ldr	r0, [pc, #232]	; (80019ec <Enter_Bootloader+0x21c>)
 8001904:	f006 f855 	bl	80079b2 <f_close>
    printf("Programming finished. Flashed: %lu bytes.\r\n", (cntr * 4));
 8001908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4619      	mov	r1, r3
 800190e:	4840      	ldr	r0, [pc, #256]	; (8001a10 <Enter_Bootloader+0x240>)
 8001910:	f006 f9ce 	bl	8007cb0 <iprintf>

    // Open file for verification
    fr = f_open(&SDFile, "application.bin", FA_READ);
 8001914:	2201      	movs	r2, #1
 8001916:	4934      	ldr	r1, [pc, #208]	; (80019e8 <Enter_Bootloader+0x218>)
 8001918:	4834      	ldr	r0, [pc, #208]	; (80019ec <Enter_Bootloader+0x21c>)
 800191a:	f005 fca1 	bl	8007260 <f_open>
 800191e:	4603      	mov	r3, r0
 8001920:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (fr != FR_OK)
 8001924:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001928:	2b00      	cmp	r3, #0
 800192a:	d00b      	beq.n	8001944 <Enter_Bootloader+0x174>
    {
        // f_open failed
        printf("File cannot be opened. FatFs error code: %u\r\n", fr);
 800192c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001930:	4619      	mov	r1, r3
 8001932:	482f      	ldr	r0, [pc, #188]	; (80019f0 <Enter_Bootloader+0x220>)
 8001934:	f006 f9bc 	bl	8007cb0 <iprintf>

        SD_Eject();
 8001938:	f7ff ff3e 	bl	80017b8 <SD_Eject>
        printf("SD ejected.\r\n");
 800193c:	482d      	ldr	r0, [pc, #180]	; (80019f4 <Enter_Bootloader+0x224>)
 800193e:	f006 fa3d 	bl	8007dbc <puts>
        return;
 8001942:	e043      	b.n	80019cc <Enter_Bootloader+0x1fc>
    }

    // Step 5: Verify Flash Content
    addr = USER_START_ADDRESS;
 8001944:	4b2e      	ldr	r3, [pc, #184]	; (8001a00 <Enter_Bootloader+0x230>)
 8001946:	63bb      	str	r3, [r7, #56]	; 0x38
    cntr = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	63fb      	str	r3, [r7, #60]	; 0x3c
    do
    {
        data = 0xFFFFFFFFFFFFFFFF;
 800194c:	f04f 32ff 	mov.w	r2, #4294967295
 8001950:	f04f 33ff 	mov.w	r3, #4294967295
 8001954:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        fr = f_read(&SDFile, &data, 4, &num);
 8001958:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800195c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001960:	2204      	movs	r2, #4
 8001962:	4822      	ldr	r0, [pc, #136]	; (80019ec <Enter_Bootloader+0x21c>)
 8001964:	f005 fe48 	bl	80075f8 <f_read>
 8001968:	4603      	mov	r3, r0
 800196a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if (num)
 800196e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001970:	2b00      	cmp	r3, #0
 8001972:	d01c      	beq.n	80019ae <Enter_Bootloader+0x1de>
        {
            if (*(uint32_t *)addr == (uint32_t)data)
 8001974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001976:	6819      	ldr	r1, [r3, #0]
 8001978:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800197c:	4613      	mov	r3, r2
 800197e:	4299      	cmp	r1, r3
 8001980:	d106      	bne.n	8001990 <Enter_Bootloader+0x1c0>
            {
                addr += 4;
 8001982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001984:	3304      	adds	r3, #4
 8001986:	63bb      	str	r3, [r7, #56]	; 0x38
                cntr++;
 8001988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800198a:	3301      	adds	r3, #1
 800198c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800198e:	e00e      	b.n	80019ae <Enter_Bootloader+0x1de>
            }
            else
            {
                printf("Verification error at: %lu byte.\r\n", (cntr * 4));
 8001990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4619      	mov	r1, r3
 8001996:	481f      	ldr	r0, [pc, #124]	; (8001a14 <Enter_Bootloader+0x244>)
 8001998:	f006 f98a 	bl	8007cb0 <iprintf>
                f_close(&SDFile);
 800199c:	4813      	ldr	r0, [pc, #76]	; (80019ec <Enter_Bootloader+0x21c>)
 800199e:	f006 f808 	bl	80079b2 <f_close>
                SD_Eject();
 80019a2:	f7ff ff09 	bl	80017b8 <SD_Eject>
                printf("SD ejected.\r\n");
 80019a6:	4813      	ldr	r0, [pc, #76]	; (80019f4 <Enter_Bootloader+0x224>)
 80019a8:	f006 fa08 	bl	8007dbc <puts>
                return;
 80019ac:	e00e      	b.n	80019cc <Enter_Bootloader+0x1fc>
            }
        }
    } while ((fr == FR_OK) && (num > 0));
 80019ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d102      	bne.n	80019bc <Enter_Bootloader+0x1ec>
 80019b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1c7      	bne.n	800194c <Enter_Bootloader+0x17c>
    printf("Verification passed.\r\n");
 80019bc:	4816      	ldr	r0, [pc, #88]	; (8001a18 <Enter_Bootloader+0x248>)
 80019be:	f006 f9fd 	bl	8007dbc <puts>

    // Eject SD card
    SD_Eject();
 80019c2:	f7ff fef9 	bl	80017b8 <SD_Eject>
    printf("SD ejected.\r\n");
 80019c6:	480b      	ldr	r0, [pc, #44]	; (80019f4 <Enter_Bootloader+0x224>)
 80019c8:	f006 f9f8 	bl	8007dbc <puts>
    if (FLASH_If_WriteProtectionConfig(FLASHIF_WRP_ENABLE) != FLASHIF_OK)
    {
        printf("Failed to enable write protection. Exiting Bootloader.\r\n");
    }
    */
}
 80019cc:	3740      	adds	r7, #64	; 0x40
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	08008ee0 	.word	0x08008ee0
 80019d8:	20002120 	.word	0x20002120
 80019dc:	20002124 	.word	0x20002124
 80019e0:	08008f4c 	.word	0x08008f4c
 80019e4:	08008f80 	.word	0x08008f80
 80019e8:	08008f90 	.word	0x08008f90
 80019ec:	2000315c 	.word	0x2000315c
 80019f0:	08008fa0 	.word	0x08008fa0
 80019f4:	08008fd0 	.word	0x08008fd0
 80019f8:	08008fe0 	.word	0x08008fe0
 80019fc:	08008ff8 	.word	0x08008ff8
 8001a00:	08040000 	.word	0x08040000
 8001a04:	0800900c 	.word	0x0800900c
 8001a08:	08009024 	.word	0x08009024
 8001a0c:	08009040 	.word	0x08009040
 8001a10:	08009064 	.word	0x08009064
 8001a14:	08009090 	.word	0x08009090
 8001a18:	080090b4 	.word	0x080090b4

08001a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a20:	b672      	cpsid	i
}
 8001a22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001a24:	e7fe      	b.n	8001a24 <Error_Handler+0x8>
	...

08001a28 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001a2c:	4b17      	ldr	r3, [pc, #92]	; (8001a8c <MX_SPI1_Init+0x64>)
 8001a2e:	4a18      	ldr	r2, [pc, #96]	; (8001a90 <MX_SPI1_Init+0x68>)
 8001a30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a32:	4b16      	ldr	r3, [pc, #88]	; (8001a8c <MX_SPI1_Init+0x64>)
 8001a34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a3a:	4b14      	ldr	r3, [pc, #80]	; (8001a8c <MX_SPI1_Init+0x64>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a40:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <MX_SPI1_Init+0x64>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a46:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <MX_SPI1_Init+0x64>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <MX_SPI1_Init+0x64>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001a52:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <MX_SPI1_Init+0x64>)
 8001a54:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001a58:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001a5a:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <MX_SPI1_Init+0x64>)
 8001a5c:	2218      	movs	r2, #24
 8001a5e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a60:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <MX_SPI1_Init+0x64>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a66:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <MX_SPI1_Init+0x64>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a6c:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <MX_SPI1_Init+0x64>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <MX_SPI1_Init+0x64>)
 8001a74:	220a      	movs	r2, #10
 8001a76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a78:	4804      	ldr	r0, [pc, #16]	; (8001a8c <MX_SPI1_Init+0x64>)
 8001a7a:	f002 f92d 	bl	8003cd8 <HAL_SPI_Init>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001a84:	f7ff ffca 	bl	8001a1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a88:	bf00      	nop
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20004190 	.word	0x20004190
 8001a90:	40013000 	.word	0x40013000

08001a94 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08a      	sub	sp, #40	; 0x28
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9c:	f107 0314 	add.w	r3, r7, #20
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	60da      	str	r2, [r3, #12]
 8001aaa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a19      	ldr	r2, [pc, #100]	; (8001b18 <HAL_SPI_MspInit+0x84>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d12b      	bne.n	8001b0e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	613b      	str	r3, [r7, #16]
 8001aba:	4b18      	ldr	r3, [pc, #96]	; (8001b1c <HAL_SPI_MspInit+0x88>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	4a17      	ldr	r2, [pc, #92]	; (8001b1c <HAL_SPI_MspInit+0x88>)
 8001ac0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ac6:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <HAL_SPI_MspInit+0x88>)
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ace:	613b      	str	r3, [r7, #16]
 8001ad0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <HAL_SPI_MspInit+0x88>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a10      	ldr	r2, [pc, #64]	; (8001b1c <HAL_SPI_MspInit+0x88>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <HAL_SPI_MspInit+0x88>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001aee:	23f0      	movs	r3, #240	; 0xf0
 8001af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af2:	2302      	movs	r3, #2
 8001af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afa:	2303      	movs	r3, #3
 8001afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001afe:	2305      	movs	r3, #5
 8001b00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b02:	f107 0314 	add.w	r3, r7, #20
 8001b06:	4619      	mov	r1, r3
 8001b08:	4805      	ldr	r0, [pc, #20]	; (8001b20 <HAL_SPI_MspInit+0x8c>)
 8001b0a:	f001 f8e3 	bl	8002cd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001b0e:	bf00      	nop
 8001b10:	3728      	adds	r7, #40	; 0x28
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40013000 	.word	0x40013000
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40020000 	.word	0x40020000

08001b24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	607b      	str	r3, [r7, #4]
 8001b2e:	4b10      	ldr	r3, [pc, #64]	; (8001b70 <HAL_MspInit+0x4c>)
 8001b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b32:	4a0f      	ldr	r2, [pc, #60]	; (8001b70 <HAL_MspInit+0x4c>)
 8001b34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b38:	6453      	str	r3, [r2, #68]	; 0x44
 8001b3a:	4b0d      	ldr	r3, [pc, #52]	; (8001b70 <HAL_MspInit+0x4c>)
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b42:	607b      	str	r3, [r7, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	603b      	str	r3, [r7, #0]
 8001b4a:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <HAL_MspInit+0x4c>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	4a08      	ldr	r2, [pc, #32]	; (8001b70 <HAL_MspInit+0x4c>)
 8001b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b54:	6413      	str	r3, [r2, #64]	; 0x40
 8001b56:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <HAL_MspInit+0x4c>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5e:	603b      	str	r3, [r7, #0]
 8001b60:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b62:	2007      	movs	r0, #7
 8001b64:	f000 fb54 	bl	8002210 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b68:	bf00      	nop
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40023800 	.word	0x40023800

08001b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001b78:	e7fe      	b.n	8001b78 <NMI_Handler+0x4>

08001b7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b7e:	e7fe      	b.n	8001b7e <HardFault_Handler+0x4>

08001b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <MemManage_Handler+0x4>

08001b86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b8a:	e7fe      	b.n	8001b8a <BusFault_Handler+0x4>

08001b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b90:	e7fe      	b.n	8001b90 <UsageFault_Handler+0x4>

08001b92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	FatFsCnt++;
 8001bc0:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <SysTick_Handler+0x30>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	4b08      	ldr	r3, [pc, #32]	; (8001bec <SysTick_Handler+0x30>)
 8001bcc:	701a      	strb	r2, [r3, #0]
	if (FatFsCnt >= 10) {
 8001bce:	4b07      	ldr	r3, [pc, #28]	; (8001bec <SysTick_Handler+0x30>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b09      	cmp	r3, #9
 8001bd6:	d904      	bls.n	8001be2 <SysTick_Handler+0x26>
		FatFsCnt = 0;
 8001bd8:	4b04      	ldr	r3, [pc, #16]	; (8001bec <SysTick_Handler+0x30>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8001bde:	f000 f807 	bl	8001bf0 <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001be2:	f000 fa1f 	bl	8002024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	200041e8 	.word	0x200041e8

08001bf0 <SDTimer_Handler>:
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */

void SDTimer_Handler(void) {
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
	if (Timer1 > 0)
 8001bf4:	4b0e      	ldr	r3, [pc, #56]	; (8001c30 <SDTimer_Handler+0x40>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d006      	beq.n	8001c0c <SDTimer_Handler+0x1c>
		Timer1--;
 8001bfe:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <SDTimer_Handler+0x40>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	3b01      	subs	r3, #1
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <SDTimer_Handler+0x40>)
 8001c0a:	701a      	strb	r2, [r3, #0]

	if (Timer2 > 0)
 8001c0c:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <SDTimer_Handler+0x44>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d006      	beq.n	8001c24 <SDTimer_Handler+0x34>
		Timer2--;
 8001c16:	4b07      	ldr	r3, [pc, #28]	; (8001c34 <SDTimer_Handler+0x44>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	4b04      	ldr	r3, [pc, #16]	; (8001c34 <SDTimer_Handler+0x44>)
 8001c22:	701a      	strb	r2, [r3, #0]
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	200041e9 	.word	0x200041e9
 8001c34:	200041ea 	.word	0x200041ea

08001c38 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]
 8001c48:	e00a      	b.n	8001c60 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c4a:	f3af 8000 	nop.w
 8001c4e:	4601      	mov	r1, r0
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	1c5a      	adds	r2, r3, #1
 8001c54:	60ba      	str	r2, [r7, #8]
 8001c56:	b2ca      	uxtb	r2, r1
 8001c58:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	dbf0      	blt.n	8001c4a <_read+0x12>
	}

return len;
 8001c68:	687b      	ldr	r3, [r7, #4]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b086      	sub	sp, #24
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	60f8      	str	r0, [r7, #12]
 8001c7a:	60b9      	str	r1, [r7, #8]
 8001c7c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
 8001c82:	e009      	b.n	8001c98 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	1c5a      	adds	r2, r3, #1
 8001c88:	60ba      	str	r2, [r7, #8]
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff fd81 	bl	8001794 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	3301      	adds	r3, #1
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	dbf1      	blt.n	8001c84 <_write+0x12>
	}
	return len;
 8001ca0:	687b      	ldr	r3, [r7, #4]
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <_close>:

int _close(int file)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
	return -1;
 8001cb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
 8001cca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cd2:	605a      	str	r2, [r3, #4]
	return 0;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <_isatty>:

int _isatty(int file)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
	return 1;
 8001cea:	2301      	movs	r3, #1
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
	return 0;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
	...

08001d14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d1c:	4a14      	ldr	r2, [pc, #80]	; (8001d70 <_sbrk+0x5c>)
 8001d1e:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <_sbrk+0x60>)
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d28:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <_sbrk+0x64>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d102      	bne.n	8001d36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d30:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <_sbrk+0x64>)
 8001d32:	4a12      	ldr	r2, [pc, #72]	; (8001d7c <_sbrk+0x68>)
 8001d34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d36:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <_sbrk+0x64>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d207      	bcs.n	8001d54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d44:	f005 ff82 	bl	8007c4c <__errno>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	220c      	movs	r2, #12
 8001d4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d52:	e009      	b.n	8001d68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d54:	4b08      	ldr	r3, [pc, #32]	; (8001d78 <_sbrk+0x64>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d5a:	4b07      	ldr	r3, [pc, #28]	; (8001d78 <_sbrk+0x64>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4413      	add	r3, r2
 8001d62:	4a05      	ldr	r2, [pc, #20]	; (8001d78 <_sbrk+0x64>)
 8001d64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d66:	68fb      	ldr	r3, [r7, #12]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20018000 	.word	0x20018000
 8001d74:	00000400 	.word	0x00000400
 8001d78:	200041ec 	.word	0x200041ec
 8001d7c:	200044a8 	.word	0x200044a8

08001d80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d84:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <SystemInit+0x20>)
 8001d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d8a:	4a05      	ldr	r2, [pc, #20]	; (8001da0 <SystemInit+0x20>)
 8001d8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001da8:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <MX_USART2_UART_Init+0x4c>)
 8001daa:	4a12      	ldr	r2, [pc, #72]	; (8001df4 <MX_USART2_UART_Init+0x50>)
 8001dac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dae:	4b10      	ldr	r3, [pc, #64]	; (8001df0 <MX_USART2_UART_Init+0x4c>)
 8001db0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001db4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001db6:	4b0e      	ldr	r3, [pc, #56]	; (8001df0 <MX_USART2_UART_Init+0x4c>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <MX_USART2_UART_Init+0x4c>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dc2:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <MX_USART2_UART_Init+0x4c>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001dc8:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <MX_USART2_UART_Init+0x4c>)
 8001dca:	220c      	movs	r2, #12
 8001dcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dce:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <MX_USART2_UART_Init+0x4c>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dd4:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <MX_USART2_UART_Init+0x4c>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dda:	4805      	ldr	r0, [pc, #20]	; (8001df0 <MX_USART2_UART_Init+0x4c>)
 8001ddc:	f002 fbbc 	bl	8004558 <HAL_UART_Init>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001de6:	f7ff fe19 	bl	8001a1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	200041f0 	.word	0x200041f0
 8001df4:	40004400 	.word	0x40004400

08001df8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08a      	sub	sp, #40	; 0x28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e00:	f107 0314 	add.w	r3, r7, #20
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a19      	ldr	r2, [pc, #100]	; (8001e7c <HAL_UART_MspInit+0x84>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d12b      	bne.n	8001e72 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	613b      	str	r3, [r7, #16]
 8001e1e:	4b18      	ldr	r3, [pc, #96]	; (8001e80 <HAL_UART_MspInit+0x88>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	4a17      	ldr	r2, [pc, #92]	; (8001e80 <HAL_UART_MspInit+0x88>)
 8001e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e28:	6413      	str	r3, [r2, #64]	; 0x40
 8001e2a:	4b15      	ldr	r3, [pc, #84]	; (8001e80 <HAL_UART_MspInit+0x88>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e32:	613b      	str	r3, [r7, #16]
 8001e34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <HAL_UART_MspInit+0x88>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	4a10      	ldr	r2, [pc, #64]	; (8001e80 <HAL_UART_MspInit+0x88>)
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	6313      	str	r3, [r2, #48]	; 0x30
 8001e46:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <HAL_UART_MspInit+0x88>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e52:	230c      	movs	r3, #12
 8001e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e56:	2302      	movs	r3, #2
 8001e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e62:	2307      	movs	r3, #7
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e66:	f107 0314 	add.w	r3, r7, #20
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4805      	ldr	r0, [pc, #20]	; (8001e84 <HAL_UART_MspInit+0x8c>)
 8001e6e:	f000 ff31 	bl	8002cd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e72:	bf00      	nop
 8001e74:	3728      	adds	r7, #40	; 0x28
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40004400 	.word	0x40004400
 8001e80:	40023800 	.word	0x40023800
 8001e84:	40020000 	.word	0x40020000

08001e88 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART2)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a08      	ldr	r2, [pc, #32]	; (8001eb8 <HAL_UART_MspDeInit+0x30>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d109      	bne.n	8001eae <HAL_UART_MspDeInit+0x26>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8001e9a:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <HAL_UART_MspDeInit+0x34>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	4a07      	ldr	r2, [pc, #28]	; (8001ebc <HAL_UART_MspDeInit+0x34>)
 8001ea0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001ea4:	6413      	str	r3, [r2, #64]	; 0x40

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, USART_TX_Pin|USART_RX_Pin);
 8001ea6:	210c      	movs	r1, #12
 8001ea8:	4805      	ldr	r0, [pc, #20]	; (8001ec0 <HAL_UART_MspDeInit+0x38>)
 8001eaa:	f001 f897 	bl	8002fdc <HAL_GPIO_DeInit>

  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40004400 	.word	0x40004400
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40020000 	.word	0x40020000

08001ec4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ec4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001efc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ec8:	480d      	ldr	r0, [pc, #52]	; (8001f00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001eca:	490e      	ldr	r1, [pc, #56]	; (8001f04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ecc:	4a0e      	ldr	r2, [pc, #56]	; (8001f08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed0:	e002      	b.n	8001ed8 <LoopCopyDataInit>

08001ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ed6:	3304      	adds	r3, #4

08001ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001edc:	d3f9      	bcc.n	8001ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ede:	4a0b      	ldr	r2, [pc, #44]	; (8001f0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ee0:	4c0b      	ldr	r4, [pc, #44]	; (8001f10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ee4:	e001      	b.n	8001eea <LoopFillZerobss>

08001ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ee8:	3204      	adds	r2, #4

08001eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eec:	d3fb      	bcc.n	8001ee6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001eee:	f7ff ff47 	bl	8001d80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ef2:	f005 feb1 	bl	8007c58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ef6:	f7ff fadd 	bl	80014b4 <main>
  bx  lr    
 8001efa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001efc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f04:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001f08:	08009614 	.word	0x08009614
  ldr r2, =_sbss
 8001f0c:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001f10:	200044a4 	.word	0x200044a4

08001f14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f14:	e7fe      	b.n	8001f14 <ADC_IRQHandler>
	...

08001f18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f1c:	4b0e      	ldr	r3, [pc, #56]	; (8001f58 <HAL_Init+0x40>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a0d      	ldr	r2, [pc, #52]	; (8001f58 <HAL_Init+0x40>)
 8001f22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f28:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <HAL_Init+0x40>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a0a      	ldr	r2, [pc, #40]	; (8001f58 <HAL_Init+0x40>)
 8001f2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f34:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <HAL_Init+0x40>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a07      	ldr	r2, [pc, #28]	; (8001f58 <HAL_Init+0x40>)
 8001f3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f40:	2003      	movs	r0, #3
 8001f42:	f000 f965 	bl	8002210 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f46:	2000      	movs	r0, #0
 8001f48:	f000 f83c 	bl	8001fc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f4c:	f7ff fdea 	bl	8001b24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40023c00 	.word	0x40023c00

08001f5c <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8001f60:	4b13      	ldr	r3, [pc, #76]	; (8001fb0 <HAL_DeInit+0x54>)
 8001f62:	f04f 32ff 	mov.w	r2, #4294967295
 8001f66:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8001f68:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <HAL_DeInit+0x54>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8001f6e:	4b10      	ldr	r3, [pc, #64]	; (8001fb0 <HAL_DeInit+0x54>)
 8001f70:	f04f 32ff 	mov.w	r2, #4294967295
 8001f74:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8001f76:	4b0e      	ldr	r3, [pc, #56]	; (8001fb0 <HAL_DeInit+0x54>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <HAL_DeInit+0x54>)
 8001f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8001f82:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8001f84:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <HAL_DeInit+0x54>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8001f8a:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <HAL_DeInit+0x54>)
 8001f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f90:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8001f92:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <HAL_DeInit+0x54>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8001f98:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <HAL_DeInit+0x54>)
 8001f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8001f9e:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8001fa0:	4b03      	ldr	r3, [pc, #12]	; (8001fb0 <HAL_DeInit+0x54>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8001fa6:	f000 f805 	bl	8001fb4 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40023800 	.word	0x40023800

08001fb4 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
	...

08001fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fcc:	4b12      	ldr	r3, [pc, #72]	; (8002018 <HAL_InitTick+0x54>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	4b12      	ldr	r3, [pc, #72]	; (800201c <HAL_InitTick+0x58>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f000 f93b 	bl	800225e <HAL_SYSTICK_Config>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e00e      	b.n	8002010 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2b0f      	cmp	r3, #15
 8001ff6:	d80a      	bhi.n	800200e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8002000:	f000 f911 	bl	8002226 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002004:	4a06      	ldr	r2, [pc, #24]	; (8002020 <HAL_InitTick+0x5c>)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800200a:	2300      	movs	r3, #0
 800200c:	e000      	b.n	8002010 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
}
 8002010:	4618      	mov	r0, r3
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20000008 	.word	0x20000008
 800201c:	20000010 	.word	0x20000010
 8002020:	2000000c 	.word	0x2000000c

08002024 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002028:	4b06      	ldr	r3, [pc, #24]	; (8002044 <HAL_IncTick+0x20>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	461a      	mov	r2, r3
 800202e:	4b06      	ldr	r3, [pc, #24]	; (8002048 <HAL_IncTick+0x24>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4413      	add	r3, r2
 8002034:	4a04      	ldr	r2, [pc, #16]	; (8002048 <HAL_IncTick+0x24>)
 8002036:	6013      	str	r3, [r2, #0]
}
 8002038:	bf00      	nop
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	20000010 	.word	0x20000010
 8002048:	20004234 	.word	0x20004234

0800204c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  return uwTick;
 8002050:	4b03      	ldr	r3, [pc, #12]	; (8002060 <HAL_GetTick+0x14>)
 8002052:	681b      	ldr	r3, [r3, #0]
}
 8002054:	4618      	mov	r0, r3
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	20004234 	.word	0x20004234

08002064 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800206c:	f7ff ffee 	bl	800204c <HAL_GetTick>
 8002070:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800207c:	d005      	beq.n	800208a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800207e:	4b0a      	ldr	r3, [pc, #40]	; (80020a8 <HAL_Delay+0x44>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	461a      	mov	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	4413      	add	r3, r2
 8002088:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800208a:	bf00      	nop
 800208c:	f7ff ffde 	bl	800204c <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	429a      	cmp	r2, r3
 800209a:	d8f7      	bhi.n	800208c <HAL_Delay+0x28>
  {
  }
}
 800209c:	bf00      	nop
 800209e:	bf00      	nop
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20000010 	.word	0x20000010

080020ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020bc:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <__NVIC_SetPriorityGrouping+0x44>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020c8:	4013      	ands	r3, r2
 80020ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020de:	4a04      	ldr	r2, [pc, #16]	; (80020f0 <__NVIC_SetPriorityGrouping+0x44>)
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	60d3      	str	r3, [r2, #12]
}
 80020e4:	bf00      	nop
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020f8:	4b04      	ldr	r3, [pc, #16]	; (800210c <__NVIC_GetPriorityGrouping+0x18>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	0a1b      	lsrs	r3, r3, #8
 80020fe:	f003 0307 	and.w	r3, r3, #7
}
 8002102:	4618      	mov	r0, r3
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	e000ed00 	.word	0xe000ed00

08002110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	6039      	str	r1, [r7, #0]
 800211a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800211c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002120:	2b00      	cmp	r3, #0
 8002122:	db0a      	blt.n	800213a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	b2da      	uxtb	r2, r3
 8002128:	490c      	ldr	r1, [pc, #48]	; (800215c <__NVIC_SetPriority+0x4c>)
 800212a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212e:	0112      	lsls	r2, r2, #4
 8002130:	b2d2      	uxtb	r2, r2
 8002132:	440b      	add	r3, r1
 8002134:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002138:	e00a      	b.n	8002150 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	b2da      	uxtb	r2, r3
 800213e:	4908      	ldr	r1, [pc, #32]	; (8002160 <__NVIC_SetPriority+0x50>)
 8002140:	79fb      	ldrb	r3, [r7, #7]
 8002142:	f003 030f 	and.w	r3, r3, #15
 8002146:	3b04      	subs	r3, #4
 8002148:	0112      	lsls	r2, r2, #4
 800214a:	b2d2      	uxtb	r2, r2
 800214c:	440b      	add	r3, r1
 800214e:	761a      	strb	r2, [r3, #24]
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	e000e100 	.word	0xe000e100
 8002160:	e000ed00 	.word	0xe000ed00

08002164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002164:	b480      	push	{r7}
 8002166:	b089      	sub	sp, #36	; 0x24
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	f1c3 0307 	rsb	r3, r3, #7
 800217e:	2b04      	cmp	r3, #4
 8002180:	bf28      	it	cs
 8002182:	2304      	movcs	r3, #4
 8002184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	3304      	adds	r3, #4
 800218a:	2b06      	cmp	r3, #6
 800218c:	d902      	bls.n	8002194 <NVIC_EncodePriority+0x30>
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	3b03      	subs	r3, #3
 8002192:	e000      	b.n	8002196 <NVIC_EncodePriority+0x32>
 8002194:	2300      	movs	r3, #0
 8002196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002198:	f04f 32ff 	mov.w	r2, #4294967295
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43da      	mvns	r2, r3
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	401a      	ands	r2, r3
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021ac:	f04f 31ff 	mov.w	r1, #4294967295
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	fa01 f303 	lsl.w	r3, r1, r3
 80021b6:	43d9      	mvns	r1, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021bc:	4313      	orrs	r3, r2
         );
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3724      	adds	r7, #36	; 0x24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
	...

080021cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3b01      	subs	r3, #1
 80021d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021dc:	d301      	bcc.n	80021e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021de:	2301      	movs	r3, #1
 80021e0:	e00f      	b.n	8002202 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021e2:	4a0a      	ldr	r2, [pc, #40]	; (800220c <SysTick_Config+0x40>)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3b01      	subs	r3, #1
 80021e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ea:	210f      	movs	r1, #15
 80021ec:	f04f 30ff 	mov.w	r0, #4294967295
 80021f0:	f7ff ff8e 	bl	8002110 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021f4:	4b05      	ldr	r3, [pc, #20]	; (800220c <SysTick_Config+0x40>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021fa:	4b04      	ldr	r3, [pc, #16]	; (800220c <SysTick_Config+0x40>)
 80021fc:	2207      	movs	r2, #7
 80021fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	e000e010 	.word	0xe000e010

08002210 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f7ff ff47 	bl	80020ac <__NVIC_SetPriorityGrouping>
}
 800221e:	bf00      	nop
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002226:	b580      	push	{r7, lr}
 8002228:	b086      	sub	sp, #24
 800222a:	af00      	add	r7, sp, #0
 800222c:	4603      	mov	r3, r0
 800222e:	60b9      	str	r1, [r7, #8]
 8002230:	607a      	str	r2, [r7, #4]
 8002232:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002234:	2300      	movs	r3, #0
 8002236:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002238:	f7ff ff5c 	bl	80020f4 <__NVIC_GetPriorityGrouping>
 800223c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	68b9      	ldr	r1, [r7, #8]
 8002242:	6978      	ldr	r0, [r7, #20]
 8002244:	f7ff ff8e 	bl	8002164 <NVIC_EncodePriority>
 8002248:	4602      	mov	r2, r0
 800224a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800224e:	4611      	mov	r1, r2
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff ff5d 	bl	8002110 <__NVIC_SetPriority>
}
 8002256:	bf00      	nop
 8002258:	3718      	adds	r7, #24
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b082      	sub	sp, #8
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7ff ffb0 	bl	80021cc <SysTick_Config>
 800226c:	4603      	mov	r3, r0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b082      	sub	sp, #8
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d101      	bne.n	8002288 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e00e      	b.n	80022a6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	795b      	ldrb	r3, [r3, #5]
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d105      	bne.n	800229e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f7fe fb89 	bl	80009b0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2201      	movs	r2, #1
 80022a2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_CRC_DeInit>:
  * @brief  DeInitialize the CRC peripheral.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_DeInit(CRC_HandleTypeDef *hcrc)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_CRC_DeInit+0x12>
  {
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e022      	b.n	8002306 <HAL_CRC_DeInit+0x58>

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  /* Check the CRC peripheral state */
  if (hcrc->State == HAL_CRC_STATE_BUSY)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	795b      	ldrb	r3, [r3, #5]
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d101      	bne.n	80022ce <HAL_CRC_DeInit+0x20>
  {
    return HAL_BUSY;
 80022ca:	2302      	movs	r3, #2
 80022cc:	e01b      	b.n	8002306 <HAL_CRC_DeInit+0x58>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2202      	movs	r2, #2
 80022d2:	715a      	strb	r2, [r3, #5]

  /* Reset CRC calculation unit */
  __HAL_CRC_DR_RESET(hcrc);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f042 0201 	orr.w	r2, r2, #1
 80022e2:	609a      	str	r2, [r3, #8]

  /* Reset IDR register content */
  CLEAR_BIT(hcrc->Instance->IDR, CRC_IDR_IDR);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	791b      	ldrb	r3, [r3, #4]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2200      	movs	r2, #0
 80022f0:	711a      	strb	r2, [r3, #4]

  /* DeInit the low level hardware */
  HAL_CRC_MspDeInit(hcrc);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7fe fb7e 	bl	80009f4 <HAL_CRC_MspDeInit>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_RESET;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	715a      	strb	r2, [r3, #5]

  /* Process unlocked */
  __HAL_UNLOCK(hcrc);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800230e:	b480      	push	{r7}
 8002310:	b087      	sub	sp, #28
 8002312:	af00      	add	r7, sp, #0
 8002314:	60f8      	str	r0, [r7, #12]
 8002316:	60b9      	str	r1, [r7, #8]
 8002318:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800231a:	2300      	movs	r3, #0
 800231c:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2202      	movs	r2, #2
 8002322:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689a      	ldr	r2, [r3, #8]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f042 0201 	orr.w	r2, r2, #1
 8002332:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]
 8002338:	e00a      	b.n	8002350 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	68ba      	ldr	r2, [r7, #8]
 8002340:	441a      	add	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6812      	ldr	r2, [r2, #0]
 8002348:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	3301      	adds	r3, #1
 800234e:	617b      	str	r3, [r7, #20]
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	429a      	cmp	r2, r3
 8002356:	d3f0      	bcc.n	800233a <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2201      	movs	r2, #1
 8002364:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8002366:	693b      	ldr	r3, [r7, #16]
}
 8002368:	4618      	mov	r0, r3
 800236a:	371c      	adds	r7, #28
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002386:	4b23      	ldr	r3, [pc, #140]	; (8002414 <HAL_FLASH_Program+0xa0>)
 8002388:	7e1b      	ldrb	r3, [r3, #24]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d101      	bne.n	8002392 <HAL_FLASH_Program+0x1e>
 800238e:	2302      	movs	r3, #2
 8002390:	e03b      	b.n	800240a <HAL_FLASH_Program+0x96>
 8002392:	4b20      	ldr	r3, [pc, #128]	; (8002414 <HAL_FLASH_Program+0xa0>)
 8002394:	2201      	movs	r2, #1
 8002396:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002398:	f24c 3050 	movw	r0, #50000	; 0xc350
 800239c:	f000 f8b0 	bl	8002500 <FLASH_WaitForLastOperation>
 80023a0:	4603      	mov	r3, r0
 80023a2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80023a4:	7dfb      	ldrb	r3, [r7, #23]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d12b      	bne.n	8002402 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d105      	bne.n	80023bc <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80023b0:	783b      	ldrb	r3, [r7, #0]
 80023b2:	4619      	mov	r1, r3
 80023b4:	68b8      	ldr	r0, [r7, #8]
 80023b6:	f000 f95b 	bl	8002670 <FLASH_Program_Byte>
 80023ba:	e016      	b.n	80023ea <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d105      	bne.n	80023ce <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80023c2:	883b      	ldrh	r3, [r7, #0]
 80023c4:	4619      	mov	r1, r3
 80023c6:	68b8      	ldr	r0, [r7, #8]
 80023c8:	f000 f92e 	bl	8002628 <FLASH_Program_HalfWord>
 80023cc:	e00d      	b.n	80023ea <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d105      	bne.n	80023e0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	4619      	mov	r1, r3
 80023d8:	68b8      	ldr	r0, [r7, #8]
 80023da:	f000 f903 	bl	80025e4 <FLASH_Program_Word>
 80023de:	e004      	b.n	80023ea <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80023e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023e4:	68b8      	ldr	r0, [r7, #8]
 80023e6:	f000 f8cb 	bl	8002580 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80023ea:	f24c 3050 	movw	r0, #50000	; 0xc350
 80023ee:	f000 f887 	bl	8002500 <FLASH_WaitForLastOperation>
 80023f2:	4603      	mov	r3, r0
 80023f4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80023f6:	4b08      	ldr	r3, [pc, #32]	; (8002418 <HAL_FLASH_Program+0xa4>)
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	4a07      	ldr	r2, [pc, #28]	; (8002418 <HAL_FLASH_Program+0xa4>)
 80023fc:	f023 0301 	bic.w	r3, r3, #1
 8002400:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002402:	4b04      	ldr	r3, [pc, #16]	; (8002414 <HAL_FLASH_Program+0xa0>)
 8002404:	2200      	movs	r2, #0
 8002406:	761a      	strb	r2, [r3, #24]
  
  return status;
 8002408:	7dfb      	ldrb	r3, [r7, #23]
}
 800240a:	4618      	mov	r0, r3
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	20004238 	.word	0x20004238
 8002418:	40023c00 	.word	0x40023c00

0800241c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002422:	2300      	movs	r3, #0
 8002424:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002426:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <HAL_FLASH_Unlock+0x38>)
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	2b00      	cmp	r3, #0
 800242c:	da0b      	bge.n	8002446 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800242e:	4b09      	ldr	r3, [pc, #36]	; (8002454 <HAL_FLASH_Unlock+0x38>)
 8002430:	4a09      	ldr	r2, [pc, #36]	; (8002458 <HAL_FLASH_Unlock+0x3c>)
 8002432:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002434:	4b07      	ldr	r3, [pc, #28]	; (8002454 <HAL_FLASH_Unlock+0x38>)
 8002436:	4a09      	ldr	r2, [pc, #36]	; (800245c <HAL_FLASH_Unlock+0x40>)
 8002438:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800243a:	4b06      	ldr	r3, [pc, #24]	; (8002454 <HAL_FLASH_Unlock+0x38>)
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	2b00      	cmp	r3, #0
 8002440:	da01      	bge.n	8002446 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002446:	79fb      	ldrb	r3, [r7, #7]
}
 8002448:	4618      	mov	r0, r3
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	40023c00 	.word	0x40023c00
 8002458:	45670123 	.word	0x45670123
 800245c:	cdef89ab 	.word	0xcdef89ab

08002460 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002464:	4b05      	ldr	r3, [pc, #20]	; (800247c <HAL_FLASH_Lock+0x1c>)
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	4a04      	ldr	r2, [pc, #16]	; (800247c <HAL_FLASH_Lock+0x1c>)
 800246a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800246e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	40023c00 	.word	0x40023c00

08002480 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8002484:	4b09      	ldr	r3, [pc, #36]	; (80024ac <HAL_FLASH_OB_Unlock+0x2c>)
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b00      	cmp	r3, #0
 800248e:	d007      	beq.n	80024a0 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8002490:	4b06      	ldr	r3, [pc, #24]	; (80024ac <HAL_FLASH_OB_Unlock+0x2c>)
 8002492:	4a07      	ldr	r2, [pc, #28]	; (80024b0 <HAL_FLASH_OB_Unlock+0x30>)
 8002494:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8002496:	4b05      	ldr	r3, [pc, #20]	; (80024ac <HAL_FLASH_OB_Unlock+0x2c>)
 8002498:	4a06      	ldr	r2, [pc, #24]	; (80024b4 <HAL_FLASH_OB_Unlock+0x34>)
 800249a:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 800249c:	2300      	movs	r3, #0
 800249e:	e000      	b.n	80024a2 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	40023c00 	.word	0x40023c00
 80024b0:	08192a3b 	.word	0x08192a3b
 80024b4:	4c5d6e7f 	.word	0x4c5d6e7f

080024b8 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80024bc:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <HAL_FLASH_OB_Lock+0x1c>)
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	4a04      	ldr	r2, [pc, #16]	; (80024d4 <HAL_FLASH_OB_Lock+0x1c>)
 80024c2:	f043 0301 	orr.w	r3, r3, #1
 80024c6:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	40023c00 	.word	0x40023c00

080024d8 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 80024dc:	4b07      	ldr	r3, [pc, #28]	; (80024fc <HAL_FLASH_OB_Launch+0x24>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	4a06      	ldr	r2, [pc, #24]	; (80024fc <HAL_FLASH_OB_Launch+0x24>)
 80024e4:	f043 0302 	orr.w	r3, r3, #2
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
 80024ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80024f0:	f000 f806 	bl	8002500 <FLASH_WaitForLastOperation>
 80024f4:	4603      	mov	r3, r0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40023c14 	.word	0x40023c14

08002500 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002508:	2300      	movs	r3, #0
 800250a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800250c:	4b1a      	ldr	r3, [pc, #104]	; (8002578 <FLASH_WaitForLastOperation+0x78>)
 800250e:	2200      	movs	r2, #0
 8002510:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002512:	f7ff fd9b 	bl	800204c <HAL_GetTick>
 8002516:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002518:	e010      	b.n	800253c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002520:	d00c      	beq.n	800253c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d007      	beq.n	8002538 <FLASH_WaitForLastOperation+0x38>
 8002528:	f7ff fd90 	bl	800204c <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	429a      	cmp	r2, r3
 8002536:	d201      	bcs.n	800253c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e019      	b.n	8002570 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800253c:	4b0f      	ldr	r3, [pc, #60]	; (800257c <FLASH_WaitForLastOperation+0x7c>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1e8      	bne.n	800251a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002548:	4b0c      	ldr	r3, [pc, #48]	; (800257c <FLASH_WaitForLastOperation+0x7c>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	2b00      	cmp	r3, #0
 8002552:	d002      	beq.n	800255a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002554:	4b09      	ldr	r3, [pc, #36]	; (800257c <FLASH_WaitForLastOperation+0x7c>)
 8002556:	2201      	movs	r2, #1
 8002558:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800255a:	4b08      	ldr	r3, [pc, #32]	; (800257c <FLASH_WaitForLastOperation+0x7c>)
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002566:	f000 f8a5 	bl	80026b4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e000      	b.n	8002570 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800256e:	2300      	movs	r3, #0
  
}  
 8002570:	4618      	mov	r0, r3
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	20004238 	.word	0x20004238
 800257c:	40023c00 	.word	0x40023c00

08002580 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800258c:	4b14      	ldr	r3, [pc, #80]	; (80025e0 <FLASH_Program_DoubleWord+0x60>)
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	4a13      	ldr	r2, [pc, #76]	; (80025e0 <FLASH_Program_DoubleWord+0x60>)
 8002592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002596:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002598:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <FLASH_Program_DoubleWord+0x60>)
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	4a10      	ldr	r2, [pc, #64]	; (80025e0 <FLASH_Program_DoubleWord+0x60>)
 800259e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80025a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80025a4:	4b0e      	ldr	r3, [pc, #56]	; (80025e0 <FLASH_Program_DoubleWord+0x60>)
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	4a0d      	ldr	r2, [pc, #52]	; (80025e0 <FLASH_Program_DoubleWord+0x60>)
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80025b6:	f3bf 8f6f 	isb	sy
}
 80025ba:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80025bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025c0:	f04f 0200 	mov.w	r2, #0
 80025c4:	f04f 0300 	mov.w	r3, #0
 80025c8:	000a      	movs	r2, r1
 80025ca:	2300      	movs	r3, #0
 80025cc:	68f9      	ldr	r1, [r7, #12]
 80025ce:	3104      	adds	r1, #4
 80025d0:	4613      	mov	r3, r2
 80025d2:	600b      	str	r3, [r1, #0]
}
 80025d4:	bf00      	nop
 80025d6:	3714      	adds	r7, #20
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	40023c00 	.word	0x40023c00

080025e4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80025ee:	4b0d      	ldr	r3, [pc, #52]	; (8002624 <FLASH_Program_Word+0x40>)
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	4a0c      	ldr	r2, [pc, #48]	; (8002624 <FLASH_Program_Word+0x40>)
 80025f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025f8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80025fa:	4b0a      	ldr	r3, [pc, #40]	; (8002624 <FLASH_Program_Word+0x40>)
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	4a09      	ldr	r2, [pc, #36]	; (8002624 <FLASH_Program_Word+0x40>)
 8002600:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002604:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002606:	4b07      	ldr	r3, [pc, #28]	; (8002624 <FLASH_Program_Word+0x40>)
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	4a06      	ldr	r2, [pc, #24]	; (8002624 <FLASH_Program_Word+0x40>)
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	601a      	str	r2, [r3, #0]
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	40023c00 	.word	0x40023c00

08002628 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	460b      	mov	r3, r1
 8002632:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002634:	4b0d      	ldr	r3, [pc, #52]	; (800266c <FLASH_Program_HalfWord+0x44>)
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	4a0c      	ldr	r2, [pc, #48]	; (800266c <FLASH_Program_HalfWord+0x44>)
 800263a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800263e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002640:	4b0a      	ldr	r3, [pc, #40]	; (800266c <FLASH_Program_HalfWord+0x44>)
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	4a09      	ldr	r2, [pc, #36]	; (800266c <FLASH_Program_HalfWord+0x44>)
 8002646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800264a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800264c:	4b07      	ldr	r3, [pc, #28]	; (800266c <FLASH_Program_HalfWord+0x44>)
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	4a06      	ldr	r2, [pc, #24]	; (800266c <FLASH_Program_HalfWord+0x44>)
 8002652:	f043 0301 	orr.w	r3, r3, #1
 8002656:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	887a      	ldrh	r2, [r7, #2]
 800265c:	801a      	strh	r2, [r3, #0]
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	40023c00 	.word	0x40023c00

08002670 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	460b      	mov	r3, r1
 800267a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800267c:	4b0c      	ldr	r3, [pc, #48]	; (80026b0 <FLASH_Program_Byte+0x40>)
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	4a0b      	ldr	r2, [pc, #44]	; (80026b0 <FLASH_Program_Byte+0x40>)
 8002682:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002686:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002688:	4b09      	ldr	r3, [pc, #36]	; (80026b0 <FLASH_Program_Byte+0x40>)
 800268a:	4a09      	ldr	r2, [pc, #36]	; (80026b0 <FLASH_Program_Byte+0x40>)
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002690:	4b07      	ldr	r3, [pc, #28]	; (80026b0 <FLASH_Program_Byte+0x40>)
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	4a06      	ldr	r2, [pc, #24]	; (80026b0 <FLASH_Program_Byte+0x40>)
 8002696:	f043 0301 	orr.w	r3, r3, #1
 800269a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	78fa      	ldrb	r2, [r7, #3]
 80026a0:	701a      	strb	r2, [r3, #0]
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	40023c00 	.word	0x40023c00

080026b4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80026b8:	4b2f      	ldr	r3, [pc, #188]	; (8002778 <FLASH_SetErrorCode+0xc4>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	f003 0310 	and.w	r3, r3, #16
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d008      	beq.n	80026d6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80026c4:	4b2d      	ldr	r3, [pc, #180]	; (800277c <FLASH_SetErrorCode+0xc8>)
 80026c6:	69db      	ldr	r3, [r3, #28]
 80026c8:	f043 0310 	orr.w	r3, r3, #16
 80026cc:	4a2b      	ldr	r2, [pc, #172]	; (800277c <FLASH_SetErrorCode+0xc8>)
 80026ce:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80026d0:	4b29      	ldr	r3, [pc, #164]	; (8002778 <FLASH_SetErrorCode+0xc4>)
 80026d2:	2210      	movs	r2, #16
 80026d4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80026d6:	4b28      	ldr	r3, [pc, #160]	; (8002778 <FLASH_SetErrorCode+0xc4>)
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	f003 0320 	and.w	r3, r3, #32
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d008      	beq.n	80026f4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80026e2:	4b26      	ldr	r3, [pc, #152]	; (800277c <FLASH_SetErrorCode+0xc8>)
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	f043 0308 	orr.w	r3, r3, #8
 80026ea:	4a24      	ldr	r2, [pc, #144]	; (800277c <FLASH_SetErrorCode+0xc8>)
 80026ec:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80026ee:	4b22      	ldr	r3, [pc, #136]	; (8002778 <FLASH_SetErrorCode+0xc4>)
 80026f0:	2220      	movs	r2, #32
 80026f2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80026f4:	4b20      	ldr	r3, [pc, #128]	; (8002778 <FLASH_SetErrorCode+0xc4>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d008      	beq.n	8002712 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002700:	4b1e      	ldr	r3, [pc, #120]	; (800277c <FLASH_SetErrorCode+0xc8>)
 8002702:	69db      	ldr	r3, [r3, #28]
 8002704:	f043 0304 	orr.w	r3, r3, #4
 8002708:	4a1c      	ldr	r2, [pc, #112]	; (800277c <FLASH_SetErrorCode+0xc8>)
 800270a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800270c:	4b1a      	ldr	r3, [pc, #104]	; (8002778 <FLASH_SetErrorCode+0xc4>)
 800270e:	2240      	movs	r2, #64	; 0x40
 8002710:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002712:	4b19      	ldr	r3, [pc, #100]	; (8002778 <FLASH_SetErrorCode+0xc4>)
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800271a:	2b00      	cmp	r3, #0
 800271c:	d008      	beq.n	8002730 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800271e:	4b17      	ldr	r3, [pc, #92]	; (800277c <FLASH_SetErrorCode+0xc8>)
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	f043 0302 	orr.w	r3, r3, #2
 8002726:	4a15      	ldr	r2, [pc, #84]	; (800277c <FLASH_SetErrorCode+0xc8>)
 8002728:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800272a:	4b13      	ldr	r3, [pc, #76]	; (8002778 <FLASH_SetErrorCode+0xc4>)
 800272c:	2280      	movs	r2, #128	; 0x80
 800272e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002730:	4b11      	ldr	r3, [pc, #68]	; (8002778 <FLASH_SetErrorCode+0xc4>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002738:	2b00      	cmp	r3, #0
 800273a:	d009      	beq.n	8002750 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800273c:	4b0f      	ldr	r3, [pc, #60]	; (800277c <FLASH_SetErrorCode+0xc8>)
 800273e:	69db      	ldr	r3, [r3, #28]
 8002740:	f043 0301 	orr.w	r3, r3, #1
 8002744:	4a0d      	ldr	r2, [pc, #52]	; (800277c <FLASH_SetErrorCode+0xc8>)
 8002746:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002748:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <FLASH_SetErrorCode+0xc4>)
 800274a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800274e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002750:	4b09      	ldr	r3, [pc, #36]	; (8002778 <FLASH_SetErrorCode+0xc4>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d008      	beq.n	800276e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800275c:	4b07      	ldr	r3, [pc, #28]	; (800277c <FLASH_SetErrorCode+0xc8>)
 800275e:	69db      	ldr	r3, [r3, #28]
 8002760:	f043 0320 	orr.w	r3, r3, #32
 8002764:	4a05      	ldr	r2, [pc, #20]	; (800277c <FLASH_SetErrorCode+0xc8>)
 8002766:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002768:	4b03      	ldr	r3, [pc, #12]	; (8002778 <FLASH_SetErrorCode+0xc4>)
 800276a:	2202      	movs	r2, #2
 800276c:	60da      	str	r2, [r3, #12]
  }
}
 800276e:	bf00      	nop
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	40023c00 	.word	0x40023c00
 800277c:	20004238 	.word	0x20004238

08002780 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800278e:	2300      	movs	r3, #0
 8002790:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002792:	4b31      	ldr	r3, [pc, #196]	; (8002858 <HAL_FLASHEx_Erase+0xd8>)
 8002794:	7e1b      	ldrb	r3, [r3, #24]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d101      	bne.n	800279e <HAL_FLASHEx_Erase+0x1e>
 800279a:	2302      	movs	r3, #2
 800279c:	e058      	b.n	8002850 <HAL_FLASHEx_Erase+0xd0>
 800279e:	4b2e      	ldr	r3, [pc, #184]	; (8002858 <HAL_FLASHEx_Erase+0xd8>)
 80027a0:	2201      	movs	r2, #1
 80027a2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80027a4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80027a8:	f7ff feaa 	bl	8002500 <FLASH_WaitForLastOperation>
 80027ac:	4603      	mov	r3, r0
 80027ae:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80027b0:	7bfb      	ldrb	r3, [r7, #15]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d148      	bne.n	8002848 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	f04f 32ff 	mov.w	r2, #4294967295
 80027bc:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d115      	bne.n	80027f2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	4619      	mov	r1, r3
 80027d2:	4610      	mov	r0, r2
 80027d4:	f000 f8d6 	bl	8002984 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80027d8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80027dc:	f7ff fe90 	bl	8002500 <FLASH_WaitForLastOperation>
 80027e0:	4603      	mov	r3, r0
 80027e2:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80027e4:	4b1d      	ldr	r3, [pc, #116]	; (800285c <HAL_FLASHEx_Erase+0xdc>)
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	4a1c      	ldr	r2, [pc, #112]	; (800285c <HAL_FLASHEx_Erase+0xdc>)
 80027ea:	f023 0304 	bic.w	r3, r3, #4
 80027ee:	6113      	str	r3, [r2, #16]
 80027f0:	e028      	b.n	8002844 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	60bb      	str	r3, [r7, #8]
 80027f8:	e01c      	b.n	8002834 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	4619      	mov	r1, r3
 8002802:	68b8      	ldr	r0, [r7, #8]
 8002804:	f000 f8e2 	bl	80029cc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002808:	f24c 3050 	movw	r0, #50000	; 0xc350
 800280c:	f7ff fe78 	bl	8002500 <FLASH_WaitForLastOperation>
 8002810:	4603      	mov	r3, r0
 8002812:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002814:	4b11      	ldr	r3, [pc, #68]	; (800285c <HAL_FLASHEx_Erase+0xdc>)
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	4a10      	ldr	r2, [pc, #64]	; (800285c <HAL_FLASHEx_Erase+0xdc>)
 800281a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800281e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8002820:	7bfb      	ldrb	r3, [r7, #15]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	68ba      	ldr	r2, [r7, #8]
 800282a:	601a      	str	r2, [r3, #0]
          break;
 800282c:	e00a      	b.n	8002844 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	3301      	adds	r3, #1
 8002832:	60bb      	str	r3, [r7, #8]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68da      	ldr	r2, [r3, #12]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	4413      	add	r3, r2
 800283e:	68ba      	ldr	r2, [r7, #8]
 8002840:	429a      	cmp	r2, r3
 8002842:	d3da      	bcc.n	80027fa <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002844:	f000 fa00 	bl	8002c48 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002848:	4b03      	ldr	r3, [pc, #12]	; (8002858 <HAL_FLASHEx_Erase+0xd8>)
 800284a:	2200      	movs	r2, #0
 800284c:	761a      	strb	r2, [r3, #24]

  return status;
 800284e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002850:	4618      	mov	r0, r3
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	20004238 	.word	0x20004238
 800285c:	40023c00 	.word	0x40023c00

08002860 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800286c:	4b32      	ldr	r3, [pc, #200]	; (8002938 <HAL_FLASHEx_OBProgram+0xd8>)
 800286e:	7e1b      	ldrb	r3, [r3, #24]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d101      	bne.n	8002878 <HAL_FLASHEx_OBProgram+0x18>
 8002874:	2302      	movs	r3, #2
 8002876:	e05b      	b.n	8002930 <HAL_FLASHEx_OBProgram+0xd0>
 8002878:	4b2f      	ldr	r3, [pc, #188]	; (8002938 <HAL_FLASHEx_OBProgram+0xd8>)
 800287a:	2201      	movs	r2, #1
 800287c:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /*Write protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d018      	beq.n	80028bc <HAL_FLASHEx_OBProgram+0x5c>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d10a      	bne.n	80028a8 <HAL_FLASHEx_OBProgram+0x48>
    {
      /*Enable of Write protection on the selected Sector*/
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector, pOBInit->Banks);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689a      	ldr	r2, [r3, #8]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	4619      	mov	r1, r3
 800289c:	4610      	mov	r0, r2
 800289e:	f000 f8dd 	bl	8002a5c <FLASH_OB_EnableWRP>
 80028a2:	4603      	mov	r3, r0
 80028a4:	73fb      	strb	r3, [r7, #15]
 80028a6:	e009      	b.n	80028bc <HAL_FLASHEx_OBProgram+0x5c>
    }
    else
    {
      /*Disable of Write protection on the selected Sector*/
      status = FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	4619      	mov	r1, r3
 80028b2:	4610      	mov	r0, r2
 80028b4:	f000 f8f4 	bl	8002aa0 <FLASH_OB_DisableWRP>
 80028b8:	4603      	mov	r3, r0
 80028ba:	73fb      	strb	r3, [r7, #15]
    }
  }

  /*Read protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d007      	beq.n	80028d8 <HAL_FLASHEx_OBProgram+0x78>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 f906 	bl	8002ae0 <FLASH_OB_RDP_LevelConfig>
 80028d4:	4603      	mov	r3, r0
 80028d6:	73fb      	strb	r3, [r7, #15]
  }

  /*USER  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d013      	beq.n	800290c <HAL_FLASHEx_OBProgram+0xac>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	7e1b      	ldrb	r3, [r3, #24]
 80028e8:	f003 0320 	and.w	r3, r3, #32
 80028ec:	b2d8      	uxtb	r0, r3
                                 pOBInit->USERConfig & OB_STOP_NO_RST,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 80028f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f6:	b2d9      	uxtb	r1, r3
                                 pOBInit->USERConfig & OB_STDBY_NO_RST);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 80028fc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002900:	b2db      	uxtb	r3, r3
 8002902:	461a      	mov	r2, r3
 8002904:	f000 f906 	bl	8002b14 <FLASH_OB_UserConfig>
 8002908:	4603      	mov	r3, r0
 800290a:	73fb      	strb	r3, [r7, #15]
  }

  /*BOR Level  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0308 	and.w	r3, r3, #8
 8002914:	2b00      	cmp	r3, #0
 8002916:	d007      	beq.n	8002928 <HAL_FLASHEx_OBProgram+0xc8>
  {
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	695b      	ldr	r3, [r3, #20]
 800291c:	b2db      	uxtb	r3, r3
 800291e:	4618      	mov	r0, r3
 8002920:	f000 f928 	bl	8002b74 <FLASH_OB_BOR_LevelConfig>
 8002924:	4603      	mov	r3, r0
 8002926:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002928:	4b03      	ldr	r3, [pc, #12]	; (8002938 <HAL_FLASHEx_OBProgram+0xd8>)
 800292a:	2200      	movs	r2, #0
 800292c:	761a      	strb	r2, [r3, #24]

  return status;
 800292e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	20004238 	.word	0x20004238

0800293c <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	220f      	movs	r2, #15
 8002948:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 800294a:	f000 f941 	bl	8002bd0 <FLASH_OB_GetWRP>
 800294e:	4603      	mov	r3, r0
 8002950:	461a      	mov	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 8002956:	f000 f947 	bl	8002be8 <FLASH_OB_GetRDP>
 800295a:	4603      	mov	r3, r0
 800295c:	461a      	mov	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 8002962:	f000 f925 	bl	8002bb0 <FLASH_OB_GetUser>
 8002966:	4603      	mov	r3, r0
 8002968:	461a      	mov	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 800296e:	f000 f95b 	bl	8002c28 <FLASH_OB_GetBOR>
 8002972:	4603      	mov	r3, r0
 8002974:	461a      	mov	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	615a      	str	r2, [r3, #20]
}
 800297a:	bf00      	nop
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
	...

08002984 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	6039      	str	r1, [r7, #0]
 800298e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002990:	4b0d      	ldr	r3, [pc, #52]	; (80029c8 <FLASH_MassErase+0x44>)
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	4a0c      	ldr	r2, [pc, #48]	; (80029c8 <FLASH_MassErase+0x44>)
 8002996:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800299a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800299c:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <FLASH_MassErase+0x44>)
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	4a09      	ldr	r2, [pc, #36]	; (80029c8 <FLASH_MassErase+0x44>)
 80029a2:	f043 0304 	orr.w	r3, r3, #4
 80029a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80029a8:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <FLASH_MassErase+0x44>)
 80029aa:	691a      	ldr	r2, [r3, #16]
 80029ac:	79fb      	ldrb	r3, [r7, #7]
 80029ae:	021b      	lsls	r3, r3, #8
 80029b0:	4313      	orrs	r3, r2
 80029b2:	4a05      	ldr	r2, [pc, #20]	; (80029c8 <FLASH_MassErase+0x44>)
 80029b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b8:	6113      	str	r3, [r2, #16]
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	40023c00 	.word	0x40023c00

080029cc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	460b      	mov	r3, r1
 80029d6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80029d8:	2300      	movs	r3, #0
 80029da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80029dc:	78fb      	ldrb	r3, [r7, #3]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d102      	bne.n	80029e8 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80029e2:	2300      	movs	r3, #0
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	e010      	b.n	8002a0a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80029e8:	78fb      	ldrb	r3, [r7, #3]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d103      	bne.n	80029f6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80029ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	e009      	b.n	8002a0a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80029f6:	78fb      	ldrb	r3, [r7, #3]
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d103      	bne.n	8002a04 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80029fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	e002      	b.n	8002a0a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002a04:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a08:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002a0a:	4b13      	ldr	r3, [pc, #76]	; (8002a58 <FLASH_Erase_Sector+0x8c>)
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	4a12      	ldr	r2, [pc, #72]	; (8002a58 <FLASH_Erase_Sector+0x8c>)
 8002a10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a14:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002a16:	4b10      	ldr	r3, [pc, #64]	; (8002a58 <FLASH_Erase_Sector+0x8c>)
 8002a18:	691a      	ldr	r2, [r3, #16]
 8002a1a:	490f      	ldr	r1, [pc, #60]	; (8002a58 <FLASH_Erase_Sector+0x8c>)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002a22:	4b0d      	ldr	r3, [pc, #52]	; (8002a58 <FLASH_Erase_Sector+0x8c>)
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	4a0c      	ldr	r2, [pc, #48]	; (8002a58 <FLASH_Erase_Sector+0x8c>)
 8002a28:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002a2c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002a2e:	4b0a      	ldr	r3, [pc, #40]	; (8002a58 <FLASH_Erase_Sector+0x8c>)
 8002a30:	691a      	ldr	r2, [r3, #16]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	4313      	orrs	r3, r2
 8002a38:	4a07      	ldr	r2, [pc, #28]	; (8002a58 <FLASH_Erase_Sector+0x8c>)
 8002a3a:	f043 0302 	orr.w	r3, r3, #2
 8002a3e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002a40:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <FLASH_Erase_Sector+0x8c>)
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	4a04      	ldr	r2, [pc, #16]	; (8002a58 <FLASH_Erase_Sector+0x8c>)
 8002a46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a4a:	6113      	str	r3, [r2, #16]
}
 8002a4c:	bf00      	nop
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	40023c00 	.word	0x40023c00

08002a5c <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a66:	2300      	movs	r3, #0
 8002a68:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a6a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a6e:	f7ff fd47 	bl	8002500 <FLASH_WaitForLastOperation>
 8002a72:	4603      	mov	r3, r0
 8002a74:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002a76:	7bfb      	ldrb	r3, [r7, #15]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10a      	bne.n	8002a92 <FLASH_OB_EnableWRP+0x36>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS &= (~WRPSector);
 8002a7c:	4b07      	ldr	r3, [pc, #28]	; (8002a9c <FLASH_OB_EnableWRP+0x40>)
 8002a7e:	881b      	ldrh	r3, [r3, #0]
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	43db      	mvns	r3, r3
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	4904      	ldr	r1, [pc, #16]	; (8002a9c <FLASH_OB_EnableWRP+0x40>)
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	800b      	strh	r3, [r1, #0]
  }

  return status;
 8002a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40023c16 	.word	0x40023c16

08002aa0 <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002aae:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002ab2:	f7ff fd25 	bl	8002500 <FLASH_WaitForLastOperation>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002aba:	7bfb      	ldrb	r3, [r7, #15]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d108      	bne.n	8002ad2 <FLASH_OB_DisableWRP+0x32>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector;
 8002ac0:	4b06      	ldr	r3, [pc, #24]	; (8002adc <FLASH_OB_DisableWRP+0x3c>)
 8002ac2:	881b      	ldrh	r3, [r3, #0]
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	4904      	ldr	r1, [pc, #16]	; (8002adc <FLASH_OB_DisableWRP+0x3c>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	800b      	strh	r3, [r1, #0]
  }

  return status;
 8002ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	40023c16 	.word	0x40023c16

08002ae0 <FLASH_OB_RDP_LevelConfig>:
  * @note WARNING: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002aea:	2300      	movs	r3, #0
 8002aec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002aee:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002af2:	f7ff fd05 	bl	8002500 <FLASH_WaitForLastOperation>
 8002af6:	4603      	mov	r3, r0
 8002af8:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002afa:	7bfb      	ldrb	r3, [r7, #15]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d102      	bne.n	8002b06 <FLASH_OB_RDP_LevelConfig+0x26>
  {
    *(__IO uint8_t *)OPTCR_BYTE1_ADDRESS = Level;
 8002b00:	4a03      	ldr	r2, [pc, #12]	; (8002b10 <FLASH_OB_RDP_LevelConfig+0x30>)
 8002b02:	79fb      	ldrb	r3, [r7, #7]
 8002b04:	7013      	strb	r3, [r2, #0]
  }

  return status;
 8002b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40023c15 	.word	0x40023c15

08002b14 <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NO_RST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t Iwdg, uint8_t Stop, uint8_t Stdby)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	71fb      	strb	r3, [r7, #7]
 8002b1e:	460b      	mov	r3, r1
 8002b20:	71bb      	strb	r3, [r7, #6]
 8002b22:	4613      	mov	r3, r2
 8002b24:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
 8002b26:	23ff      	movs	r3, #255	; 0xff
 8002b28:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef status = HAL_OK;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	73bb      	strb	r3, [r7, #14]
  assert_param(IS_OB_IWDG_SOURCE(Iwdg));
  assert_param(IS_OB_STOP_SOURCE(Stop));
  assert_param(IS_OB_STDBY_SOURCE(Stdby));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b2e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b32:	f7ff fce5 	bl	8002500 <FLASH_WaitForLastOperation>
 8002b36:	4603      	mov	r3, r0
 8002b38:	73bb      	strb	r3, [r7, #14]

  if (status == HAL_OK)
 8002b3a:	7bbb      	ldrb	r3, [r7, #14]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d111      	bne.n	8002b64 <FLASH_OB_UserConfig+0x50>
  {
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp = (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 8002b40:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <FLASH_OB_UserConfig+0x5c>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	f003 031f 	and.w	r3, r3, #31
 8002b4a:	73fb      	strb	r3, [r7, #15]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp)));
 8002b4c:	79ba      	ldrb	r2, [r7, #6]
 8002b4e:	7bfb      	ldrb	r3, [r7, #15]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	b2da      	uxtb	r2, r3
 8002b54:	797b      	ldrb	r3, [r7, #5]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	4905      	ldr	r1, [pc, #20]	; (8002b70 <FLASH_OB_UserConfig+0x5c>)
 8002b5c:	79fb      	ldrb	r3, [r7, #7]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	700b      	strb	r3, [r1, #0]
  }

  return status;
 8002b64:	7bbb      	ldrb	r3, [r7, #14]
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40023c14 	.word	0x40023c14

08002b74 <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 8002b7e:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <FLASH_OB_BOR_LevelConfig+0x38>)
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	4a09      	ldr	r2, [pc, #36]	; (8002bac <FLASH_OB_BOR_LevelConfig+0x38>)
 8002b86:	f023 030c 	bic.w	r3, r3, #12
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	7013      	strb	r3, [r2, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= Level;
 8002b8e:	4b07      	ldr	r3, [pc, #28]	; (8002bac <FLASH_OB_BOR_LevelConfig+0x38>)
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	b2da      	uxtb	r2, r3
 8002b94:	4905      	ldr	r1, [pc, #20]	; (8002bac <FLASH_OB_BOR_LevelConfig+0x38>)
 8002b96:	79fb      	ldrb	r3, [r7, #7]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	700b      	strb	r3, [r1, #0]

  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0

}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	40023c14 	.word	0x40023c14

08002bb0 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 8002bb4:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <FLASH_OB_GetUser+0x1c>)
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	f023 031f 	bic.w	r3, r3, #31
 8002bbe:	b2db      	uxtb	r3, r3
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	40023c00 	.word	0x40023c00

08002bd0 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8002bd4:	4b03      	ldr	r3, [pc, #12]	; (8002be4 <FLASH_OB_GetWRP+0x14>)
 8002bd6:	881b      	ldrh	r3, [r3, #0]
 8002bd8:	b29b      	uxth	r3, r3
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	40023c16 	.word	0x40023c16

08002be8 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 8002bee:	23aa      	movs	r3, #170	; 0xaa
 8002bf0:	71fb      	strb	r3, [r7, #7]

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
 8002bf2:	4b0c      	ldr	r3, [pc, #48]	; (8002c24 <FLASH_OB_GetRDP+0x3c>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2bcc      	cmp	r3, #204	; 0xcc
 8002bfa:	d102      	bne.n	8002c02 <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 8002bfc:	23cc      	movs	r3, #204	; 0xcc
 8002bfe:	71fb      	strb	r3, [r7, #7]
 8002c00:	e009      	b.n	8002c16 <FLASH_OB_GetRDP+0x2e>
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
 8002c02:	4b08      	ldr	r3, [pc, #32]	; (8002c24 <FLASH_OB_GetRDP+0x3c>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2baa      	cmp	r3, #170	; 0xaa
 8002c0a:	d102      	bne.n	8002c12 <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 8002c0c:	23aa      	movs	r3, #170	; 0xaa
 8002c0e:	71fb      	strb	r3, [r7, #7]
 8002c10:	e001      	b.n	8002c16 <FLASH_OB_GetRDP+0x2e>
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
 8002c12:	2355      	movs	r3, #85	; 0x55
 8002c14:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 8002c16:	79fb      	ldrb	r3, [r7, #7]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	40023c15 	.word	0x40023c15

08002c28 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 8002c2c:	4b05      	ldr	r3, [pc, #20]	; (8002c44 <FLASH_OB_GetBOR+0x1c>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	f003 030c 	and.w	r3, r3, #12
 8002c36:	b2db      	uxtb	r3, r3
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	40023c14 	.word	0x40023c14

08002c48 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002c4c:	4b20      	ldr	r3, [pc, #128]	; (8002cd0 <FLASH_FlushCaches+0x88>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d017      	beq.n	8002c88 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002c58:	4b1d      	ldr	r3, [pc, #116]	; (8002cd0 <FLASH_FlushCaches+0x88>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a1c      	ldr	r2, [pc, #112]	; (8002cd0 <FLASH_FlushCaches+0x88>)
 8002c5e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c62:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002c64:	4b1a      	ldr	r3, [pc, #104]	; (8002cd0 <FLASH_FlushCaches+0x88>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a19      	ldr	r2, [pc, #100]	; (8002cd0 <FLASH_FlushCaches+0x88>)
 8002c6a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c6e:	6013      	str	r3, [r2, #0]
 8002c70:	4b17      	ldr	r3, [pc, #92]	; (8002cd0 <FLASH_FlushCaches+0x88>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a16      	ldr	r2, [pc, #88]	; (8002cd0 <FLASH_FlushCaches+0x88>)
 8002c76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c7a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c7c:	4b14      	ldr	r3, [pc, #80]	; (8002cd0 <FLASH_FlushCaches+0x88>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a13      	ldr	r2, [pc, #76]	; (8002cd0 <FLASH_FlushCaches+0x88>)
 8002c82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c86:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002c88:	4b11      	ldr	r3, [pc, #68]	; (8002cd0 <FLASH_FlushCaches+0x88>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d017      	beq.n	8002cc4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002c94:	4b0e      	ldr	r3, [pc, #56]	; (8002cd0 <FLASH_FlushCaches+0x88>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a0d      	ldr	r2, [pc, #52]	; (8002cd0 <FLASH_FlushCaches+0x88>)
 8002c9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c9e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002ca0:	4b0b      	ldr	r3, [pc, #44]	; (8002cd0 <FLASH_FlushCaches+0x88>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a0a      	ldr	r2, [pc, #40]	; (8002cd0 <FLASH_FlushCaches+0x88>)
 8002ca6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002caa:	6013      	str	r3, [r2, #0]
 8002cac:	4b08      	ldr	r3, [pc, #32]	; (8002cd0 <FLASH_FlushCaches+0x88>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a07      	ldr	r2, [pc, #28]	; (8002cd0 <FLASH_FlushCaches+0x88>)
 8002cb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002cb6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cb8:	4b05      	ldr	r3, [pc, #20]	; (8002cd0 <FLASH_FlushCaches+0x88>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a04      	ldr	r2, [pc, #16]	; (8002cd0 <FLASH_FlushCaches+0x88>)
 8002cbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cc2:	6013      	str	r3, [r2, #0]
  }
}
 8002cc4:	bf00      	nop
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	40023c00 	.word	0x40023c00

08002cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b089      	sub	sp, #36	; 0x24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cea:	2300      	movs	r3, #0
 8002cec:	61fb      	str	r3, [r7, #28]
 8002cee:	e159      	b.n	8002fa4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	4013      	ands	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	f040 8148 	bne.w	8002f9e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d005      	beq.n	8002d26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d130      	bne.n	8002d88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	2203      	movs	r2, #3
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	43db      	mvns	r3, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	68da      	ldr	r2, [r3, #12]
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	43db      	mvns	r3, r3
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	091b      	lsrs	r3, r3, #4
 8002d72:	f003 0201 	and.w	r2, r3, #1
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f003 0303 	and.w	r3, r3, #3
 8002d90:	2b03      	cmp	r3, #3
 8002d92:	d017      	beq.n	8002dc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	2203      	movs	r2, #3
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	43db      	mvns	r3, r3
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4013      	ands	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 0303 	and.w	r3, r3, #3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d123      	bne.n	8002e18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	08da      	lsrs	r2, r3, #3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3208      	adds	r2, #8
 8002dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	220f      	movs	r2, #15
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	43db      	mvns	r3, r3
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4013      	ands	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	691a      	ldr	r2, [r3, #16]
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	08da      	lsrs	r2, r3, #3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	3208      	adds	r2, #8
 8002e12:	69b9      	ldr	r1, [r7, #24]
 8002e14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	2203      	movs	r2, #3
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f003 0203 	and.w	r2, r3, #3
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 80a2 	beq.w	8002f9e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60fb      	str	r3, [r7, #12]
 8002e5e:	4b57      	ldr	r3, [pc, #348]	; (8002fbc <HAL_GPIO_Init+0x2e8>)
 8002e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e62:	4a56      	ldr	r2, [pc, #344]	; (8002fbc <HAL_GPIO_Init+0x2e8>)
 8002e64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e68:	6453      	str	r3, [r2, #68]	; 0x44
 8002e6a:	4b54      	ldr	r3, [pc, #336]	; (8002fbc <HAL_GPIO_Init+0x2e8>)
 8002e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e72:	60fb      	str	r3, [r7, #12]
 8002e74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e76:	4a52      	ldr	r2, [pc, #328]	; (8002fc0 <HAL_GPIO_Init+0x2ec>)
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	089b      	lsrs	r3, r3, #2
 8002e7c:	3302      	adds	r3, #2
 8002e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	220f      	movs	r2, #15
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	43db      	mvns	r3, r3
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	4013      	ands	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a49      	ldr	r2, [pc, #292]	; (8002fc4 <HAL_GPIO_Init+0x2f0>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d019      	beq.n	8002ed6 <HAL_GPIO_Init+0x202>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a48      	ldr	r2, [pc, #288]	; (8002fc8 <HAL_GPIO_Init+0x2f4>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d013      	beq.n	8002ed2 <HAL_GPIO_Init+0x1fe>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a47      	ldr	r2, [pc, #284]	; (8002fcc <HAL_GPIO_Init+0x2f8>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d00d      	beq.n	8002ece <HAL_GPIO_Init+0x1fa>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a46      	ldr	r2, [pc, #280]	; (8002fd0 <HAL_GPIO_Init+0x2fc>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d007      	beq.n	8002eca <HAL_GPIO_Init+0x1f6>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a45      	ldr	r2, [pc, #276]	; (8002fd4 <HAL_GPIO_Init+0x300>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d101      	bne.n	8002ec6 <HAL_GPIO_Init+0x1f2>
 8002ec2:	2304      	movs	r3, #4
 8002ec4:	e008      	b.n	8002ed8 <HAL_GPIO_Init+0x204>
 8002ec6:	2307      	movs	r3, #7
 8002ec8:	e006      	b.n	8002ed8 <HAL_GPIO_Init+0x204>
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e004      	b.n	8002ed8 <HAL_GPIO_Init+0x204>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	e002      	b.n	8002ed8 <HAL_GPIO_Init+0x204>
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e000      	b.n	8002ed8 <HAL_GPIO_Init+0x204>
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	69fa      	ldr	r2, [r7, #28]
 8002eda:	f002 0203 	and.w	r2, r2, #3
 8002ede:	0092      	lsls	r2, r2, #2
 8002ee0:	4093      	lsls	r3, r2
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ee8:	4935      	ldr	r1, [pc, #212]	; (8002fc0 <HAL_GPIO_Init+0x2ec>)
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	089b      	lsrs	r3, r3, #2
 8002eee:	3302      	adds	r3, #2
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ef6:	4b38      	ldr	r3, [pc, #224]	; (8002fd8 <HAL_GPIO_Init+0x304>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	43db      	mvns	r3, r3
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	4013      	ands	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d003      	beq.n	8002f1a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f1a:	4a2f      	ldr	r2, [pc, #188]	; (8002fd8 <HAL_GPIO_Init+0x304>)
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f20:	4b2d      	ldr	r3, [pc, #180]	; (8002fd8 <HAL_GPIO_Init+0x304>)
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d003      	beq.n	8002f44 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f44:	4a24      	ldr	r2, [pc, #144]	; (8002fd8 <HAL_GPIO_Init+0x304>)
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f4a:	4b23      	ldr	r3, [pc, #140]	; (8002fd8 <HAL_GPIO_Init+0x304>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	43db      	mvns	r3, r3
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	4013      	ands	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f6e:	4a1a      	ldr	r2, [pc, #104]	; (8002fd8 <HAL_GPIO_Init+0x304>)
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f74:	4b18      	ldr	r3, [pc, #96]	; (8002fd8 <HAL_GPIO_Init+0x304>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	4013      	ands	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d003      	beq.n	8002f98 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f98:	4a0f      	ldr	r2, [pc, #60]	; (8002fd8 <HAL_GPIO_Init+0x304>)
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	61fb      	str	r3, [r7, #28]
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	2b0f      	cmp	r3, #15
 8002fa8:	f67f aea2 	bls.w	8002cf0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fac:	bf00      	nop
 8002fae:	bf00      	nop
 8002fb0:	3724      	adds	r7, #36	; 0x24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	40023800 	.word	0x40023800
 8002fc0:	40013800 	.word	0x40013800
 8002fc4:	40020000 	.word	0x40020000
 8002fc8:	40020400 	.word	0x40020400
 8002fcc:	40020800 	.word	0x40020800
 8002fd0:	40020c00 	.word	0x40020c00
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	40013c00 	.word	0x40013c00

08002fdc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b087      	sub	sp, #28
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	617b      	str	r3, [r7, #20]
 8002ff6:	e0bb      	b.n	8003170 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	4013      	ands	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	429a      	cmp	r2, r3
 8003010:	f040 80ab 	bne.w	800316a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003014:	4a5c      	ldr	r2, [pc, #368]	; (8003188 <HAL_GPIO_DeInit+0x1ac>)
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	089b      	lsrs	r3, r3, #2
 800301a:	3302      	adds	r3, #2
 800301c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003020:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	f003 0303 	and.w	r3, r3, #3
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	220f      	movs	r2, #15
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	4013      	ands	r3, r2
 8003034:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a54      	ldr	r2, [pc, #336]	; (800318c <HAL_GPIO_DeInit+0x1b0>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d019      	beq.n	8003072 <HAL_GPIO_DeInit+0x96>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a53      	ldr	r2, [pc, #332]	; (8003190 <HAL_GPIO_DeInit+0x1b4>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d013      	beq.n	800306e <HAL_GPIO_DeInit+0x92>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a52      	ldr	r2, [pc, #328]	; (8003194 <HAL_GPIO_DeInit+0x1b8>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d00d      	beq.n	800306a <HAL_GPIO_DeInit+0x8e>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a51      	ldr	r2, [pc, #324]	; (8003198 <HAL_GPIO_DeInit+0x1bc>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d007      	beq.n	8003066 <HAL_GPIO_DeInit+0x8a>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a50      	ldr	r2, [pc, #320]	; (800319c <HAL_GPIO_DeInit+0x1c0>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d101      	bne.n	8003062 <HAL_GPIO_DeInit+0x86>
 800305e:	2304      	movs	r3, #4
 8003060:	e008      	b.n	8003074 <HAL_GPIO_DeInit+0x98>
 8003062:	2307      	movs	r3, #7
 8003064:	e006      	b.n	8003074 <HAL_GPIO_DeInit+0x98>
 8003066:	2303      	movs	r3, #3
 8003068:	e004      	b.n	8003074 <HAL_GPIO_DeInit+0x98>
 800306a:	2302      	movs	r3, #2
 800306c:	e002      	b.n	8003074 <HAL_GPIO_DeInit+0x98>
 800306e:	2301      	movs	r3, #1
 8003070:	e000      	b.n	8003074 <HAL_GPIO_DeInit+0x98>
 8003072:	2300      	movs	r3, #0
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	f002 0203 	and.w	r2, r2, #3
 800307a:	0092      	lsls	r2, r2, #2
 800307c:	4093      	lsls	r3, r2
 800307e:	68ba      	ldr	r2, [r7, #8]
 8003080:	429a      	cmp	r2, r3
 8003082:	d132      	bne.n	80030ea <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003084:	4b46      	ldr	r3, [pc, #280]	; (80031a0 <HAL_GPIO_DeInit+0x1c4>)
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	43db      	mvns	r3, r3
 800308c:	4944      	ldr	r1, [pc, #272]	; (80031a0 <HAL_GPIO_DeInit+0x1c4>)
 800308e:	4013      	ands	r3, r2
 8003090:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003092:	4b43      	ldr	r3, [pc, #268]	; (80031a0 <HAL_GPIO_DeInit+0x1c4>)
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	43db      	mvns	r3, r3
 800309a:	4941      	ldr	r1, [pc, #260]	; (80031a0 <HAL_GPIO_DeInit+0x1c4>)
 800309c:	4013      	ands	r3, r2
 800309e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80030a0:	4b3f      	ldr	r3, [pc, #252]	; (80031a0 <HAL_GPIO_DeInit+0x1c4>)
 80030a2:	68da      	ldr	r2, [r3, #12]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	43db      	mvns	r3, r3
 80030a8:	493d      	ldr	r1, [pc, #244]	; (80031a0 <HAL_GPIO_DeInit+0x1c4>)
 80030aa:	4013      	ands	r3, r2
 80030ac:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80030ae:	4b3c      	ldr	r3, [pc, #240]	; (80031a0 <HAL_GPIO_DeInit+0x1c4>)
 80030b0:	689a      	ldr	r2, [r3, #8]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	43db      	mvns	r3, r3
 80030b6:	493a      	ldr	r1, [pc, #232]	; (80031a0 <HAL_GPIO_DeInit+0x1c4>)
 80030b8:	4013      	ands	r3, r2
 80030ba:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	220f      	movs	r2, #15
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80030cc:	4a2e      	ldr	r2, [pc, #184]	; (8003188 <HAL_GPIO_DeInit+0x1ac>)
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	089b      	lsrs	r3, r3, #2
 80030d2:	3302      	adds	r3, #2
 80030d4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	43da      	mvns	r2, r3
 80030dc:	482a      	ldr	r0, [pc, #168]	; (8003188 <HAL_GPIO_DeInit+0x1ac>)
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	089b      	lsrs	r3, r3, #2
 80030e2:	400a      	ands	r2, r1
 80030e4:	3302      	adds	r3, #2
 80030e6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	2103      	movs	r1, #3
 80030f4:	fa01 f303 	lsl.w	r3, r1, r3
 80030f8:	43db      	mvns	r3, r3
 80030fa:	401a      	ands	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	08da      	lsrs	r2, r3, #3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3208      	adds	r2, #8
 8003108:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	220f      	movs	r2, #15
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	43db      	mvns	r3, r3
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	08d2      	lsrs	r2, r2, #3
 8003120:	4019      	ands	r1, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	3208      	adds	r2, #8
 8003126:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68da      	ldr	r2, [r3, #12]
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	2103      	movs	r1, #3
 8003134:	fa01 f303 	lsl.w	r3, r1, r3
 8003138:	43db      	mvns	r3, r3
 800313a:	401a      	ands	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	2101      	movs	r1, #1
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	fa01 f303 	lsl.w	r3, r1, r3
 800314c:	43db      	mvns	r3, r3
 800314e:	401a      	ands	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	2103      	movs	r1, #3
 800315e:	fa01 f303 	lsl.w	r3, r1, r3
 8003162:	43db      	mvns	r3, r3
 8003164:	401a      	ands	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	3301      	adds	r3, #1
 800316e:	617b      	str	r3, [r7, #20]
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	2b0f      	cmp	r3, #15
 8003174:	f67f af40 	bls.w	8002ff8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003178:	bf00      	nop
 800317a:	bf00      	nop
 800317c:	371c      	adds	r7, #28
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	40013800 	.word	0x40013800
 800318c:	40020000 	.word	0x40020000
 8003190:	40020400 	.word	0x40020400
 8003194:	40020800 	.word	0x40020800
 8003198:	40020c00 	.word	0x40020c00
 800319c:	40021000 	.word	0x40021000
 80031a0:	40013c00 	.word	0x40013c00

080031a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	460b      	mov	r3, r1
 80031ae:	807b      	strh	r3, [r7, #2]
 80031b0:	4613      	mov	r3, r2
 80031b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031b4:	787b      	ldrb	r3, [r7, #1]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031ba:	887a      	ldrh	r2, [r7, #2]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031c0:	e003      	b.n	80031ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031c2:	887b      	ldrh	r3, [r7, #2]
 80031c4:	041a      	lsls	r2, r3, #16
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	619a      	str	r2, [r3, #24]
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b085      	sub	sp, #20
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
 80031de:	460b      	mov	r3, r1
 80031e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031e8:	887a      	ldrh	r2, [r7, #2]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	4013      	ands	r3, r2
 80031ee:	041a      	lsls	r2, r3, #16
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	43d9      	mvns	r1, r3
 80031f4:	887b      	ldrh	r3, [r7, #2]
 80031f6:	400b      	ands	r3, r1
 80031f8:	431a      	orrs	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	619a      	str	r2, [r3, #24]
}
 80031fe:	bf00      	nop
 8003200:	3714      	adds	r7, #20
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
	...

0800320c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e267      	b.n	80036ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	d075      	beq.n	8003316 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800322a:	4b88      	ldr	r3, [pc, #544]	; (800344c <HAL_RCC_OscConfig+0x240>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 030c 	and.w	r3, r3, #12
 8003232:	2b04      	cmp	r3, #4
 8003234:	d00c      	beq.n	8003250 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003236:	4b85      	ldr	r3, [pc, #532]	; (800344c <HAL_RCC_OscConfig+0x240>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800323e:	2b08      	cmp	r3, #8
 8003240:	d112      	bne.n	8003268 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003242:	4b82      	ldr	r3, [pc, #520]	; (800344c <HAL_RCC_OscConfig+0x240>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800324a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800324e:	d10b      	bne.n	8003268 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003250:	4b7e      	ldr	r3, [pc, #504]	; (800344c <HAL_RCC_OscConfig+0x240>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d05b      	beq.n	8003314 <HAL_RCC_OscConfig+0x108>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d157      	bne.n	8003314 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e242      	b.n	80036ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003270:	d106      	bne.n	8003280 <HAL_RCC_OscConfig+0x74>
 8003272:	4b76      	ldr	r3, [pc, #472]	; (800344c <HAL_RCC_OscConfig+0x240>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a75      	ldr	r2, [pc, #468]	; (800344c <HAL_RCC_OscConfig+0x240>)
 8003278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800327c:	6013      	str	r3, [r2, #0]
 800327e:	e01d      	b.n	80032bc <HAL_RCC_OscConfig+0xb0>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003288:	d10c      	bne.n	80032a4 <HAL_RCC_OscConfig+0x98>
 800328a:	4b70      	ldr	r3, [pc, #448]	; (800344c <HAL_RCC_OscConfig+0x240>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a6f      	ldr	r2, [pc, #444]	; (800344c <HAL_RCC_OscConfig+0x240>)
 8003290:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003294:	6013      	str	r3, [r2, #0]
 8003296:	4b6d      	ldr	r3, [pc, #436]	; (800344c <HAL_RCC_OscConfig+0x240>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a6c      	ldr	r2, [pc, #432]	; (800344c <HAL_RCC_OscConfig+0x240>)
 800329c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a0:	6013      	str	r3, [r2, #0]
 80032a2:	e00b      	b.n	80032bc <HAL_RCC_OscConfig+0xb0>
 80032a4:	4b69      	ldr	r3, [pc, #420]	; (800344c <HAL_RCC_OscConfig+0x240>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a68      	ldr	r2, [pc, #416]	; (800344c <HAL_RCC_OscConfig+0x240>)
 80032aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ae:	6013      	str	r3, [r2, #0]
 80032b0:	4b66      	ldr	r3, [pc, #408]	; (800344c <HAL_RCC_OscConfig+0x240>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a65      	ldr	r2, [pc, #404]	; (800344c <HAL_RCC_OscConfig+0x240>)
 80032b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d013      	beq.n	80032ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c4:	f7fe fec2 	bl	800204c <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032cc:	f7fe febe 	bl	800204c <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b64      	cmp	r3, #100	; 0x64
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e207      	b.n	80036ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032de:	4b5b      	ldr	r3, [pc, #364]	; (800344c <HAL_RCC_OscConfig+0x240>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d0f0      	beq.n	80032cc <HAL_RCC_OscConfig+0xc0>
 80032ea:	e014      	b.n	8003316 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ec:	f7fe feae 	bl	800204c <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032f4:	f7fe feaa 	bl	800204c <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b64      	cmp	r3, #100	; 0x64
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e1f3      	b.n	80036ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003306:	4b51      	ldr	r3, [pc, #324]	; (800344c <HAL_RCC_OscConfig+0x240>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1f0      	bne.n	80032f4 <HAL_RCC_OscConfig+0xe8>
 8003312:	e000      	b.n	8003316 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d063      	beq.n	80033ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003322:	4b4a      	ldr	r3, [pc, #296]	; (800344c <HAL_RCC_OscConfig+0x240>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 030c 	and.w	r3, r3, #12
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00b      	beq.n	8003346 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800332e:	4b47      	ldr	r3, [pc, #284]	; (800344c <HAL_RCC_OscConfig+0x240>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003336:	2b08      	cmp	r3, #8
 8003338:	d11c      	bne.n	8003374 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800333a:	4b44      	ldr	r3, [pc, #272]	; (800344c <HAL_RCC_OscConfig+0x240>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d116      	bne.n	8003374 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003346:	4b41      	ldr	r3, [pc, #260]	; (800344c <HAL_RCC_OscConfig+0x240>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d005      	beq.n	800335e <HAL_RCC_OscConfig+0x152>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d001      	beq.n	800335e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e1c7      	b.n	80036ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800335e:	4b3b      	ldr	r3, [pc, #236]	; (800344c <HAL_RCC_OscConfig+0x240>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	4937      	ldr	r1, [pc, #220]	; (800344c <HAL_RCC_OscConfig+0x240>)
 800336e:	4313      	orrs	r3, r2
 8003370:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003372:	e03a      	b.n	80033ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d020      	beq.n	80033be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800337c:	4b34      	ldr	r3, [pc, #208]	; (8003450 <HAL_RCC_OscConfig+0x244>)
 800337e:	2201      	movs	r2, #1
 8003380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003382:	f7fe fe63 	bl	800204c <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003388:	e008      	b.n	800339c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800338a:	f7fe fe5f 	bl	800204c <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e1a8      	b.n	80036ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800339c:	4b2b      	ldr	r3, [pc, #172]	; (800344c <HAL_RCC_OscConfig+0x240>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0f0      	beq.n	800338a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a8:	4b28      	ldr	r3, [pc, #160]	; (800344c <HAL_RCC_OscConfig+0x240>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	4925      	ldr	r1, [pc, #148]	; (800344c <HAL_RCC_OscConfig+0x240>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	600b      	str	r3, [r1, #0]
 80033bc:	e015      	b.n	80033ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033be:	4b24      	ldr	r3, [pc, #144]	; (8003450 <HAL_RCC_OscConfig+0x244>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c4:	f7fe fe42 	bl	800204c <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033cc:	f7fe fe3e 	bl	800204c <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e187      	b.n	80036ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033de:	4b1b      	ldr	r3, [pc, #108]	; (800344c <HAL_RCC_OscConfig+0x240>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1f0      	bne.n	80033cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d036      	beq.n	8003464 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d016      	beq.n	800342c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033fe:	4b15      	ldr	r3, [pc, #84]	; (8003454 <HAL_RCC_OscConfig+0x248>)
 8003400:	2201      	movs	r2, #1
 8003402:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003404:	f7fe fe22 	bl	800204c <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800340c:	f7fe fe1e 	bl	800204c <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e167      	b.n	80036ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800341e:	4b0b      	ldr	r3, [pc, #44]	; (800344c <HAL_RCC_OscConfig+0x240>)
 8003420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0f0      	beq.n	800340c <HAL_RCC_OscConfig+0x200>
 800342a:	e01b      	b.n	8003464 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800342c:	4b09      	ldr	r3, [pc, #36]	; (8003454 <HAL_RCC_OscConfig+0x248>)
 800342e:	2200      	movs	r2, #0
 8003430:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003432:	f7fe fe0b 	bl	800204c <HAL_GetTick>
 8003436:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003438:	e00e      	b.n	8003458 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800343a:	f7fe fe07 	bl	800204c <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d907      	bls.n	8003458 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e150      	b.n	80036ee <HAL_RCC_OscConfig+0x4e2>
 800344c:	40023800 	.word	0x40023800
 8003450:	42470000 	.word	0x42470000
 8003454:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003458:	4b88      	ldr	r3, [pc, #544]	; (800367c <HAL_RCC_OscConfig+0x470>)
 800345a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1ea      	bne.n	800343a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 8097 	beq.w	80035a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003472:	2300      	movs	r3, #0
 8003474:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003476:	4b81      	ldr	r3, [pc, #516]	; (800367c <HAL_RCC_OscConfig+0x470>)
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10f      	bne.n	80034a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003482:	2300      	movs	r3, #0
 8003484:	60bb      	str	r3, [r7, #8]
 8003486:	4b7d      	ldr	r3, [pc, #500]	; (800367c <HAL_RCC_OscConfig+0x470>)
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	4a7c      	ldr	r2, [pc, #496]	; (800367c <HAL_RCC_OscConfig+0x470>)
 800348c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003490:	6413      	str	r3, [r2, #64]	; 0x40
 8003492:	4b7a      	ldr	r3, [pc, #488]	; (800367c <HAL_RCC_OscConfig+0x470>)
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800349a:	60bb      	str	r3, [r7, #8]
 800349c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800349e:	2301      	movs	r3, #1
 80034a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a2:	4b77      	ldr	r3, [pc, #476]	; (8003680 <HAL_RCC_OscConfig+0x474>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d118      	bne.n	80034e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034ae:	4b74      	ldr	r3, [pc, #464]	; (8003680 <HAL_RCC_OscConfig+0x474>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a73      	ldr	r2, [pc, #460]	; (8003680 <HAL_RCC_OscConfig+0x474>)
 80034b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ba:	f7fe fdc7 	bl	800204c <HAL_GetTick>
 80034be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c0:	e008      	b.n	80034d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034c2:	f7fe fdc3 	bl	800204c <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d901      	bls.n	80034d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e10c      	b.n	80036ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d4:	4b6a      	ldr	r3, [pc, #424]	; (8003680 <HAL_RCC_OscConfig+0x474>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d0f0      	beq.n	80034c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d106      	bne.n	80034f6 <HAL_RCC_OscConfig+0x2ea>
 80034e8:	4b64      	ldr	r3, [pc, #400]	; (800367c <HAL_RCC_OscConfig+0x470>)
 80034ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ec:	4a63      	ldr	r2, [pc, #396]	; (800367c <HAL_RCC_OscConfig+0x470>)
 80034ee:	f043 0301 	orr.w	r3, r3, #1
 80034f2:	6713      	str	r3, [r2, #112]	; 0x70
 80034f4:	e01c      	b.n	8003530 <HAL_RCC_OscConfig+0x324>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	2b05      	cmp	r3, #5
 80034fc:	d10c      	bne.n	8003518 <HAL_RCC_OscConfig+0x30c>
 80034fe:	4b5f      	ldr	r3, [pc, #380]	; (800367c <HAL_RCC_OscConfig+0x470>)
 8003500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003502:	4a5e      	ldr	r2, [pc, #376]	; (800367c <HAL_RCC_OscConfig+0x470>)
 8003504:	f043 0304 	orr.w	r3, r3, #4
 8003508:	6713      	str	r3, [r2, #112]	; 0x70
 800350a:	4b5c      	ldr	r3, [pc, #368]	; (800367c <HAL_RCC_OscConfig+0x470>)
 800350c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350e:	4a5b      	ldr	r2, [pc, #364]	; (800367c <HAL_RCC_OscConfig+0x470>)
 8003510:	f043 0301 	orr.w	r3, r3, #1
 8003514:	6713      	str	r3, [r2, #112]	; 0x70
 8003516:	e00b      	b.n	8003530 <HAL_RCC_OscConfig+0x324>
 8003518:	4b58      	ldr	r3, [pc, #352]	; (800367c <HAL_RCC_OscConfig+0x470>)
 800351a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351c:	4a57      	ldr	r2, [pc, #348]	; (800367c <HAL_RCC_OscConfig+0x470>)
 800351e:	f023 0301 	bic.w	r3, r3, #1
 8003522:	6713      	str	r3, [r2, #112]	; 0x70
 8003524:	4b55      	ldr	r3, [pc, #340]	; (800367c <HAL_RCC_OscConfig+0x470>)
 8003526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003528:	4a54      	ldr	r2, [pc, #336]	; (800367c <HAL_RCC_OscConfig+0x470>)
 800352a:	f023 0304 	bic.w	r3, r3, #4
 800352e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d015      	beq.n	8003564 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003538:	f7fe fd88 	bl	800204c <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800353e:	e00a      	b.n	8003556 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003540:	f7fe fd84 	bl	800204c <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	f241 3288 	movw	r2, #5000	; 0x1388
 800354e:	4293      	cmp	r3, r2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e0cb      	b.n	80036ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003556:	4b49      	ldr	r3, [pc, #292]	; (800367c <HAL_RCC_OscConfig+0x470>)
 8003558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0ee      	beq.n	8003540 <HAL_RCC_OscConfig+0x334>
 8003562:	e014      	b.n	800358e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003564:	f7fe fd72 	bl	800204c <HAL_GetTick>
 8003568:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800356a:	e00a      	b.n	8003582 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800356c:	f7fe fd6e 	bl	800204c <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	f241 3288 	movw	r2, #5000	; 0x1388
 800357a:	4293      	cmp	r3, r2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e0b5      	b.n	80036ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003582:	4b3e      	ldr	r3, [pc, #248]	; (800367c <HAL_RCC_OscConfig+0x470>)
 8003584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1ee      	bne.n	800356c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800358e:	7dfb      	ldrb	r3, [r7, #23]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d105      	bne.n	80035a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003594:	4b39      	ldr	r3, [pc, #228]	; (800367c <HAL_RCC_OscConfig+0x470>)
 8003596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003598:	4a38      	ldr	r2, [pc, #224]	; (800367c <HAL_RCC_OscConfig+0x470>)
 800359a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800359e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 80a1 	beq.w	80036ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035aa:	4b34      	ldr	r3, [pc, #208]	; (800367c <HAL_RCC_OscConfig+0x470>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 030c 	and.w	r3, r3, #12
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	d05c      	beq.n	8003670 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d141      	bne.n	8003642 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035be:	4b31      	ldr	r3, [pc, #196]	; (8003684 <HAL_RCC_OscConfig+0x478>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c4:	f7fe fd42 	bl	800204c <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035cc:	f7fe fd3e 	bl	800204c <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e087      	b.n	80036ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035de:	4b27      	ldr	r3, [pc, #156]	; (800367c <HAL_RCC_OscConfig+0x470>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f0      	bne.n	80035cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	69da      	ldr	r2, [r3, #28]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	431a      	orrs	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	019b      	lsls	r3, r3, #6
 80035fa:	431a      	orrs	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003600:	085b      	lsrs	r3, r3, #1
 8003602:	3b01      	subs	r3, #1
 8003604:	041b      	lsls	r3, r3, #16
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360c:	061b      	lsls	r3, r3, #24
 800360e:	491b      	ldr	r1, [pc, #108]	; (800367c <HAL_RCC_OscConfig+0x470>)
 8003610:	4313      	orrs	r3, r2
 8003612:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003614:	4b1b      	ldr	r3, [pc, #108]	; (8003684 <HAL_RCC_OscConfig+0x478>)
 8003616:	2201      	movs	r2, #1
 8003618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800361a:	f7fe fd17 	bl	800204c <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003620:	e008      	b.n	8003634 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003622:	f7fe fd13 	bl	800204c <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e05c      	b.n	80036ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003634:	4b11      	ldr	r3, [pc, #68]	; (800367c <HAL_RCC_OscConfig+0x470>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0f0      	beq.n	8003622 <HAL_RCC_OscConfig+0x416>
 8003640:	e054      	b.n	80036ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003642:	4b10      	ldr	r3, [pc, #64]	; (8003684 <HAL_RCC_OscConfig+0x478>)
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003648:	f7fe fd00 	bl	800204c <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003650:	f7fe fcfc 	bl	800204c <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e045      	b.n	80036ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003662:	4b06      	ldr	r3, [pc, #24]	; (800367c <HAL_RCC_OscConfig+0x470>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1f0      	bne.n	8003650 <HAL_RCC_OscConfig+0x444>
 800366e:	e03d      	b.n	80036ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d107      	bne.n	8003688 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e038      	b.n	80036ee <HAL_RCC_OscConfig+0x4e2>
 800367c:	40023800 	.word	0x40023800
 8003680:	40007000 	.word	0x40007000
 8003684:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003688:	4b1b      	ldr	r3, [pc, #108]	; (80036f8 <HAL_RCC_OscConfig+0x4ec>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d028      	beq.n	80036e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d121      	bne.n	80036e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d11a      	bne.n	80036e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036b8:	4013      	ands	r3, r2
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d111      	bne.n	80036e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ce:	085b      	lsrs	r3, r3, #1
 80036d0:	3b01      	subs	r3, #1
 80036d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d107      	bne.n	80036e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d001      	beq.n	80036ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e000      	b.n	80036ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3718      	adds	r7, #24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40023800 	.word	0x40023800

080036fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e0cc      	b.n	80038aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003710:	4b68      	ldr	r3, [pc, #416]	; (80038b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0307 	and.w	r3, r3, #7
 8003718:	683a      	ldr	r2, [r7, #0]
 800371a:	429a      	cmp	r2, r3
 800371c:	d90c      	bls.n	8003738 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800371e:	4b65      	ldr	r3, [pc, #404]	; (80038b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	b2d2      	uxtb	r2, r2
 8003724:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003726:	4b63      	ldr	r3, [pc, #396]	; (80038b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0307 	and.w	r3, r3, #7
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	429a      	cmp	r2, r3
 8003732:	d001      	beq.n	8003738 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e0b8      	b.n	80038aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d020      	beq.n	8003786 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0304 	and.w	r3, r3, #4
 800374c:	2b00      	cmp	r3, #0
 800374e:	d005      	beq.n	800375c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003750:	4b59      	ldr	r3, [pc, #356]	; (80038b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	4a58      	ldr	r2, [pc, #352]	; (80038b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003756:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800375a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0308 	and.w	r3, r3, #8
 8003764:	2b00      	cmp	r3, #0
 8003766:	d005      	beq.n	8003774 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003768:	4b53      	ldr	r3, [pc, #332]	; (80038b8 <HAL_RCC_ClockConfig+0x1bc>)
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	4a52      	ldr	r2, [pc, #328]	; (80038b8 <HAL_RCC_ClockConfig+0x1bc>)
 800376e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003772:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003774:	4b50      	ldr	r3, [pc, #320]	; (80038b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	494d      	ldr	r1, [pc, #308]	; (80038b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003782:	4313      	orrs	r3, r2
 8003784:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b00      	cmp	r3, #0
 8003790:	d044      	beq.n	800381c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d107      	bne.n	80037aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800379a:	4b47      	ldr	r3, [pc, #284]	; (80038b8 <HAL_RCC_ClockConfig+0x1bc>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d119      	bne.n	80037da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e07f      	b.n	80038aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d003      	beq.n	80037ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037b6:	2b03      	cmp	r3, #3
 80037b8:	d107      	bne.n	80037ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ba:	4b3f      	ldr	r3, [pc, #252]	; (80038b8 <HAL_RCC_ClockConfig+0x1bc>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d109      	bne.n	80037da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e06f      	b.n	80038aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ca:	4b3b      	ldr	r3, [pc, #236]	; (80038b8 <HAL_RCC_ClockConfig+0x1bc>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e067      	b.n	80038aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037da:	4b37      	ldr	r3, [pc, #220]	; (80038b8 <HAL_RCC_ClockConfig+0x1bc>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f023 0203 	bic.w	r2, r3, #3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	4934      	ldr	r1, [pc, #208]	; (80038b8 <HAL_RCC_ClockConfig+0x1bc>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037ec:	f7fe fc2e 	bl	800204c <HAL_GetTick>
 80037f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f2:	e00a      	b.n	800380a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037f4:	f7fe fc2a 	bl	800204c <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003802:	4293      	cmp	r3, r2
 8003804:	d901      	bls.n	800380a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e04f      	b.n	80038aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800380a:	4b2b      	ldr	r3, [pc, #172]	; (80038b8 <HAL_RCC_ClockConfig+0x1bc>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f003 020c 	and.w	r2, r3, #12
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	429a      	cmp	r2, r3
 800381a:	d1eb      	bne.n	80037f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800381c:	4b25      	ldr	r3, [pc, #148]	; (80038b4 <HAL_RCC_ClockConfig+0x1b8>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	d20c      	bcs.n	8003844 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800382a:	4b22      	ldr	r3, [pc, #136]	; (80038b4 <HAL_RCC_ClockConfig+0x1b8>)
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003832:	4b20      	ldr	r3, [pc, #128]	; (80038b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0307 	and.w	r3, r3, #7
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	429a      	cmp	r2, r3
 800383e:	d001      	beq.n	8003844 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e032      	b.n	80038aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0304 	and.w	r3, r3, #4
 800384c:	2b00      	cmp	r3, #0
 800384e:	d008      	beq.n	8003862 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003850:	4b19      	ldr	r3, [pc, #100]	; (80038b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	4916      	ldr	r1, [pc, #88]	; (80038b8 <HAL_RCC_ClockConfig+0x1bc>)
 800385e:	4313      	orrs	r3, r2
 8003860:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0308 	and.w	r3, r3, #8
 800386a:	2b00      	cmp	r3, #0
 800386c:	d009      	beq.n	8003882 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800386e:	4b12      	ldr	r3, [pc, #72]	; (80038b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	490e      	ldr	r1, [pc, #56]	; (80038b8 <HAL_RCC_ClockConfig+0x1bc>)
 800387e:	4313      	orrs	r3, r2
 8003880:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003882:	f000 f821 	bl	80038c8 <HAL_RCC_GetSysClockFreq>
 8003886:	4602      	mov	r2, r0
 8003888:	4b0b      	ldr	r3, [pc, #44]	; (80038b8 <HAL_RCC_ClockConfig+0x1bc>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	091b      	lsrs	r3, r3, #4
 800388e:	f003 030f 	and.w	r3, r3, #15
 8003892:	490a      	ldr	r1, [pc, #40]	; (80038bc <HAL_RCC_ClockConfig+0x1c0>)
 8003894:	5ccb      	ldrb	r3, [r1, r3]
 8003896:	fa22 f303 	lsr.w	r3, r2, r3
 800389a:	4a09      	ldr	r2, [pc, #36]	; (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 800389c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800389e:	4b09      	ldr	r3, [pc, #36]	; (80038c4 <HAL_RCC_ClockConfig+0x1c8>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fe fb8e 	bl	8001fc4 <HAL_InitTick>

  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	40023c00 	.word	0x40023c00
 80038b8:	40023800 	.word	0x40023800
 80038bc:	08009114 	.word	0x08009114
 80038c0:	20000008 	.word	0x20000008
 80038c4:	2000000c 	.word	0x2000000c

080038c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038cc:	b094      	sub	sp, #80	; 0x50
 80038ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038d0:	2300      	movs	r3, #0
 80038d2:	647b      	str	r3, [r7, #68]	; 0x44
 80038d4:	2300      	movs	r3, #0
 80038d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038d8:	2300      	movs	r3, #0
 80038da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80038dc:	2300      	movs	r3, #0
 80038de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038e0:	4b79      	ldr	r3, [pc, #484]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f003 030c 	and.w	r3, r3, #12
 80038e8:	2b08      	cmp	r3, #8
 80038ea:	d00d      	beq.n	8003908 <HAL_RCC_GetSysClockFreq+0x40>
 80038ec:	2b08      	cmp	r3, #8
 80038ee:	f200 80e1 	bhi.w	8003ab4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d002      	beq.n	80038fc <HAL_RCC_GetSysClockFreq+0x34>
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	d003      	beq.n	8003902 <HAL_RCC_GetSysClockFreq+0x3a>
 80038fa:	e0db      	b.n	8003ab4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038fc:	4b73      	ldr	r3, [pc, #460]	; (8003acc <HAL_RCC_GetSysClockFreq+0x204>)
 80038fe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003900:	e0db      	b.n	8003aba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003902:	4b73      	ldr	r3, [pc, #460]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003904:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003906:	e0d8      	b.n	8003aba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003908:	4b6f      	ldr	r3, [pc, #444]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003910:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003912:	4b6d      	ldr	r3, [pc, #436]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d063      	beq.n	80039e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800391e:	4b6a      	ldr	r3, [pc, #424]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	099b      	lsrs	r3, r3, #6
 8003924:	2200      	movs	r2, #0
 8003926:	63bb      	str	r3, [r7, #56]	; 0x38
 8003928:	63fa      	str	r2, [r7, #60]	; 0x3c
 800392a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800392c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003930:	633b      	str	r3, [r7, #48]	; 0x30
 8003932:	2300      	movs	r3, #0
 8003934:	637b      	str	r3, [r7, #52]	; 0x34
 8003936:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800393a:	4622      	mov	r2, r4
 800393c:	462b      	mov	r3, r5
 800393e:	f04f 0000 	mov.w	r0, #0
 8003942:	f04f 0100 	mov.w	r1, #0
 8003946:	0159      	lsls	r1, r3, #5
 8003948:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800394c:	0150      	lsls	r0, r2, #5
 800394e:	4602      	mov	r2, r0
 8003950:	460b      	mov	r3, r1
 8003952:	4621      	mov	r1, r4
 8003954:	1a51      	subs	r1, r2, r1
 8003956:	6139      	str	r1, [r7, #16]
 8003958:	4629      	mov	r1, r5
 800395a:	eb63 0301 	sbc.w	r3, r3, r1
 800395e:	617b      	str	r3, [r7, #20]
 8003960:	f04f 0200 	mov.w	r2, #0
 8003964:	f04f 0300 	mov.w	r3, #0
 8003968:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800396c:	4659      	mov	r1, fp
 800396e:	018b      	lsls	r3, r1, #6
 8003970:	4651      	mov	r1, sl
 8003972:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003976:	4651      	mov	r1, sl
 8003978:	018a      	lsls	r2, r1, #6
 800397a:	4651      	mov	r1, sl
 800397c:	ebb2 0801 	subs.w	r8, r2, r1
 8003980:	4659      	mov	r1, fp
 8003982:	eb63 0901 	sbc.w	r9, r3, r1
 8003986:	f04f 0200 	mov.w	r2, #0
 800398a:	f04f 0300 	mov.w	r3, #0
 800398e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003992:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003996:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800399a:	4690      	mov	r8, r2
 800399c:	4699      	mov	r9, r3
 800399e:	4623      	mov	r3, r4
 80039a0:	eb18 0303 	adds.w	r3, r8, r3
 80039a4:	60bb      	str	r3, [r7, #8]
 80039a6:	462b      	mov	r3, r5
 80039a8:	eb49 0303 	adc.w	r3, r9, r3
 80039ac:	60fb      	str	r3, [r7, #12]
 80039ae:	f04f 0200 	mov.w	r2, #0
 80039b2:	f04f 0300 	mov.w	r3, #0
 80039b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80039ba:	4629      	mov	r1, r5
 80039bc:	024b      	lsls	r3, r1, #9
 80039be:	4621      	mov	r1, r4
 80039c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039c4:	4621      	mov	r1, r4
 80039c6:	024a      	lsls	r2, r1, #9
 80039c8:	4610      	mov	r0, r2
 80039ca:	4619      	mov	r1, r3
 80039cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039ce:	2200      	movs	r2, #0
 80039d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80039d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039d8:	f7fc fc52 	bl	8000280 <__aeabi_uldivmod>
 80039dc:	4602      	mov	r2, r0
 80039de:	460b      	mov	r3, r1
 80039e0:	4613      	mov	r3, r2
 80039e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039e4:	e058      	b.n	8003a98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039e6:	4b38      	ldr	r3, [pc, #224]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	099b      	lsrs	r3, r3, #6
 80039ec:	2200      	movs	r2, #0
 80039ee:	4618      	mov	r0, r3
 80039f0:	4611      	mov	r1, r2
 80039f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80039f6:	623b      	str	r3, [r7, #32]
 80039f8:	2300      	movs	r3, #0
 80039fa:	627b      	str	r3, [r7, #36]	; 0x24
 80039fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a00:	4642      	mov	r2, r8
 8003a02:	464b      	mov	r3, r9
 8003a04:	f04f 0000 	mov.w	r0, #0
 8003a08:	f04f 0100 	mov.w	r1, #0
 8003a0c:	0159      	lsls	r1, r3, #5
 8003a0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a12:	0150      	lsls	r0, r2, #5
 8003a14:	4602      	mov	r2, r0
 8003a16:	460b      	mov	r3, r1
 8003a18:	4641      	mov	r1, r8
 8003a1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a1e:	4649      	mov	r1, r9
 8003a20:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a24:	f04f 0200 	mov.w	r2, #0
 8003a28:	f04f 0300 	mov.w	r3, #0
 8003a2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a38:	ebb2 040a 	subs.w	r4, r2, sl
 8003a3c:	eb63 050b 	sbc.w	r5, r3, fp
 8003a40:	f04f 0200 	mov.w	r2, #0
 8003a44:	f04f 0300 	mov.w	r3, #0
 8003a48:	00eb      	lsls	r3, r5, #3
 8003a4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a4e:	00e2      	lsls	r2, r4, #3
 8003a50:	4614      	mov	r4, r2
 8003a52:	461d      	mov	r5, r3
 8003a54:	4643      	mov	r3, r8
 8003a56:	18e3      	adds	r3, r4, r3
 8003a58:	603b      	str	r3, [r7, #0]
 8003a5a:	464b      	mov	r3, r9
 8003a5c:	eb45 0303 	adc.w	r3, r5, r3
 8003a60:	607b      	str	r3, [r7, #4]
 8003a62:	f04f 0200 	mov.w	r2, #0
 8003a66:	f04f 0300 	mov.w	r3, #0
 8003a6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a6e:	4629      	mov	r1, r5
 8003a70:	028b      	lsls	r3, r1, #10
 8003a72:	4621      	mov	r1, r4
 8003a74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a78:	4621      	mov	r1, r4
 8003a7a:	028a      	lsls	r2, r1, #10
 8003a7c:	4610      	mov	r0, r2
 8003a7e:	4619      	mov	r1, r3
 8003a80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a82:	2200      	movs	r2, #0
 8003a84:	61bb      	str	r3, [r7, #24]
 8003a86:	61fa      	str	r2, [r7, #28]
 8003a88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a8c:	f7fc fbf8 	bl	8000280 <__aeabi_uldivmod>
 8003a90:	4602      	mov	r2, r0
 8003a92:	460b      	mov	r3, r1
 8003a94:	4613      	mov	r3, r2
 8003a96:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a98:	4b0b      	ldr	r3, [pc, #44]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	0c1b      	lsrs	r3, r3, #16
 8003a9e:	f003 0303 	and.w	r3, r3, #3
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	005b      	lsls	r3, r3, #1
 8003aa6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003aa8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003aaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ab2:	e002      	b.n	8003aba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ab4:	4b05      	ldr	r3, [pc, #20]	; (8003acc <HAL_RCC_GetSysClockFreq+0x204>)
 8003ab6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ab8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3750      	adds	r7, #80	; 0x50
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ac6:	bf00      	nop
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	00f42400 	.word	0x00f42400
 8003ad0:	007a1200 	.word	0x007a1200

08003ad4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ad8:	4b03      	ldr	r3, [pc, #12]	; (8003ae8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ada:	681b      	ldr	r3, [r3, #0]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	20000008 	.word	0x20000008

08003aec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003af0:	f7ff fff0 	bl	8003ad4 <HAL_RCC_GetHCLKFreq>
 8003af4:	4602      	mov	r2, r0
 8003af6:	4b05      	ldr	r3, [pc, #20]	; (8003b0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	0a9b      	lsrs	r3, r3, #10
 8003afc:	f003 0307 	and.w	r3, r3, #7
 8003b00:	4903      	ldr	r1, [pc, #12]	; (8003b10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b02:	5ccb      	ldrb	r3, [r1, r3]
 8003b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	40023800 	.word	0x40023800
 8003b10:	08009124 	.word	0x08009124

08003b14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b18:	f7ff ffdc 	bl	8003ad4 <HAL_RCC_GetHCLKFreq>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	4b05      	ldr	r3, [pc, #20]	; (8003b34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	0b5b      	lsrs	r3, r3, #13
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	4903      	ldr	r1, [pc, #12]	; (8003b38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b2a:	5ccb      	ldrb	r3, [r1, r3]
 8003b2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	40023800 	.word	0x40023800
 8003b38:	08009124 	.word	0x08009124

08003b3c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003b42:	f7fe fa83 	bl	800204c <HAL_GetTick>
 8003b46:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003b48:	4b5d      	ldr	r3, [pc, #372]	; (8003cc0 <HAL_RCC_DeInit+0x184>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a5c      	ldr	r2, [pc, #368]	; (8003cc0 <HAL_RCC_DeInit+0x184>)
 8003b4e:	f043 0301 	orr.w	r3, r3, #1
 8003b52:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003b54:	e008      	b.n	8003b68 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b56:	f7fe fa79 	bl	800204c <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e0a7      	b.n	8003cb8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003b68:	4b55      	ldr	r3, [pc, #340]	; (8003cc0 <HAL_RCC_DeInit+0x184>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d0f0      	beq.n	8003b56 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8003b74:	4b52      	ldr	r3, [pc, #328]	; (8003cc0 <HAL_RCC_DeInit+0x184>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a51      	ldr	r2, [pc, #324]	; (8003cc0 <HAL_RCC_DeInit+0x184>)
 8003b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b7e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003b80:	f7fe fa64 	bl	800204c <HAL_GetTick>
 8003b84:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8003b86:	4b4e      	ldr	r3, [pc, #312]	; (8003cc0 <HAL_RCC_DeInit+0x184>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003b8c:	e00a      	b.n	8003ba4 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b8e:	f7fe fa5d 	bl	800204c <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e089      	b.n	8003cb8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003ba4:	4b46      	ldr	r3, [pc, #280]	; (8003cc0 <HAL_RCC_DeInit+0x184>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f003 030c 	and.w	r3, r3, #12
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1ee      	bne.n	8003b8e <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003bb0:	f7fe fa4c 	bl	800204c <HAL_GetTick>
 8003bb4:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8003bb6:	4b42      	ldr	r3, [pc, #264]	; (8003cc0 <HAL_RCC_DeInit+0x184>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a41      	ldr	r2, [pc, #260]	; (8003cc0 <HAL_RCC_DeInit+0x184>)
 8003bbc:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8003bc0:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bc4:	f7fe fa42 	bl	800204c <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b64      	cmp	r3, #100	; 0x64
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e070      	b.n	8003cb8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003bd6:	4b3a      	ldr	r3, [pc, #232]	; (8003cc0 <HAL_RCC_DeInit+0x184>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1f0      	bne.n	8003bc4 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003be2:	f7fe fa33 	bl	800204c <HAL_GetTick>
 8003be6:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003be8:	4b35      	ldr	r3, [pc, #212]	; (8003cc0 <HAL_RCC_DeInit+0x184>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a34      	ldr	r2, [pc, #208]	; (8003cc0 <HAL_RCC_DeInit+0x184>)
 8003bee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bf2:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003bf4:	e008      	b.n	8003c08 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bf6:	f7fe fa29 	bl	800204c <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d901      	bls.n	8003c08 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e057      	b.n	8003cb8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003c08:	4b2d      	ldr	r3, [pc, #180]	; (8003cc0 <HAL_RCC_DeInit+0x184>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1f0      	bne.n	8003bf6 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003c14:	f7fe fa1a 	bl	800204c <HAL_GetTick>
 8003c18:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8003c1a:	4b29      	ldr	r3, [pc, #164]	; (8003cc0 <HAL_RCC_DeInit+0x184>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a28      	ldr	r2, [pc, #160]	; (8003cc0 <HAL_RCC_DeInit+0x184>)
 8003c20:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c24:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c28:	f7fe fa10 	bl	800204c <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e03e      	b.n	8003cb8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003c3a:	4b21      	ldr	r3, [pc, #132]	; (8003cc0 <HAL_RCC_DeInit+0x184>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1f0      	bne.n	8003c28 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8003c46:	4b1e      	ldr	r3, [pc, #120]	; (8003cc0 <HAL_RCC_DeInit+0x184>)
 8003c48:	4a1e      	ldr	r2, [pc, #120]	; (8003cc4 <HAL_RCC_DeInit+0x188>)
 8003c4a:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8003c4c:	4b1c      	ldr	r3, [pc, #112]	; (8003cc0 <HAL_RCC_DeInit+0x184>)
 8003c4e:	4a1e      	ldr	r2, [pc, #120]	; (8003cc8 <HAL_RCC_DeInit+0x18c>)
 8003c50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8003c54:	4b1a      	ldr	r3, [pc, #104]	; (8003cc0 <HAL_RCC_DeInit+0x184>)
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	4a19      	ldr	r2, [pc, #100]	; (8003cc0 <HAL_RCC_DeInit+0x184>)
 8003c5a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003c5e:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8003c60:	4b17      	ldr	r3, [pc, #92]	; (8003cc0 <HAL_RCC_DeInit+0x184>)
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	4a16      	ldr	r2, [pc, #88]	; (8003cc0 <HAL_RCC_DeInit+0x184>)
 8003c66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c6a:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8003c6c:	4b14      	ldr	r3, [pc, #80]	; (8003cc0 <HAL_RCC_DeInit+0x184>)
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	4a13      	ldr	r2, [pc, #76]	; (8003cc0 <HAL_RCC_DeInit+0x184>)
 8003c72:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8003c76:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8003c78:	4b11      	ldr	r3, [pc, #68]	; (8003cc0 <HAL_RCC_DeInit+0x184>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	4a10      	ldr	r2, [pc, #64]	; (8003cc0 <HAL_RCC_DeInit+0x184>)
 8003c7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c82:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003c84:	4b0e      	ldr	r3, [pc, #56]	; (8003cc0 <HAL_RCC_DeInit+0x184>)
 8003c86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c88:	4a0d      	ldr	r2, [pc, #52]	; (8003cc0 <HAL_RCC_DeInit+0x184>)
 8003c8a:	f023 0301 	bic.w	r3, r3, #1
 8003c8e:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8003c90:	4b0b      	ldr	r3, [pc, #44]	; (8003cc0 <HAL_RCC_DeInit+0x184>)
 8003c92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c94:	4a0a      	ldr	r2, [pc, #40]	; (8003cc0 <HAL_RCC_DeInit+0x184>)
 8003c96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c9a:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8003c9c:	4b0b      	ldr	r3, [pc, #44]	; (8003ccc <HAL_RCC_DeInit+0x190>)
 8003c9e:	4a0c      	ldr	r2, [pc, #48]	; (8003cd0 <HAL_RCC_DeInit+0x194>)
 8003ca0:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8003ca2:	4b0c      	ldr	r3, [pc, #48]	; (8003cd4 <HAL_RCC_DeInit+0x198>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7fe f98c 	bl	8001fc4 <HAL_InitTick>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e000      	b.n	8003cb8 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
  }
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3708      	adds	r7, #8
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	40023800 	.word	0x40023800
 8003cc4:	04003010 	.word	0x04003010
 8003cc8:	20003000 	.word	0x20003000
 8003ccc:	20000008 	.word	0x20000008
 8003cd0:	00f42400 	.word	0x00f42400
 8003cd4:	2000000c 	.word	0x2000000c

08003cd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e07b      	b.n	8003de2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d108      	bne.n	8003d04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cfa:	d009      	beq.n	8003d10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	61da      	str	r2, [r3, #28]
 8003d02:	e005      	b.n	8003d10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d106      	bne.n	8003d30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7fd feb2 	bl	8001a94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2202      	movs	r2, #2
 8003d34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d46:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d62:	431a      	orrs	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	431a      	orrs	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	431a      	orrs	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d80:	431a      	orrs	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d94:	ea42 0103 	orr.w	r1, r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	0c1b      	lsrs	r3, r3, #16
 8003dae:	f003 0104 	and.w	r1, r3, #4
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db6:	f003 0210 	and.w	r2, r3, #16
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	69da      	ldr	r2, [r3, #28]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dd0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b088      	sub	sp, #32
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	60f8      	str	r0, [r7, #12]
 8003df2:	60b9      	str	r1, [r7, #8]
 8003df4:	603b      	str	r3, [r7, #0]
 8003df6:	4613      	mov	r3, r2
 8003df8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d101      	bne.n	8003e0c <HAL_SPI_Transmit+0x22>
 8003e08:	2302      	movs	r3, #2
 8003e0a:	e126      	b.n	800405a <HAL_SPI_Transmit+0x270>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e14:	f7fe f91a 	bl	800204c <HAL_GetTick>
 8003e18:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003e1a:	88fb      	ldrh	r3, [r7, #6]
 8003e1c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d002      	beq.n	8003e30 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e2e:	e10b      	b.n	8004048 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d002      	beq.n	8003e3c <HAL_SPI_Transmit+0x52>
 8003e36:	88fb      	ldrh	r3, [r7, #6]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d102      	bne.n	8003e42 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e40:	e102      	b.n	8004048 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2203      	movs	r2, #3
 8003e46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	88fa      	ldrh	r2, [r7, #6]
 8003e5a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	88fa      	ldrh	r2, [r7, #6]
 8003e60:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e88:	d10f      	bne.n	8003eaa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e98:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ea8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb4:	2b40      	cmp	r3, #64	; 0x40
 8003eb6:	d007      	beq.n	8003ec8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ec6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ed0:	d14b      	bne.n	8003f6a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d002      	beq.n	8003ee0 <HAL_SPI_Transmit+0xf6>
 8003eda:	8afb      	ldrh	r3, [r7, #22]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d13e      	bne.n	8003f5e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee4:	881a      	ldrh	r2, [r3, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef0:	1c9a      	adds	r2, r3, #2
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	3b01      	subs	r3, #1
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f04:	e02b      	b.n	8003f5e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d112      	bne.n	8003f3a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f18:	881a      	ldrh	r2, [r3, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f24:	1c9a      	adds	r2, r3, #2
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	3b01      	subs	r3, #1
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	86da      	strh	r2, [r3, #54]	; 0x36
 8003f38:	e011      	b.n	8003f5e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f3a:	f7fe f887 	bl	800204c <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	683a      	ldr	r2, [r7, #0]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d803      	bhi.n	8003f52 <HAL_SPI_Transmit+0x168>
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f50:	d102      	bne.n	8003f58 <HAL_SPI_Transmit+0x16e>
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d102      	bne.n	8003f5e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f5c:	e074      	b.n	8004048 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1ce      	bne.n	8003f06 <HAL_SPI_Transmit+0x11c>
 8003f68:	e04c      	b.n	8004004 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d002      	beq.n	8003f78 <HAL_SPI_Transmit+0x18e>
 8003f72:	8afb      	ldrh	r3, [r7, #22]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d140      	bne.n	8003ffa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	330c      	adds	r3, #12
 8003f82:	7812      	ldrb	r2, [r2, #0]
 8003f84:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8a:	1c5a      	adds	r2, r3, #1
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	3b01      	subs	r3, #1
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003f9e:	e02c      	b.n	8003ffa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d113      	bne.n	8003fd6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	330c      	adds	r3, #12
 8003fb8:	7812      	ldrb	r2, [r2, #0]
 8003fba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc0:	1c5a      	adds	r2, r3, #1
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	86da      	strh	r2, [r3, #54]	; 0x36
 8003fd4:	e011      	b.n	8003ffa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fd6:	f7fe f839 	bl	800204c <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	683a      	ldr	r2, [r7, #0]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d803      	bhi.n	8003fee <HAL_SPI_Transmit+0x204>
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fec:	d102      	bne.n	8003ff4 <HAL_SPI_Transmit+0x20a>
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d102      	bne.n	8003ffa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ff8:	e026      	b.n	8004048 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1cd      	bne.n	8003fa0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	6839      	ldr	r1, [r7, #0]
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f000 fa63 	bl	80044d4 <SPI_EndRxTxTransaction>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d002      	beq.n	800401a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2220      	movs	r2, #32
 8004018:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10a      	bne.n	8004038 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004022:	2300      	movs	r3, #0
 8004024:	613b      	str	r3, [r7, #16]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	613b      	str	r3, [r7, #16]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	613b      	str	r3, [r7, #16]
 8004036:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800403c:	2b00      	cmp	r3, #0
 800403e:	d002      	beq.n	8004046 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	77fb      	strb	r3, [r7, #31]
 8004044:	e000      	b.n	8004048 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004046:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004058:	7ffb      	ldrb	r3, [r7, #31]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3720      	adds	r7, #32
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b08c      	sub	sp, #48	; 0x30
 8004066:	af00      	add	r7, sp, #0
 8004068:	60f8      	str	r0, [r7, #12]
 800406a:	60b9      	str	r1, [r7, #8]
 800406c:	607a      	str	r2, [r7, #4]
 800406e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004070:	2301      	movs	r3, #1
 8004072:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004074:	2300      	movs	r3, #0
 8004076:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004080:	2b01      	cmp	r3, #1
 8004082:	d101      	bne.n	8004088 <HAL_SPI_TransmitReceive+0x26>
 8004084:	2302      	movs	r3, #2
 8004086:	e18a      	b.n	800439e <HAL_SPI_TransmitReceive+0x33c>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004090:	f7fd ffdc 	bl	800204c <HAL_GetTick>
 8004094:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800409c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80040a6:	887b      	ldrh	r3, [r7, #2]
 80040a8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80040aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d00f      	beq.n	80040d2 <HAL_SPI_TransmitReceive+0x70>
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040b8:	d107      	bne.n	80040ca <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d103      	bne.n	80040ca <HAL_SPI_TransmitReceive+0x68>
 80040c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040c6:	2b04      	cmp	r3, #4
 80040c8:	d003      	beq.n	80040d2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80040ca:	2302      	movs	r3, #2
 80040cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80040d0:	e15b      	b.n	800438a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d005      	beq.n	80040e4 <HAL_SPI_TransmitReceive+0x82>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d002      	beq.n	80040e4 <HAL_SPI_TransmitReceive+0x82>
 80040de:	887b      	ldrh	r3, [r7, #2]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d103      	bne.n	80040ec <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80040ea:	e14e      	b.n	800438a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	2b04      	cmp	r3, #4
 80040f6:	d003      	beq.n	8004100 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2205      	movs	r2, #5
 80040fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	887a      	ldrh	r2, [r7, #2]
 8004110:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	887a      	ldrh	r2, [r7, #2]
 8004116:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	887a      	ldrh	r2, [r7, #2]
 8004122:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	887a      	ldrh	r2, [r7, #2]
 8004128:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004140:	2b40      	cmp	r3, #64	; 0x40
 8004142:	d007      	beq.n	8004154 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004152:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800415c:	d178      	bne.n	8004250 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d002      	beq.n	800416c <HAL_SPI_TransmitReceive+0x10a>
 8004166:	8b7b      	ldrh	r3, [r7, #26]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d166      	bne.n	800423a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004170:	881a      	ldrh	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417c:	1c9a      	adds	r2, r3, #2
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004186:	b29b      	uxth	r3, r3
 8004188:	3b01      	subs	r3, #1
 800418a:	b29a      	uxth	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004190:	e053      	b.n	800423a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b02      	cmp	r3, #2
 800419e:	d11b      	bne.n	80041d8 <HAL_SPI_TransmitReceive+0x176>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d016      	beq.n	80041d8 <HAL_SPI_TransmitReceive+0x176>
 80041aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d113      	bne.n	80041d8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b4:	881a      	ldrh	r2, [r3, #0]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c0:	1c9a      	adds	r2, r3, #2
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	3b01      	subs	r3, #1
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041d4:	2300      	movs	r3, #0
 80041d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d119      	bne.n	800421a <HAL_SPI_TransmitReceive+0x1b8>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d014      	beq.n	800421a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68da      	ldr	r2, [r3, #12]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fa:	b292      	uxth	r2, r2
 80041fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004202:	1c9a      	adds	r2, r3, #2
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800420c:	b29b      	uxth	r3, r3
 800420e:	3b01      	subs	r3, #1
 8004210:	b29a      	uxth	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004216:	2301      	movs	r3, #1
 8004218:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800421a:	f7fd ff17 	bl	800204c <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004226:	429a      	cmp	r2, r3
 8004228:	d807      	bhi.n	800423a <HAL_SPI_TransmitReceive+0x1d8>
 800422a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800422c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004230:	d003      	beq.n	800423a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004238:	e0a7      	b.n	800438a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800423e:	b29b      	uxth	r3, r3
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1a6      	bne.n	8004192 <HAL_SPI_TransmitReceive+0x130>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004248:	b29b      	uxth	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1a1      	bne.n	8004192 <HAL_SPI_TransmitReceive+0x130>
 800424e:	e07c      	b.n	800434a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d002      	beq.n	800425e <HAL_SPI_TransmitReceive+0x1fc>
 8004258:	8b7b      	ldrh	r3, [r7, #26]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d16b      	bne.n	8004336 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	330c      	adds	r3, #12
 8004268:	7812      	ldrb	r2, [r2, #0]
 800426a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004270:	1c5a      	adds	r2, r3, #1
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800427a:	b29b      	uxth	r3, r3
 800427c:	3b01      	subs	r3, #1
 800427e:	b29a      	uxth	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004284:	e057      	b.n	8004336 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b02      	cmp	r3, #2
 8004292:	d11c      	bne.n	80042ce <HAL_SPI_TransmitReceive+0x26c>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004298:	b29b      	uxth	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d017      	beq.n	80042ce <HAL_SPI_TransmitReceive+0x26c>
 800429e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d114      	bne.n	80042ce <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	330c      	adds	r3, #12
 80042ae:	7812      	ldrb	r2, [r2, #0]
 80042b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b6:	1c5a      	adds	r2, r3, #1
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	3b01      	subs	r3, #1
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042ca:	2300      	movs	r3, #0
 80042cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d119      	bne.n	8004310 <HAL_SPI_TransmitReceive+0x2ae>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d014      	beq.n	8004310 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68da      	ldr	r2, [r3, #12]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f0:	b2d2      	uxtb	r2, r2
 80042f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f8:	1c5a      	adds	r2, r3, #1
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004302:	b29b      	uxth	r3, r3
 8004304:	3b01      	subs	r3, #1
 8004306:	b29a      	uxth	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800430c:	2301      	movs	r3, #1
 800430e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004310:	f7fd fe9c 	bl	800204c <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800431c:	429a      	cmp	r2, r3
 800431e:	d803      	bhi.n	8004328 <HAL_SPI_TransmitReceive+0x2c6>
 8004320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004326:	d102      	bne.n	800432e <HAL_SPI_TransmitReceive+0x2cc>
 8004328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800432a:	2b00      	cmp	r3, #0
 800432c:	d103      	bne.n	8004336 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004334:	e029      	b.n	800438a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800433a:	b29b      	uxth	r3, r3
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1a2      	bne.n	8004286 <HAL_SPI_TransmitReceive+0x224>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004344:	b29b      	uxth	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d19d      	bne.n	8004286 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800434a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800434c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f000 f8c0 	bl	80044d4 <SPI_EndRxTxTransaction>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d006      	beq.n	8004368 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2220      	movs	r2, #32
 8004364:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004366:	e010      	b.n	800438a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10b      	bne.n	8004388 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004370:	2300      	movs	r3, #0
 8004372:	617b      	str	r3, [r7, #20]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	617b      	str	r3, [r7, #20]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	617b      	str	r3, [r7, #20]
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	e000      	b.n	800438a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004388:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800439a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3730      	adds	r7, #48	; 0x30
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80043a6:	b480      	push	{r7}
 80043a8:	b083      	sub	sp, #12
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043b4:	b2db      	uxtb	r3, r3
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
	...

080043c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b088      	sub	sp, #32
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	603b      	str	r3, [r7, #0]
 80043d0:	4613      	mov	r3, r2
 80043d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80043d4:	f7fd fe3a 	bl	800204c <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043dc:	1a9b      	subs	r3, r3, r2
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	4413      	add	r3, r2
 80043e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80043e4:	f7fd fe32 	bl	800204c <HAL_GetTick>
 80043e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80043ea:	4b39      	ldr	r3, [pc, #228]	; (80044d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	015b      	lsls	r3, r3, #5
 80043f0:	0d1b      	lsrs	r3, r3, #20
 80043f2:	69fa      	ldr	r2, [r7, #28]
 80043f4:	fb02 f303 	mul.w	r3, r2, r3
 80043f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043fa:	e054      	b.n	80044a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004402:	d050      	beq.n	80044a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004404:	f7fd fe22 	bl	800204c <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	69fa      	ldr	r2, [r7, #28]
 8004410:	429a      	cmp	r2, r3
 8004412:	d902      	bls.n	800441a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d13d      	bne.n	8004496 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004428:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004432:	d111      	bne.n	8004458 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800443c:	d004      	beq.n	8004448 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004446:	d107      	bne.n	8004458 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004456:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004460:	d10f      	bne.n	8004482 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004470:	601a      	str	r2, [r3, #0]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004480:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e017      	b.n	80044c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d101      	bne.n	80044a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800449c:	2300      	movs	r3, #0
 800449e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	3b01      	subs	r3, #1
 80044a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	689a      	ldr	r2, [r3, #8]
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	4013      	ands	r3, r2
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	bf0c      	ite	eq
 80044b6:	2301      	moveq	r3, #1
 80044b8:	2300      	movne	r3, #0
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	461a      	mov	r2, r3
 80044be:	79fb      	ldrb	r3, [r7, #7]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d19b      	bne.n	80043fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3720      	adds	r7, #32
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	20000008 	.word	0x20000008

080044d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b088      	sub	sp, #32
 80044d8:	af02      	add	r7, sp, #8
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80044e0:	4b1b      	ldr	r3, [pc, #108]	; (8004550 <SPI_EndRxTxTransaction+0x7c>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a1b      	ldr	r2, [pc, #108]	; (8004554 <SPI_EndRxTxTransaction+0x80>)
 80044e6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ea:	0d5b      	lsrs	r3, r3, #21
 80044ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80044f0:	fb02 f303 	mul.w	r3, r2, r3
 80044f4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044fe:	d112      	bne.n	8004526 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	2200      	movs	r2, #0
 8004508:	2180      	movs	r1, #128	; 0x80
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f7ff ff5a 	bl	80043c4 <SPI_WaitFlagStateUntilTimeout>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d016      	beq.n	8004544 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800451a:	f043 0220 	orr.w	r2, r3, #32
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e00f      	b.n	8004546 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00a      	beq.n	8004542 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	3b01      	subs	r3, #1
 8004530:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800453c:	2b80      	cmp	r3, #128	; 0x80
 800453e:	d0f2      	beq.n	8004526 <SPI_EndRxTxTransaction+0x52>
 8004540:	e000      	b.n	8004544 <SPI_EndRxTxTransaction+0x70>
        break;
 8004542:	bf00      	nop
  }

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3718      	adds	r7, #24
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	20000008 	.word	0x20000008
 8004554:	165e9f81 	.word	0x165e9f81

08004558 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e03f      	b.n	80045ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d106      	bne.n	8004584 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7fd fc3a 	bl	8001df8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2224      	movs	r2, #36	; 0x24
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68da      	ldr	r2, [r3, #12]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800459a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f957 	bl	8004850 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	691a      	ldr	r2, [r3, #16]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	695a      	ldr	r2, [r3, #20]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68da      	ldr	r2, [r3, #12]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2220      	movs	r2, #32
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2220      	movs	r2, #32
 80045e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b082      	sub	sp, #8
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d101      	bne.n	8004604 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e021      	b.n	8004648 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2224      	movs	r2, #36	; 0x24
 8004608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68da      	ldr	r2, [r3, #12]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800461a:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f7fd fc33 	bl	8001e88 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3708      	adds	r7, #8
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b08a      	sub	sp, #40	; 0x28
 8004654:	af02      	add	r7, sp, #8
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	603b      	str	r3, [r7, #0]
 800465c:	4613      	mov	r3, r2
 800465e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004660:	2300      	movs	r3, #0
 8004662:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800466a:	b2db      	uxtb	r3, r3
 800466c:	2b20      	cmp	r3, #32
 800466e:	d17c      	bne.n	800476a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d002      	beq.n	800467c <HAL_UART_Transmit+0x2c>
 8004676:	88fb      	ldrh	r3, [r7, #6]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d101      	bne.n	8004680 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e075      	b.n	800476c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004686:	2b01      	cmp	r3, #1
 8004688:	d101      	bne.n	800468e <HAL_UART_Transmit+0x3e>
 800468a:	2302      	movs	r3, #2
 800468c:	e06e      	b.n	800476c <HAL_UART_Transmit+0x11c>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2221      	movs	r2, #33	; 0x21
 80046a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046a4:	f7fd fcd2 	bl	800204c <HAL_GetTick>
 80046a8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	88fa      	ldrh	r2, [r7, #6]
 80046ae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	88fa      	ldrh	r2, [r7, #6]
 80046b4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046be:	d108      	bne.n	80046d2 <HAL_UART_Transmit+0x82>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d104      	bne.n	80046d2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80046c8:	2300      	movs	r3, #0
 80046ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	61bb      	str	r3, [r7, #24]
 80046d0:	e003      	b.n	80046da <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046d6:	2300      	movs	r3, #0
 80046d8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80046e2:	e02a      	b.n	800473a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	9300      	str	r3, [sp, #0]
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	2200      	movs	r2, #0
 80046ec:	2180      	movs	r1, #128	; 0x80
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f000 f840 	bl	8004774 <UART_WaitOnFlagUntilTimeout>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e036      	b.n	800476c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d10b      	bne.n	800471c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	881b      	ldrh	r3, [r3, #0]
 8004708:	461a      	mov	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004712:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	3302      	adds	r3, #2
 8004718:	61bb      	str	r3, [r7, #24]
 800471a:	e007      	b.n	800472c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	781a      	ldrb	r2, [r3, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	3301      	adds	r3, #1
 800472a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004730:	b29b      	uxth	r3, r3
 8004732:	3b01      	subs	r3, #1
 8004734:	b29a      	uxth	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800473e:	b29b      	uxth	r3, r3
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1cf      	bne.n	80046e4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	9300      	str	r3, [sp, #0]
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	2200      	movs	r2, #0
 800474c:	2140      	movs	r1, #64	; 0x40
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f000 f810 	bl	8004774 <UART_WaitOnFlagUntilTimeout>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e006      	b.n	800476c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2220      	movs	r2, #32
 8004762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004766:	2300      	movs	r3, #0
 8004768:	e000      	b.n	800476c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800476a:	2302      	movs	r3, #2
  }
}
 800476c:	4618      	mov	r0, r3
 800476e:	3720      	adds	r7, #32
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b090      	sub	sp, #64	; 0x40
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	603b      	str	r3, [r7, #0]
 8004780:	4613      	mov	r3, r2
 8004782:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004784:	e050      	b.n	8004828 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004786:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800478c:	d04c      	beq.n	8004828 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800478e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004790:	2b00      	cmp	r3, #0
 8004792:	d007      	beq.n	80047a4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004794:	f7fd fc5a 	bl	800204c <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d241      	bcs.n	8004828 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	330c      	adds	r3, #12
 80047aa:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ae:	e853 3f00 	ldrex	r3, [r3]
 80047b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	330c      	adds	r3, #12
 80047c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047c4:	637a      	str	r2, [r7, #52]	; 0x34
 80047c6:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047cc:	e841 2300 	strex	r3, r2, [r1]
 80047d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80047d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1e5      	bne.n	80047a4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	3314      	adds	r3, #20
 80047de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	e853 3f00 	ldrex	r3, [r3]
 80047e6:	613b      	str	r3, [r7, #16]
   return(result);
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	f023 0301 	bic.w	r3, r3, #1
 80047ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	3314      	adds	r3, #20
 80047f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047f8:	623a      	str	r2, [r7, #32]
 80047fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fc:	69f9      	ldr	r1, [r7, #28]
 80047fe:	6a3a      	ldr	r2, [r7, #32]
 8004800:	e841 2300 	strex	r3, r2, [r1]
 8004804:	61bb      	str	r3, [r7, #24]
   return(result);
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1e5      	bne.n	80047d8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2220      	movs	r2, #32
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2220      	movs	r2, #32
 8004818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e00f      	b.n	8004848 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	4013      	ands	r3, r2
 8004832:	68ba      	ldr	r2, [r7, #8]
 8004834:	429a      	cmp	r2, r3
 8004836:	bf0c      	ite	eq
 8004838:	2301      	moveq	r3, #1
 800483a:	2300      	movne	r3, #0
 800483c:	b2db      	uxtb	r3, r3
 800483e:	461a      	mov	r2, r3
 8004840:	79fb      	ldrb	r3, [r7, #7]
 8004842:	429a      	cmp	r2, r3
 8004844:	d09f      	beq.n	8004786 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3740      	adds	r7, #64	; 0x40
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004854:	b0c0      	sub	sp, #256	; 0x100
 8004856:	af00      	add	r7, sp, #0
 8004858:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800485c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800486c:	68d9      	ldr	r1, [r3, #12]
 800486e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	ea40 0301 	orr.w	r3, r0, r1
 8004878:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800487a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800487e:	689a      	ldr	r2, [r3, #8]
 8004880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	431a      	orrs	r2, r3
 8004888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	431a      	orrs	r2, r3
 8004890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004894:	69db      	ldr	r3, [r3, #28]
 8004896:	4313      	orrs	r3, r2
 8004898:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800489c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80048a8:	f021 010c 	bic.w	r1, r1, #12
 80048ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80048b6:	430b      	orrs	r3, r1
 80048b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80048c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ca:	6999      	ldr	r1, [r3, #24]
 80048cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	ea40 0301 	orr.w	r3, r0, r1
 80048d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	4b8f      	ldr	r3, [pc, #572]	; (8004b1c <UART_SetConfig+0x2cc>)
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d005      	beq.n	80048f0 <UART_SetConfig+0xa0>
 80048e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	4b8d      	ldr	r3, [pc, #564]	; (8004b20 <UART_SetConfig+0x2d0>)
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d104      	bne.n	80048fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048f0:	f7ff f910 	bl	8003b14 <HAL_RCC_GetPCLK2Freq>
 80048f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80048f8:	e003      	b.n	8004902 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048fa:	f7ff f8f7 	bl	8003aec <HAL_RCC_GetPCLK1Freq>
 80048fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004906:	69db      	ldr	r3, [r3, #28]
 8004908:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800490c:	f040 810c 	bne.w	8004b28 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004910:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004914:	2200      	movs	r2, #0
 8004916:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800491a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800491e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004922:	4622      	mov	r2, r4
 8004924:	462b      	mov	r3, r5
 8004926:	1891      	adds	r1, r2, r2
 8004928:	65b9      	str	r1, [r7, #88]	; 0x58
 800492a:	415b      	adcs	r3, r3
 800492c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800492e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004932:	4621      	mov	r1, r4
 8004934:	eb12 0801 	adds.w	r8, r2, r1
 8004938:	4629      	mov	r1, r5
 800493a:	eb43 0901 	adc.w	r9, r3, r1
 800493e:	f04f 0200 	mov.w	r2, #0
 8004942:	f04f 0300 	mov.w	r3, #0
 8004946:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800494a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800494e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004952:	4690      	mov	r8, r2
 8004954:	4699      	mov	r9, r3
 8004956:	4623      	mov	r3, r4
 8004958:	eb18 0303 	adds.w	r3, r8, r3
 800495c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004960:	462b      	mov	r3, r5
 8004962:	eb49 0303 	adc.w	r3, r9, r3
 8004966:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800496a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004976:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800497a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800497e:	460b      	mov	r3, r1
 8004980:	18db      	adds	r3, r3, r3
 8004982:	653b      	str	r3, [r7, #80]	; 0x50
 8004984:	4613      	mov	r3, r2
 8004986:	eb42 0303 	adc.w	r3, r2, r3
 800498a:	657b      	str	r3, [r7, #84]	; 0x54
 800498c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004990:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004994:	f7fb fc74 	bl	8000280 <__aeabi_uldivmod>
 8004998:	4602      	mov	r2, r0
 800499a:	460b      	mov	r3, r1
 800499c:	4b61      	ldr	r3, [pc, #388]	; (8004b24 <UART_SetConfig+0x2d4>)
 800499e:	fba3 2302 	umull	r2, r3, r3, r2
 80049a2:	095b      	lsrs	r3, r3, #5
 80049a4:	011c      	lsls	r4, r3, #4
 80049a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049aa:	2200      	movs	r2, #0
 80049ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80049b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80049b8:	4642      	mov	r2, r8
 80049ba:	464b      	mov	r3, r9
 80049bc:	1891      	adds	r1, r2, r2
 80049be:	64b9      	str	r1, [r7, #72]	; 0x48
 80049c0:	415b      	adcs	r3, r3
 80049c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80049c8:	4641      	mov	r1, r8
 80049ca:	eb12 0a01 	adds.w	sl, r2, r1
 80049ce:	4649      	mov	r1, r9
 80049d0:	eb43 0b01 	adc.w	fp, r3, r1
 80049d4:	f04f 0200 	mov.w	r2, #0
 80049d8:	f04f 0300 	mov.w	r3, #0
 80049dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80049e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80049e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049e8:	4692      	mov	sl, r2
 80049ea:	469b      	mov	fp, r3
 80049ec:	4643      	mov	r3, r8
 80049ee:	eb1a 0303 	adds.w	r3, sl, r3
 80049f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049f6:	464b      	mov	r3, r9
 80049f8:	eb4b 0303 	adc.w	r3, fp, r3
 80049fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a0c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004a10:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004a14:	460b      	mov	r3, r1
 8004a16:	18db      	adds	r3, r3, r3
 8004a18:	643b      	str	r3, [r7, #64]	; 0x40
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	eb42 0303 	adc.w	r3, r2, r3
 8004a20:	647b      	str	r3, [r7, #68]	; 0x44
 8004a22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a26:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004a2a:	f7fb fc29 	bl	8000280 <__aeabi_uldivmod>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	460b      	mov	r3, r1
 8004a32:	4611      	mov	r1, r2
 8004a34:	4b3b      	ldr	r3, [pc, #236]	; (8004b24 <UART_SetConfig+0x2d4>)
 8004a36:	fba3 2301 	umull	r2, r3, r3, r1
 8004a3a:	095b      	lsrs	r3, r3, #5
 8004a3c:	2264      	movs	r2, #100	; 0x64
 8004a3e:	fb02 f303 	mul.w	r3, r2, r3
 8004a42:	1acb      	subs	r3, r1, r3
 8004a44:	00db      	lsls	r3, r3, #3
 8004a46:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004a4a:	4b36      	ldr	r3, [pc, #216]	; (8004b24 <UART_SetConfig+0x2d4>)
 8004a4c:	fba3 2302 	umull	r2, r3, r3, r2
 8004a50:	095b      	lsrs	r3, r3, #5
 8004a52:	005b      	lsls	r3, r3, #1
 8004a54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a58:	441c      	add	r4, r3
 8004a5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a64:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004a68:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004a6c:	4642      	mov	r2, r8
 8004a6e:	464b      	mov	r3, r9
 8004a70:	1891      	adds	r1, r2, r2
 8004a72:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a74:	415b      	adcs	r3, r3
 8004a76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a7c:	4641      	mov	r1, r8
 8004a7e:	1851      	adds	r1, r2, r1
 8004a80:	6339      	str	r1, [r7, #48]	; 0x30
 8004a82:	4649      	mov	r1, r9
 8004a84:	414b      	adcs	r3, r1
 8004a86:	637b      	str	r3, [r7, #52]	; 0x34
 8004a88:	f04f 0200 	mov.w	r2, #0
 8004a8c:	f04f 0300 	mov.w	r3, #0
 8004a90:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004a94:	4659      	mov	r1, fp
 8004a96:	00cb      	lsls	r3, r1, #3
 8004a98:	4651      	mov	r1, sl
 8004a9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a9e:	4651      	mov	r1, sl
 8004aa0:	00ca      	lsls	r2, r1, #3
 8004aa2:	4610      	mov	r0, r2
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	4642      	mov	r2, r8
 8004aaa:	189b      	adds	r3, r3, r2
 8004aac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ab0:	464b      	mov	r3, r9
 8004ab2:	460a      	mov	r2, r1
 8004ab4:	eb42 0303 	adc.w	r3, r2, r3
 8004ab8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004ac8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004acc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	18db      	adds	r3, r3, r3
 8004ad4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	eb42 0303 	adc.w	r3, r2, r3
 8004adc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ade:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ae2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004ae6:	f7fb fbcb 	bl	8000280 <__aeabi_uldivmod>
 8004aea:	4602      	mov	r2, r0
 8004aec:	460b      	mov	r3, r1
 8004aee:	4b0d      	ldr	r3, [pc, #52]	; (8004b24 <UART_SetConfig+0x2d4>)
 8004af0:	fba3 1302 	umull	r1, r3, r3, r2
 8004af4:	095b      	lsrs	r3, r3, #5
 8004af6:	2164      	movs	r1, #100	; 0x64
 8004af8:	fb01 f303 	mul.w	r3, r1, r3
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	00db      	lsls	r3, r3, #3
 8004b00:	3332      	adds	r3, #50	; 0x32
 8004b02:	4a08      	ldr	r2, [pc, #32]	; (8004b24 <UART_SetConfig+0x2d4>)
 8004b04:	fba2 2303 	umull	r2, r3, r2, r3
 8004b08:	095b      	lsrs	r3, r3, #5
 8004b0a:	f003 0207 	and.w	r2, r3, #7
 8004b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4422      	add	r2, r4
 8004b16:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b18:	e105      	b.n	8004d26 <UART_SetConfig+0x4d6>
 8004b1a:	bf00      	nop
 8004b1c:	40011000 	.word	0x40011000
 8004b20:	40011400 	.word	0x40011400
 8004b24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b32:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004b36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004b3a:	4642      	mov	r2, r8
 8004b3c:	464b      	mov	r3, r9
 8004b3e:	1891      	adds	r1, r2, r2
 8004b40:	6239      	str	r1, [r7, #32]
 8004b42:	415b      	adcs	r3, r3
 8004b44:	627b      	str	r3, [r7, #36]	; 0x24
 8004b46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b4a:	4641      	mov	r1, r8
 8004b4c:	1854      	adds	r4, r2, r1
 8004b4e:	4649      	mov	r1, r9
 8004b50:	eb43 0501 	adc.w	r5, r3, r1
 8004b54:	f04f 0200 	mov.w	r2, #0
 8004b58:	f04f 0300 	mov.w	r3, #0
 8004b5c:	00eb      	lsls	r3, r5, #3
 8004b5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b62:	00e2      	lsls	r2, r4, #3
 8004b64:	4614      	mov	r4, r2
 8004b66:	461d      	mov	r5, r3
 8004b68:	4643      	mov	r3, r8
 8004b6a:	18e3      	adds	r3, r4, r3
 8004b6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b70:	464b      	mov	r3, r9
 8004b72:	eb45 0303 	adc.w	r3, r5, r3
 8004b76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b8a:	f04f 0200 	mov.w	r2, #0
 8004b8e:	f04f 0300 	mov.w	r3, #0
 8004b92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004b96:	4629      	mov	r1, r5
 8004b98:	008b      	lsls	r3, r1, #2
 8004b9a:	4621      	mov	r1, r4
 8004b9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ba0:	4621      	mov	r1, r4
 8004ba2:	008a      	lsls	r2, r1, #2
 8004ba4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004ba8:	f7fb fb6a 	bl	8000280 <__aeabi_uldivmod>
 8004bac:	4602      	mov	r2, r0
 8004bae:	460b      	mov	r3, r1
 8004bb0:	4b60      	ldr	r3, [pc, #384]	; (8004d34 <UART_SetConfig+0x4e4>)
 8004bb2:	fba3 2302 	umull	r2, r3, r3, r2
 8004bb6:	095b      	lsrs	r3, r3, #5
 8004bb8:	011c      	lsls	r4, r3, #4
 8004bba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004bc4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004bc8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004bcc:	4642      	mov	r2, r8
 8004bce:	464b      	mov	r3, r9
 8004bd0:	1891      	adds	r1, r2, r2
 8004bd2:	61b9      	str	r1, [r7, #24]
 8004bd4:	415b      	adcs	r3, r3
 8004bd6:	61fb      	str	r3, [r7, #28]
 8004bd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bdc:	4641      	mov	r1, r8
 8004bde:	1851      	adds	r1, r2, r1
 8004be0:	6139      	str	r1, [r7, #16]
 8004be2:	4649      	mov	r1, r9
 8004be4:	414b      	adcs	r3, r1
 8004be6:	617b      	str	r3, [r7, #20]
 8004be8:	f04f 0200 	mov.w	r2, #0
 8004bec:	f04f 0300 	mov.w	r3, #0
 8004bf0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004bf4:	4659      	mov	r1, fp
 8004bf6:	00cb      	lsls	r3, r1, #3
 8004bf8:	4651      	mov	r1, sl
 8004bfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bfe:	4651      	mov	r1, sl
 8004c00:	00ca      	lsls	r2, r1, #3
 8004c02:	4610      	mov	r0, r2
 8004c04:	4619      	mov	r1, r3
 8004c06:	4603      	mov	r3, r0
 8004c08:	4642      	mov	r2, r8
 8004c0a:	189b      	adds	r3, r3, r2
 8004c0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c10:	464b      	mov	r3, r9
 8004c12:	460a      	mov	r2, r1
 8004c14:	eb42 0303 	adc.w	r3, r2, r3
 8004c18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c26:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004c28:	f04f 0200 	mov.w	r2, #0
 8004c2c:	f04f 0300 	mov.w	r3, #0
 8004c30:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004c34:	4649      	mov	r1, r9
 8004c36:	008b      	lsls	r3, r1, #2
 8004c38:	4641      	mov	r1, r8
 8004c3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c3e:	4641      	mov	r1, r8
 8004c40:	008a      	lsls	r2, r1, #2
 8004c42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004c46:	f7fb fb1b 	bl	8000280 <__aeabi_uldivmod>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	4b39      	ldr	r3, [pc, #228]	; (8004d34 <UART_SetConfig+0x4e4>)
 8004c50:	fba3 1302 	umull	r1, r3, r3, r2
 8004c54:	095b      	lsrs	r3, r3, #5
 8004c56:	2164      	movs	r1, #100	; 0x64
 8004c58:	fb01 f303 	mul.w	r3, r1, r3
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	011b      	lsls	r3, r3, #4
 8004c60:	3332      	adds	r3, #50	; 0x32
 8004c62:	4a34      	ldr	r2, [pc, #208]	; (8004d34 <UART_SetConfig+0x4e4>)
 8004c64:	fba2 2303 	umull	r2, r3, r2, r3
 8004c68:	095b      	lsrs	r3, r3, #5
 8004c6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c6e:	441c      	add	r4, r3
 8004c70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c74:	2200      	movs	r2, #0
 8004c76:	673b      	str	r3, [r7, #112]	; 0x70
 8004c78:	677a      	str	r2, [r7, #116]	; 0x74
 8004c7a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004c7e:	4642      	mov	r2, r8
 8004c80:	464b      	mov	r3, r9
 8004c82:	1891      	adds	r1, r2, r2
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	415b      	adcs	r3, r3
 8004c88:	60fb      	str	r3, [r7, #12]
 8004c8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c8e:	4641      	mov	r1, r8
 8004c90:	1851      	adds	r1, r2, r1
 8004c92:	6039      	str	r1, [r7, #0]
 8004c94:	4649      	mov	r1, r9
 8004c96:	414b      	adcs	r3, r1
 8004c98:	607b      	str	r3, [r7, #4]
 8004c9a:	f04f 0200 	mov.w	r2, #0
 8004c9e:	f04f 0300 	mov.w	r3, #0
 8004ca2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ca6:	4659      	mov	r1, fp
 8004ca8:	00cb      	lsls	r3, r1, #3
 8004caa:	4651      	mov	r1, sl
 8004cac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cb0:	4651      	mov	r1, sl
 8004cb2:	00ca      	lsls	r2, r1, #3
 8004cb4:	4610      	mov	r0, r2
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	4603      	mov	r3, r0
 8004cba:	4642      	mov	r2, r8
 8004cbc:	189b      	adds	r3, r3, r2
 8004cbe:	66bb      	str	r3, [r7, #104]	; 0x68
 8004cc0:	464b      	mov	r3, r9
 8004cc2:	460a      	mov	r2, r1
 8004cc4:	eb42 0303 	adc.w	r3, r2, r3
 8004cc8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	663b      	str	r3, [r7, #96]	; 0x60
 8004cd4:	667a      	str	r2, [r7, #100]	; 0x64
 8004cd6:	f04f 0200 	mov.w	r2, #0
 8004cda:	f04f 0300 	mov.w	r3, #0
 8004cde:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004ce2:	4649      	mov	r1, r9
 8004ce4:	008b      	lsls	r3, r1, #2
 8004ce6:	4641      	mov	r1, r8
 8004ce8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cec:	4641      	mov	r1, r8
 8004cee:	008a      	lsls	r2, r1, #2
 8004cf0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004cf4:	f7fb fac4 	bl	8000280 <__aeabi_uldivmod>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	4b0d      	ldr	r3, [pc, #52]	; (8004d34 <UART_SetConfig+0x4e4>)
 8004cfe:	fba3 1302 	umull	r1, r3, r3, r2
 8004d02:	095b      	lsrs	r3, r3, #5
 8004d04:	2164      	movs	r1, #100	; 0x64
 8004d06:	fb01 f303 	mul.w	r3, r1, r3
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	011b      	lsls	r3, r3, #4
 8004d0e:	3332      	adds	r3, #50	; 0x32
 8004d10:	4a08      	ldr	r2, [pc, #32]	; (8004d34 <UART_SetConfig+0x4e4>)
 8004d12:	fba2 2303 	umull	r2, r3, r2, r3
 8004d16:	095b      	lsrs	r3, r3, #5
 8004d18:	f003 020f 	and.w	r2, r3, #15
 8004d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4422      	add	r2, r4
 8004d24:	609a      	str	r2, [r3, #8]
}
 8004d26:	bf00      	nop
 8004d28:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d32:	bf00      	nop
 8004d34:	51eb851f 	.word	0x51eb851f

08004d38 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004d3c:	4904      	ldr	r1, [pc, #16]	; (8004d50 <MX_FATFS_Init+0x18>)
 8004d3e:	4805      	ldr	r0, [pc, #20]	; (8004d54 <MX_FATFS_Init+0x1c>)
 8004d40:	f002 feae 	bl	8007aa0 <FATFS_LinkDriver>
 8004d44:	4603      	mov	r3, r0
 8004d46:	461a      	mov	r2, r3
 8004d48:	4b03      	ldr	r3, [pc, #12]	; (8004d58 <MX_FATFS_Init+0x20>)
 8004d4a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004d4c:	bf00      	nop
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	2000425c 	.word	0x2000425c
 8004d54:	20000014 	.word	0x20000014
 8004d58:	20004258 	.word	0x20004258

08004d5c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004d60:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	4603      	mov	r3, r0
 8004d74:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8004d76:	79fb      	ldrb	r3, [r7, #7]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7fc f80f 	bl	8000d9c <SD_disk_initialize>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3708      	adds	r7, #8
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b082      	sub	sp, #8
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	4603      	mov	r3, r0
 8004d92:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8004d94:	79fb      	ldrb	r3, [r7, #7]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7fc f8ea 	bl	8000f70 <SD_disk_status>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3708      	adds	r7, #8
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60b9      	str	r1, [r7, #8]
 8004db0:	607a      	str	r2, [r7, #4]
 8004db2:	603b      	str	r3, [r7, #0]
 8004db4:	4603      	mov	r3, r0
 8004db6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8004db8:	7bf8      	ldrb	r0, [r7, #15]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	68b9      	ldr	r1, [r7, #8]
 8004dc0:	f7fc f8ec 	bl	8000f9c <SD_disk_read>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3710      	adds	r7, #16
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60b9      	str	r1, [r7, #8]
 8004dd8:	607a      	str	r2, [r7, #4]
 8004dda:	603b      	str	r3, [r7, #0]
 8004ddc:	4603      	mov	r3, r0
 8004dde:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8004de0:	7bf8      	ldrb	r0, [r7, #15]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	68b9      	ldr	r1, [r7, #8]
 8004de8:	f7fc f942 	bl	8001070 <SD_disk_write>
 8004dec:	4603      	mov	r3, r0
 8004dee:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3710      	adds	r7, #16
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	4603      	mov	r3, r0
 8004e00:	603a      	str	r2, [r7, #0]
 8004e02:	71fb      	strb	r3, [r7, #7]
 8004e04:	460b      	mov	r3, r1
 8004e06:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8004e08:	79fb      	ldrb	r3, [r7, #7]
 8004e0a:	79b9      	ldrb	r1, [r7, #6]
 8004e0c:	683a      	ldr	r2, [r7, #0]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7fc f9b2 	bl	8001178 <SD_disk_ioctl>
 8004e14:	4603      	mov	r3, r0
 8004e16:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3708      	adds	r7, #8
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	4603      	mov	r3, r0
 8004e28:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004e2a:	79fb      	ldrb	r3, [r7, #7]
 8004e2c:	4a08      	ldr	r2, [pc, #32]	; (8004e50 <disk_status+0x30>)
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4413      	add	r3, r2
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	79fa      	ldrb	r2, [r7, #7]
 8004e38:	4905      	ldr	r1, [pc, #20]	; (8004e50 <disk_status+0x30>)
 8004e3a:	440a      	add	r2, r1
 8004e3c:	7a12      	ldrb	r2, [r2, #8]
 8004e3e:	4610      	mov	r0, r2
 8004e40:	4798      	blx	r3
 8004e42:	4603      	mov	r3, r0
 8004e44:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3710      	adds	r7, #16
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	20004488 	.word	0x20004488

08004e54 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004e62:	79fb      	ldrb	r3, [r7, #7]
 8004e64:	4a0d      	ldr	r2, [pc, #52]	; (8004e9c <disk_initialize+0x48>)
 8004e66:	5cd3      	ldrb	r3, [r2, r3]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d111      	bne.n	8004e90 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004e6c:	79fb      	ldrb	r3, [r7, #7]
 8004e6e:	4a0b      	ldr	r2, [pc, #44]	; (8004e9c <disk_initialize+0x48>)
 8004e70:	2101      	movs	r1, #1
 8004e72:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004e74:	79fb      	ldrb	r3, [r7, #7]
 8004e76:	4a09      	ldr	r2, [pc, #36]	; (8004e9c <disk_initialize+0x48>)
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	4413      	add	r3, r2
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	79fa      	ldrb	r2, [r7, #7]
 8004e82:	4906      	ldr	r1, [pc, #24]	; (8004e9c <disk_initialize+0x48>)
 8004e84:	440a      	add	r2, r1
 8004e86:	7a12      	ldrb	r2, [r2, #8]
 8004e88:	4610      	mov	r0, r2
 8004e8a:	4798      	blx	r3
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	20004488 	.word	0x20004488

08004ea0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004ea0:	b590      	push	{r4, r7, lr}
 8004ea2:	b087      	sub	sp, #28
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60b9      	str	r1, [r7, #8]
 8004ea8:	607a      	str	r2, [r7, #4]
 8004eaa:	603b      	str	r3, [r7, #0]
 8004eac:	4603      	mov	r3, r0
 8004eae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
 8004eb2:	4a0a      	ldr	r2, [pc, #40]	; (8004edc <disk_read+0x3c>)
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4413      	add	r3, r2
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	689c      	ldr	r4, [r3, #8]
 8004ebc:	7bfb      	ldrb	r3, [r7, #15]
 8004ebe:	4a07      	ldr	r2, [pc, #28]	; (8004edc <disk_read+0x3c>)
 8004ec0:	4413      	add	r3, r2
 8004ec2:	7a18      	ldrb	r0, [r3, #8]
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	68b9      	ldr	r1, [r7, #8]
 8004eca:	47a0      	blx	r4
 8004ecc:	4603      	mov	r3, r0
 8004ece:	75fb      	strb	r3, [r7, #23]
  return res;
 8004ed0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	371c      	adds	r7, #28
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd90      	pop	{r4, r7, pc}
 8004eda:	bf00      	nop
 8004edc:	20004488 	.word	0x20004488

08004ee0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004ee0:	b590      	push	{r4, r7, lr}
 8004ee2:	b087      	sub	sp, #28
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60b9      	str	r1, [r7, #8]
 8004ee8:	607a      	str	r2, [r7, #4]
 8004eea:	603b      	str	r3, [r7, #0]
 8004eec:	4603      	mov	r3, r0
 8004eee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
 8004ef2:	4a0a      	ldr	r2, [pc, #40]	; (8004f1c <disk_write+0x3c>)
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	4413      	add	r3, r2
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	68dc      	ldr	r4, [r3, #12]
 8004efc:	7bfb      	ldrb	r3, [r7, #15]
 8004efe:	4a07      	ldr	r2, [pc, #28]	; (8004f1c <disk_write+0x3c>)
 8004f00:	4413      	add	r3, r2
 8004f02:	7a18      	ldrb	r0, [r3, #8]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	68b9      	ldr	r1, [r7, #8]
 8004f0a:	47a0      	blx	r4
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004f10:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	371c      	adds	r7, #28
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd90      	pop	{r4, r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	20004488 	.word	0x20004488

08004f20 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	4603      	mov	r3, r0
 8004f28:	603a      	str	r2, [r7, #0]
 8004f2a:	71fb      	strb	r3, [r7, #7]
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004f30:	79fb      	ldrb	r3, [r7, #7]
 8004f32:	4a09      	ldr	r2, [pc, #36]	; (8004f58 <disk_ioctl+0x38>)
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	4413      	add	r3, r2
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	79fa      	ldrb	r2, [r7, #7]
 8004f3e:	4906      	ldr	r1, [pc, #24]	; (8004f58 <disk_ioctl+0x38>)
 8004f40:	440a      	add	r2, r1
 8004f42:	7a10      	ldrb	r0, [r2, #8]
 8004f44:	79b9      	ldrb	r1, [r7, #6]
 8004f46:	683a      	ldr	r2, [r7, #0]
 8004f48:	4798      	blx	r3
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	73fb      	strb	r3, [r7, #15]
  return res;
 8004f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	20004488 	.word	0x20004488

08004f5c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	3301      	adds	r3, #1
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004f6c:	89fb      	ldrh	r3, [r7, #14]
 8004f6e:	021b      	lsls	r3, r3, #8
 8004f70:	b21a      	sxth	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	b21b      	sxth	r3, r3
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	b21b      	sxth	r3, r3
 8004f7c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004f7e:	89fb      	ldrh	r3, [r7, #14]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3714      	adds	r7, #20
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b085      	sub	sp, #20
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	3303      	adds	r3, #3
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	021b      	lsls	r3, r3, #8
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	3202      	adds	r2, #2
 8004fa4:	7812      	ldrb	r2, [r2, #0]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	021b      	lsls	r3, r3, #8
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	3201      	adds	r2, #1
 8004fb2:	7812      	ldrb	r2, [r2, #0]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	021b      	lsls	r3, r3, #8
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	7812      	ldrb	r2, [r2, #0]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	60fb      	str	r3, [r7, #12]
	return rv;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3714      	adds	r7, #20
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr

08004fd2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	b083      	sub	sp, #12
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
 8004fda:	460b      	mov	r3, r1
 8004fdc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	1c5a      	adds	r2, r3, #1
 8004fe2:	607a      	str	r2, [r7, #4]
 8004fe4:	887a      	ldrh	r2, [r7, #2]
 8004fe6:	b2d2      	uxtb	r2, r2
 8004fe8:	701a      	strb	r2, [r3, #0]
 8004fea:	887b      	ldrh	r3, [r7, #2]
 8004fec:	0a1b      	lsrs	r3, r3, #8
 8004fee:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	1c5a      	adds	r2, r3, #1
 8004ff4:	607a      	str	r2, [r7, #4]
 8004ff6:	887a      	ldrh	r2, [r7, #2]
 8004ff8:	b2d2      	uxtb	r2, r2
 8004ffa:	701a      	strb	r2, [r3, #0]
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	1c5a      	adds	r2, r3, #1
 8005016:	607a      	str	r2, [r7, #4]
 8005018:	683a      	ldr	r2, [r7, #0]
 800501a:	b2d2      	uxtb	r2, r2
 800501c:	701a      	strb	r2, [r3, #0]
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	0a1b      	lsrs	r3, r3, #8
 8005022:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	1c5a      	adds	r2, r3, #1
 8005028:	607a      	str	r2, [r7, #4]
 800502a:	683a      	ldr	r2, [r7, #0]
 800502c:	b2d2      	uxtb	r2, r2
 800502e:	701a      	strb	r2, [r3, #0]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	0a1b      	lsrs	r3, r3, #8
 8005034:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	1c5a      	adds	r2, r3, #1
 800503a:	607a      	str	r2, [r7, #4]
 800503c:	683a      	ldr	r2, [r7, #0]
 800503e:	b2d2      	uxtb	r2, r2
 8005040:	701a      	strb	r2, [r3, #0]
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	0a1b      	lsrs	r3, r3, #8
 8005046:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	1c5a      	adds	r2, r3, #1
 800504c:	607a      	str	r2, [r7, #4]
 800504e:	683a      	ldr	r2, [r7, #0]
 8005050:	b2d2      	uxtb	r2, r2
 8005052:	701a      	strb	r2, [r3, #0]
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005060:	b480      	push	{r7}
 8005062:	b087      	sub	sp, #28
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00d      	beq.n	8005096 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800507a:	693a      	ldr	r2, [r7, #16]
 800507c:	1c53      	adds	r3, r2, #1
 800507e:	613b      	str	r3, [r7, #16]
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	1c59      	adds	r1, r3, #1
 8005084:	6179      	str	r1, [r7, #20]
 8005086:	7812      	ldrb	r2, [r2, #0]
 8005088:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	3b01      	subs	r3, #1
 800508e:	607b      	str	r3, [r7, #4]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1f1      	bne.n	800507a <mem_cpy+0x1a>
	}
}
 8005096:	bf00      	nop
 8005098:	371c      	adds	r7, #28
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr

080050a2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80050a2:	b480      	push	{r7}
 80050a4:	b087      	sub	sp, #28
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	60f8      	str	r0, [r7, #12]
 80050aa:	60b9      	str	r1, [r7, #8]
 80050ac:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	1c5a      	adds	r2, r3, #1
 80050b6:	617a      	str	r2, [r7, #20]
 80050b8:	68ba      	ldr	r2, [r7, #8]
 80050ba:	b2d2      	uxtb	r2, r2
 80050bc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	3b01      	subs	r3, #1
 80050c2:	607b      	str	r3, [r7, #4]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1f3      	bne.n	80050b2 <mem_set+0x10>
}
 80050ca:	bf00      	nop
 80050cc:	bf00      	nop
 80050ce:	371c      	adds	r7, #28
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80050d8:	b480      	push	{r7}
 80050da:	b089      	sub	sp, #36	; 0x24
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	61fb      	str	r3, [r7, #28]
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80050ec:	2300      	movs	r3, #0
 80050ee:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	1c5a      	adds	r2, r3, #1
 80050f4:	61fa      	str	r2, [r7, #28]
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	4619      	mov	r1, r3
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	1c5a      	adds	r2, r3, #1
 80050fe:	61ba      	str	r2, [r7, #24]
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	1acb      	subs	r3, r1, r3
 8005104:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	3b01      	subs	r3, #1
 800510a:	607b      	str	r3, [r7, #4]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d002      	beq.n	8005118 <mem_cmp+0x40>
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d0eb      	beq.n	80050f0 <mem_cmp+0x18>

	return r;
 8005118:	697b      	ldr	r3, [r7, #20]
}
 800511a:	4618      	mov	r0, r3
 800511c:	3724      	adds	r7, #36	; 0x24
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr

08005126 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005126:	b480      	push	{r7}
 8005128:	b083      	sub	sp, #12
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
 800512e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005130:	e002      	b.n	8005138 <chk_chr+0x12>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	3301      	adds	r3, #1
 8005136:	607b      	str	r3, [r7, #4]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d005      	beq.n	800514c <chk_chr+0x26>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	461a      	mov	r2, r3
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	4293      	cmp	r3, r2
 800514a:	d1f2      	bne.n	8005132 <chk_chr+0xc>
	return *str;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	781b      	ldrb	r3, [r3, #0]
}
 8005150:	4618      	mov	r0, r3
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005166:	2300      	movs	r3, #0
 8005168:	60bb      	str	r3, [r7, #8]
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	60fb      	str	r3, [r7, #12]
 800516e:	e029      	b.n	80051c4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005170:	4a27      	ldr	r2, [pc, #156]	; (8005210 <chk_lock+0xb4>)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	011b      	lsls	r3, r3, #4
 8005176:	4413      	add	r3, r2
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d01d      	beq.n	80051ba <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800517e:	4a24      	ldr	r2, [pc, #144]	; (8005210 <chk_lock+0xb4>)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	011b      	lsls	r3, r3, #4
 8005184:	4413      	add	r3, r2
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	429a      	cmp	r2, r3
 800518e:	d116      	bne.n	80051be <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005190:	4a1f      	ldr	r2, [pc, #124]	; (8005210 <chk_lock+0xb4>)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	011b      	lsls	r3, r3, #4
 8005196:	4413      	add	r3, r2
 8005198:	3304      	adds	r3, #4
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d10c      	bne.n	80051be <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80051a4:	4a1a      	ldr	r2, [pc, #104]	; (8005210 <chk_lock+0xb4>)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	011b      	lsls	r3, r3, #4
 80051aa:	4413      	add	r3, r2
 80051ac:	3308      	adds	r3, #8
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d102      	bne.n	80051be <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80051b8:	e007      	b.n	80051ca <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80051ba:	2301      	movs	r3, #1
 80051bc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	3301      	adds	r3, #1
 80051c2:	60fb      	str	r3, [r7, #12]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d9d2      	bls.n	8005170 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d109      	bne.n	80051e4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d102      	bne.n	80051dc <chk_lock+0x80>
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d101      	bne.n	80051e0 <chk_lock+0x84>
 80051dc:	2300      	movs	r3, #0
 80051de:	e010      	b.n	8005202 <chk_lock+0xa6>
 80051e0:	2312      	movs	r3, #18
 80051e2:	e00e      	b.n	8005202 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d108      	bne.n	80051fc <chk_lock+0xa0>
 80051ea:	4a09      	ldr	r2, [pc, #36]	; (8005210 <chk_lock+0xb4>)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	011b      	lsls	r3, r3, #4
 80051f0:	4413      	add	r3, r2
 80051f2:	330c      	adds	r3, #12
 80051f4:	881b      	ldrh	r3, [r3, #0]
 80051f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051fa:	d101      	bne.n	8005200 <chk_lock+0xa4>
 80051fc:	2310      	movs	r3, #16
 80051fe:	e000      	b.n	8005202 <chk_lock+0xa6>
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3714      	adds	r7, #20
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	20004268 	.word	0x20004268

08005214 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800521a:	2300      	movs	r3, #0
 800521c:	607b      	str	r3, [r7, #4]
 800521e:	e002      	b.n	8005226 <enq_lock+0x12>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	3301      	adds	r3, #1
 8005224:	607b      	str	r3, [r7, #4]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d806      	bhi.n	800523a <enq_lock+0x26>
 800522c:	4a09      	ldr	r2, [pc, #36]	; (8005254 <enq_lock+0x40>)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	011b      	lsls	r3, r3, #4
 8005232:	4413      	add	r3, r2
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1f2      	bne.n	8005220 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2b02      	cmp	r3, #2
 800523e:	bf14      	ite	ne
 8005240:	2301      	movne	r3, #1
 8005242:	2300      	moveq	r3, #0
 8005244:	b2db      	uxtb	r3, r3
}
 8005246:	4618      	mov	r0, r3
 8005248:	370c      	adds	r7, #12
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	20004268 	.word	0x20004268

08005258 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005262:	2300      	movs	r3, #0
 8005264:	60fb      	str	r3, [r7, #12]
 8005266:	e01f      	b.n	80052a8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005268:	4a41      	ldr	r2, [pc, #260]	; (8005370 <inc_lock+0x118>)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	011b      	lsls	r3, r3, #4
 800526e:	4413      	add	r3, r2
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	429a      	cmp	r2, r3
 8005278:	d113      	bne.n	80052a2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800527a:	4a3d      	ldr	r2, [pc, #244]	; (8005370 <inc_lock+0x118>)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	011b      	lsls	r3, r3, #4
 8005280:	4413      	add	r3, r2
 8005282:	3304      	adds	r3, #4
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800528a:	429a      	cmp	r2, r3
 800528c:	d109      	bne.n	80052a2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800528e:	4a38      	ldr	r2, [pc, #224]	; (8005370 <inc_lock+0x118>)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	011b      	lsls	r3, r3, #4
 8005294:	4413      	add	r3, r2
 8005296:	3308      	adds	r3, #8
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800529e:	429a      	cmp	r2, r3
 80052a0:	d006      	beq.n	80052b0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	3301      	adds	r3, #1
 80052a6:	60fb      	str	r3, [r7, #12]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d9dc      	bls.n	8005268 <inc_lock+0x10>
 80052ae:	e000      	b.n	80052b2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80052b0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d132      	bne.n	800531e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80052b8:	2300      	movs	r3, #0
 80052ba:	60fb      	str	r3, [r7, #12]
 80052bc:	e002      	b.n	80052c4 <inc_lock+0x6c>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	3301      	adds	r3, #1
 80052c2:	60fb      	str	r3, [r7, #12]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d806      	bhi.n	80052d8 <inc_lock+0x80>
 80052ca:	4a29      	ldr	r2, [pc, #164]	; (8005370 <inc_lock+0x118>)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	011b      	lsls	r3, r3, #4
 80052d0:	4413      	add	r3, r2
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1f2      	bne.n	80052be <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d101      	bne.n	80052e2 <inc_lock+0x8a>
 80052de:	2300      	movs	r3, #0
 80052e0:	e040      	b.n	8005364 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	4922      	ldr	r1, [pc, #136]	; (8005370 <inc_lock+0x118>)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	011b      	lsls	r3, r3, #4
 80052ec:	440b      	add	r3, r1
 80052ee:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689a      	ldr	r2, [r3, #8]
 80052f4:	491e      	ldr	r1, [pc, #120]	; (8005370 <inc_lock+0x118>)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	011b      	lsls	r3, r3, #4
 80052fa:	440b      	add	r3, r1
 80052fc:	3304      	adds	r3, #4
 80052fe:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	695a      	ldr	r2, [r3, #20]
 8005304:	491a      	ldr	r1, [pc, #104]	; (8005370 <inc_lock+0x118>)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	011b      	lsls	r3, r3, #4
 800530a:	440b      	add	r3, r1
 800530c:	3308      	adds	r3, #8
 800530e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005310:	4a17      	ldr	r2, [pc, #92]	; (8005370 <inc_lock+0x118>)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	011b      	lsls	r3, r3, #4
 8005316:	4413      	add	r3, r2
 8005318:	330c      	adds	r3, #12
 800531a:	2200      	movs	r2, #0
 800531c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d009      	beq.n	8005338 <inc_lock+0xe0>
 8005324:	4a12      	ldr	r2, [pc, #72]	; (8005370 <inc_lock+0x118>)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	011b      	lsls	r3, r3, #4
 800532a:	4413      	add	r3, r2
 800532c:	330c      	adds	r3, #12
 800532e:	881b      	ldrh	r3, [r3, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d001      	beq.n	8005338 <inc_lock+0xe0>
 8005334:	2300      	movs	r3, #0
 8005336:	e015      	b.n	8005364 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d108      	bne.n	8005350 <inc_lock+0xf8>
 800533e:	4a0c      	ldr	r2, [pc, #48]	; (8005370 <inc_lock+0x118>)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	011b      	lsls	r3, r3, #4
 8005344:	4413      	add	r3, r2
 8005346:	330c      	adds	r3, #12
 8005348:	881b      	ldrh	r3, [r3, #0]
 800534a:	3301      	adds	r3, #1
 800534c:	b29a      	uxth	r2, r3
 800534e:	e001      	b.n	8005354 <inc_lock+0xfc>
 8005350:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005354:	4906      	ldr	r1, [pc, #24]	; (8005370 <inc_lock+0x118>)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	011b      	lsls	r3, r3, #4
 800535a:	440b      	add	r3, r1
 800535c:	330c      	adds	r3, #12
 800535e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	3301      	adds	r3, #1
}
 8005364:	4618      	mov	r0, r3
 8005366:	3714      	adds	r7, #20
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr
 8005370:	20004268 	.word	0x20004268

08005374 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	3b01      	subs	r3, #1
 8005380:	607b      	str	r3, [r7, #4]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d825      	bhi.n	80053d4 <dec_lock+0x60>
		n = Files[i].ctr;
 8005388:	4a17      	ldr	r2, [pc, #92]	; (80053e8 <dec_lock+0x74>)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	011b      	lsls	r3, r3, #4
 800538e:	4413      	add	r3, r2
 8005390:	330c      	adds	r3, #12
 8005392:	881b      	ldrh	r3, [r3, #0]
 8005394:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005396:	89fb      	ldrh	r3, [r7, #14]
 8005398:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800539c:	d101      	bne.n	80053a2 <dec_lock+0x2e>
 800539e:	2300      	movs	r3, #0
 80053a0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80053a2:	89fb      	ldrh	r3, [r7, #14]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d002      	beq.n	80053ae <dec_lock+0x3a>
 80053a8:	89fb      	ldrh	r3, [r7, #14]
 80053aa:	3b01      	subs	r3, #1
 80053ac:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80053ae:	4a0e      	ldr	r2, [pc, #56]	; (80053e8 <dec_lock+0x74>)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	011b      	lsls	r3, r3, #4
 80053b4:	4413      	add	r3, r2
 80053b6:	330c      	adds	r3, #12
 80053b8:	89fa      	ldrh	r2, [r7, #14]
 80053ba:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80053bc:	89fb      	ldrh	r3, [r7, #14]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d105      	bne.n	80053ce <dec_lock+0x5a>
 80053c2:	4a09      	ldr	r2, [pc, #36]	; (80053e8 <dec_lock+0x74>)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	011b      	lsls	r3, r3, #4
 80053c8:	4413      	add	r3, r2
 80053ca:	2200      	movs	r2, #0
 80053cc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80053ce:	2300      	movs	r3, #0
 80053d0:	737b      	strb	r3, [r7, #13]
 80053d2:	e001      	b.n	80053d8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80053d4:	2302      	movs	r3, #2
 80053d6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80053d8:	7b7b      	ldrb	r3, [r7, #13]
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3714      	adds	r7, #20
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	20004268 	.word	0x20004268

080053ec <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80053f4:	2300      	movs	r3, #0
 80053f6:	60fb      	str	r3, [r7, #12]
 80053f8:	e010      	b.n	800541c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80053fa:	4a0d      	ldr	r2, [pc, #52]	; (8005430 <clear_lock+0x44>)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	011b      	lsls	r3, r3, #4
 8005400:	4413      	add	r3, r2
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	429a      	cmp	r2, r3
 8005408:	d105      	bne.n	8005416 <clear_lock+0x2a>
 800540a:	4a09      	ldr	r2, [pc, #36]	; (8005430 <clear_lock+0x44>)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	011b      	lsls	r3, r3, #4
 8005410:	4413      	add	r3, r2
 8005412:	2200      	movs	r2, #0
 8005414:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	3301      	adds	r3, #1
 800541a:	60fb      	str	r3, [r7, #12]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d9eb      	bls.n	80053fa <clear_lock+0xe>
	}
}
 8005422:	bf00      	nop
 8005424:	bf00      	nop
 8005426:	3714      	adds	r7, #20
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr
 8005430:	20004268 	.word	0x20004268

08005434 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b086      	sub	sp, #24
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800543c:	2300      	movs	r3, #0
 800543e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	78db      	ldrb	r3, [r3, #3]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d034      	beq.n	80054b2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800544c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	7858      	ldrb	r0, [r3, #1]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005458:	2301      	movs	r3, #1
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	f7ff fd40 	bl	8004ee0 <disk_write>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d002      	beq.n	800546c <sync_window+0x38>
			res = FR_DISK_ERR;
 8005466:	2301      	movs	r3, #1
 8005468:	73fb      	strb	r3, [r7, #15]
 800546a:	e022      	b.n	80054b2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	1ad2      	subs	r2, r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	429a      	cmp	r2, r3
 8005480:	d217      	bcs.n	80054b2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	789b      	ldrb	r3, [r3, #2]
 8005486:	613b      	str	r3, [r7, #16]
 8005488:	e010      	b.n	80054ac <sync_window+0x78>
					wsect += fs->fsize;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	4413      	add	r3, r2
 8005492:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	7858      	ldrb	r0, [r3, #1]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800549e:	2301      	movs	r3, #1
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	f7ff fd1d 	bl	8004ee0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	3b01      	subs	r3, #1
 80054aa:	613b      	str	r3, [r7, #16]
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d8eb      	bhi.n	800548a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80054b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3718      	adds	r7, #24
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80054c6:	2300      	movs	r3, #0
 80054c8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d01b      	beq.n	800550c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f7ff ffad 	bl	8005434 <sync_window>
 80054da:	4603      	mov	r3, r0
 80054dc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80054de:	7bfb      	ldrb	r3, [r7, #15]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d113      	bne.n	800550c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	7858      	ldrb	r0, [r3, #1]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80054ee:	2301      	movs	r3, #1
 80054f0:	683a      	ldr	r2, [r7, #0]
 80054f2:	f7ff fcd5 	bl	8004ea0 <disk_read>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d004      	beq.n	8005506 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80054fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005500:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005502:	2301      	movs	r3, #1
 8005504:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	683a      	ldr	r2, [r7, #0]
 800550a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800550c:	7bfb      	ldrb	r3, [r7, #15]
}
 800550e:	4618      	mov	r0, r3
 8005510:	3710      	adds	r7, #16
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
	...

08005518 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f7ff ff87 	bl	8005434 <sync_window>
 8005526:	4603      	mov	r3, r0
 8005528:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800552a:	7bfb      	ldrb	r3, [r7, #15]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d159      	bne.n	80055e4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	2b03      	cmp	r3, #3
 8005536:	d149      	bne.n	80055cc <sync_fs+0xb4>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	791b      	ldrb	r3, [r3, #4]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d145      	bne.n	80055cc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	899b      	ldrh	r3, [r3, #12]
 800554a:	461a      	mov	r2, r3
 800554c:	2100      	movs	r1, #0
 800554e:	f7ff fda8 	bl	80050a2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	3338      	adds	r3, #56	; 0x38
 8005556:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800555a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800555e:	4618      	mov	r0, r3
 8005560:	f7ff fd37 	bl	8004fd2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	3338      	adds	r3, #56	; 0x38
 8005568:	4921      	ldr	r1, [pc, #132]	; (80055f0 <sync_fs+0xd8>)
 800556a:	4618      	mov	r0, r3
 800556c:	f7ff fd4c 	bl	8005008 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	3338      	adds	r3, #56	; 0x38
 8005574:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005578:	491e      	ldr	r1, [pc, #120]	; (80055f4 <sync_fs+0xdc>)
 800557a:	4618      	mov	r0, r3
 800557c:	f7ff fd44 	bl	8005008 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	3338      	adds	r3, #56	; 0x38
 8005584:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	699b      	ldr	r3, [r3, #24]
 800558c:	4619      	mov	r1, r3
 800558e:	4610      	mov	r0, r2
 8005590:	f7ff fd3a 	bl	8005008 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	3338      	adds	r3, #56	; 0x38
 8005598:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	695b      	ldr	r3, [r3, #20]
 80055a0:	4619      	mov	r1, r3
 80055a2:	4610      	mov	r0, r2
 80055a4:	f7ff fd30 	bl	8005008 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ac:	1c5a      	adds	r2, r3, #1
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	7858      	ldrb	r0, [r3, #1]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055c0:	2301      	movs	r3, #1
 80055c2:	f7ff fc8d 	bl	8004ee0 <disk_write>
			fs->fsi_flag = 0;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	785b      	ldrb	r3, [r3, #1]
 80055d0:	2200      	movs	r2, #0
 80055d2:	2100      	movs	r1, #0
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7ff fca3 	bl	8004f20 <disk_ioctl>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d001      	beq.n	80055e4 <sync_fs+0xcc>
 80055e0:	2301      	movs	r3, #1
 80055e2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80055e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3710      	adds	r7, #16
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	41615252 	.word	0x41615252
 80055f4:	61417272 	.word	0x61417272

080055f8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	3b02      	subs	r3, #2
 8005606:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	69db      	ldr	r3, [r3, #28]
 800560c:	3b02      	subs	r3, #2
 800560e:	683a      	ldr	r2, [r7, #0]
 8005610:	429a      	cmp	r2, r3
 8005612:	d301      	bcc.n	8005618 <clust2sect+0x20>
 8005614:	2300      	movs	r3, #0
 8005616:	e008      	b.n	800562a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	895b      	ldrh	r3, [r3, #10]
 800561c:	461a      	mov	r2, r3
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	fb03 f202 	mul.w	r2, r3, r2
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005628:	4413      	add	r3, r2
}
 800562a:	4618      	mov	r0, r3
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005636:	b580      	push	{r7, lr}
 8005638:	b086      	sub	sp, #24
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
 800563e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d904      	bls.n	8005656 <get_fat+0x20>
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	69db      	ldr	r3, [r3, #28]
 8005650:	683a      	ldr	r2, [r7, #0]
 8005652:	429a      	cmp	r2, r3
 8005654:	d302      	bcc.n	800565c <get_fat+0x26>
		val = 1;	/* Internal error */
 8005656:	2301      	movs	r3, #1
 8005658:	617b      	str	r3, [r7, #20]
 800565a:	e0bb      	b.n	80057d4 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800565c:	f04f 33ff 	mov.w	r3, #4294967295
 8005660:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	2b03      	cmp	r3, #3
 8005668:	f000 8083 	beq.w	8005772 <get_fat+0x13c>
 800566c:	2b03      	cmp	r3, #3
 800566e:	f300 80a7 	bgt.w	80057c0 <get_fat+0x18a>
 8005672:	2b01      	cmp	r3, #1
 8005674:	d002      	beq.n	800567c <get_fat+0x46>
 8005676:	2b02      	cmp	r3, #2
 8005678:	d056      	beq.n	8005728 <get_fat+0xf2>
 800567a:	e0a1      	b.n	80057c0 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	60fb      	str	r3, [r7, #12]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	085b      	lsrs	r3, r3, #1
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	4413      	add	r3, r2
 8005688:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	899b      	ldrh	r3, [r3, #12]
 8005692:	4619      	mov	r1, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	fbb3 f3f1 	udiv	r3, r3, r1
 800569a:	4413      	add	r3, r2
 800569c:	4619      	mov	r1, r3
 800569e:	6938      	ldr	r0, [r7, #16]
 80056a0:	f7ff ff0c 	bl	80054bc <move_window>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f040 808d 	bne.w	80057c6 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	1c5a      	adds	r2, r3, #1
 80056b0:	60fa      	str	r2, [r7, #12]
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	8992      	ldrh	r2, [r2, #12]
 80056b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80056ba:	fb01 f202 	mul.w	r2, r1, r2
 80056be:	1a9b      	subs	r3, r3, r2
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	4413      	add	r3, r2
 80056c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80056c8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	899b      	ldrh	r3, [r3, #12]
 80056d2:	4619      	mov	r1, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80056da:	4413      	add	r3, r2
 80056dc:	4619      	mov	r1, r3
 80056de:	6938      	ldr	r0, [r7, #16]
 80056e0:	f7ff feec 	bl	80054bc <move_window>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d16f      	bne.n	80057ca <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	899b      	ldrh	r3, [r3, #12]
 80056ee:	461a      	mov	r2, r3
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80056f6:	fb01 f202 	mul.w	r2, r1, r2
 80056fa:	1a9b      	subs	r3, r3, r2
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	4413      	add	r3, r2
 8005700:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005704:	021b      	lsls	r3, r3, #8
 8005706:	461a      	mov	r2, r3
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	4313      	orrs	r3, r2
 800570c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	f003 0301 	and.w	r3, r3, #1
 8005714:	2b00      	cmp	r3, #0
 8005716:	d002      	beq.n	800571e <get_fat+0xe8>
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	091b      	lsrs	r3, r3, #4
 800571c:	e002      	b.n	8005724 <get_fat+0xee>
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005724:	617b      	str	r3, [r7, #20]
			break;
 8005726:	e055      	b.n	80057d4 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	899b      	ldrh	r3, [r3, #12]
 8005730:	085b      	lsrs	r3, r3, #1
 8005732:	b29b      	uxth	r3, r3
 8005734:	4619      	mov	r1, r3
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	fbb3 f3f1 	udiv	r3, r3, r1
 800573c:	4413      	add	r3, r2
 800573e:	4619      	mov	r1, r3
 8005740:	6938      	ldr	r0, [r7, #16]
 8005742:	f7ff febb 	bl	80054bc <move_window>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d140      	bne.n	80057ce <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	005b      	lsls	r3, r3, #1
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	8992      	ldrh	r2, [r2, #12]
 800575a:	fbb3 f0f2 	udiv	r0, r3, r2
 800575e:	fb00 f202 	mul.w	r2, r0, r2
 8005762:	1a9b      	subs	r3, r3, r2
 8005764:	440b      	add	r3, r1
 8005766:	4618      	mov	r0, r3
 8005768:	f7ff fbf8 	bl	8004f5c <ld_word>
 800576c:	4603      	mov	r3, r0
 800576e:	617b      	str	r3, [r7, #20]
			break;
 8005770:	e030      	b.n	80057d4 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	899b      	ldrh	r3, [r3, #12]
 800577a:	089b      	lsrs	r3, r3, #2
 800577c:	b29b      	uxth	r3, r3
 800577e:	4619      	mov	r1, r3
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	fbb3 f3f1 	udiv	r3, r3, r1
 8005786:	4413      	add	r3, r2
 8005788:	4619      	mov	r1, r3
 800578a:	6938      	ldr	r0, [r7, #16]
 800578c:	f7ff fe96 	bl	80054bc <move_window>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d11d      	bne.n	80057d2 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	8992      	ldrh	r2, [r2, #12]
 80057a4:	fbb3 f0f2 	udiv	r0, r3, r2
 80057a8:	fb00 f202 	mul.w	r2, r0, r2
 80057ac:	1a9b      	subs	r3, r3, r2
 80057ae:	440b      	add	r3, r1
 80057b0:	4618      	mov	r0, r3
 80057b2:	f7ff fbeb 	bl	8004f8c <ld_dword>
 80057b6:	4603      	mov	r3, r0
 80057b8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80057bc:	617b      	str	r3, [r7, #20]
			break;
 80057be:	e009      	b.n	80057d4 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80057c0:	2301      	movs	r3, #1
 80057c2:	617b      	str	r3, [r7, #20]
 80057c4:	e006      	b.n	80057d4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80057c6:	bf00      	nop
 80057c8:	e004      	b.n	80057d4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80057ca:	bf00      	nop
 80057cc:	e002      	b.n	80057d4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80057ce:	bf00      	nop
 80057d0:	e000      	b.n	80057d4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80057d2:	bf00      	nop
		}
	}

	return val;
 80057d4:	697b      	ldr	r3, [r7, #20]
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3718      	adds	r7, #24
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80057de:	b590      	push	{r4, r7, lr}
 80057e0:	b089      	sub	sp, #36	; 0x24
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	60f8      	str	r0, [r7, #12]
 80057e6:	60b9      	str	r1, [r7, #8]
 80057e8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80057ea:	2302      	movs	r3, #2
 80057ec:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	f240 8102 	bls.w	80059fa <put_fat+0x21c>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	69db      	ldr	r3, [r3, #28]
 80057fa:	68ba      	ldr	r2, [r7, #8]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	f080 80fc 	bcs.w	80059fa <put_fat+0x21c>
		switch (fs->fs_type) {
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	2b03      	cmp	r3, #3
 8005808:	f000 80b6 	beq.w	8005978 <put_fat+0x19a>
 800580c:	2b03      	cmp	r3, #3
 800580e:	f300 80fd 	bgt.w	8005a0c <put_fat+0x22e>
 8005812:	2b01      	cmp	r3, #1
 8005814:	d003      	beq.n	800581e <put_fat+0x40>
 8005816:	2b02      	cmp	r3, #2
 8005818:	f000 8083 	beq.w	8005922 <put_fat+0x144>
 800581c:	e0f6      	b.n	8005a0c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	61bb      	str	r3, [r7, #24]
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	085b      	lsrs	r3, r3, #1
 8005826:	69ba      	ldr	r2, [r7, #24]
 8005828:	4413      	add	r3, r2
 800582a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	899b      	ldrh	r3, [r3, #12]
 8005834:	4619      	mov	r1, r3
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	fbb3 f3f1 	udiv	r3, r3, r1
 800583c:	4413      	add	r3, r2
 800583e:	4619      	mov	r1, r3
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f7ff fe3b 	bl	80054bc <move_window>
 8005846:	4603      	mov	r3, r0
 8005848:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800584a:	7ffb      	ldrb	r3, [r7, #31]
 800584c:	2b00      	cmp	r3, #0
 800584e:	f040 80d6 	bne.w	80059fe <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	1c5a      	adds	r2, r3, #1
 800585c:	61ba      	str	r2, [r7, #24]
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	8992      	ldrh	r2, [r2, #12]
 8005862:	fbb3 f0f2 	udiv	r0, r3, r2
 8005866:	fb00 f202 	mul.w	r2, r0, r2
 800586a:	1a9b      	subs	r3, r3, r2
 800586c:	440b      	add	r3, r1
 800586e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	f003 0301 	and.w	r3, r3, #1
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00d      	beq.n	8005896 <put_fat+0xb8>
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	b25b      	sxtb	r3, r3
 8005880:	f003 030f 	and.w	r3, r3, #15
 8005884:	b25a      	sxtb	r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	b2db      	uxtb	r3, r3
 800588a:	011b      	lsls	r3, r3, #4
 800588c:	b25b      	sxtb	r3, r3
 800588e:	4313      	orrs	r3, r2
 8005890:	b25b      	sxtb	r3, r3
 8005892:	b2db      	uxtb	r3, r3
 8005894:	e001      	b.n	800589a <put_fat+0xbc>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	b2db      	uxtb	r3, r3
 800589a:	697a      	ldr	r2, [r7, #20]
 800589c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2201      	movs	r2, #1
 80058a2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	899b      	ldrh	r3, [r3, #12]
 80058ac:	4619      	mov	r1, r3
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80058b4:	4413      	add	r3, r2
 80058b6:	4619      	mov	r1, r3
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	f7ff fdff 	bl	80054bc <move_window>
 80058be:	4603      	mov	r3, r0
 80058c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80058c2:	7ffb      	ldrb	r3, [r7, #31]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f040 809c 	bne.w	8005a02 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	899b      	ldrh	r3, [r3, #12]
 80058d4:	461a      	mov	r2, r3
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	fbb3 f0f2 	udiv	r0, r3, r2
 80058dc:	fb00 f202 	mul.w	r2, r0, r2
 80058e0:	1a9b      	subs	r3, r3, r2
 80058e2:	440b      	add	r3, r1
 80058e4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d003      	beq.n	80058f8 <put_fat+0x11a>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	091b      	lsrs	r3, r3, #4
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	e00e      	b.n	8005916 <put_fat+0x138>
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	b25b      	sxtb	r3, r3
 80058fe:	f023 030f 	bic.w	r3, r3, #15
 8005902:	b25a      	sxtb	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	0a1b      	lsrs	r3, r3, #8
 8005908:	b25b      	sxtb	r3, r3
 800590a:	f003 030f 	and.w	r3, r3, #15
 800590e:	b25b      	sxtb	r3, r3
 8005910:	4313      	orrs	r3, r2
 8005912:	b25b      	sxtb	r3, r3
 8005914:	b2db      	uxtb	r3, r3
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2201      	movs	r2, #1
 800591e:	70da      	strb	r2, [r3, #3]
			break;
 8005920:	e074      	b.n	8005a0c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	899b      	ldrh	r3, [r3, #12]
 800592a:	085b      	lsrs	r3, r3, #1
 800592c:	b29b      	uxth	r3, r3
 800592e:	4619      	mov	r1, r3
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	fbb3 f3f1 	udiv	r3, r3, r1
 8005936:	4413      	add	r3, r2
 8005938:	4619      	mov	r1, r3
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f7ff fdbe 	bl	80054bc <move_window>
 8005940:	4603      	mov	r3, r0
 8005942:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005944:	7ffb      	ldrb	r3, [r7, #31]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d15d      	bne.n	8005a06 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	005b      	lsls	r3, r3, #1
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	8992      	ldrh	r2, [r2, #12]
 8005958:	fbb3 f0f2 	udiv	r0, r3, r2
 800595c:	fb00 f202 	mul.w	r2, r0, r2
 8005960:	1a9b      	subs	r3, r3, r2
 8005962:	440b      	add	r3, r1
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	b292      	uxth	r2, r2
 8005968:	4611      	mov	r1, r2
 800596a:	4618      	mov	r0, r3
 800596c:	f7ff fb31 	bl	8004fd2 <st_word>
			fs->wflag = 1;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2201      	movs	r2, #1
 8005974:	70da      	strb	r2, [r3, #3]
			break;
 8005976:	e049      	b.n	8005a0c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	899b      	ldrh	r3, [r3, #12]
 8005980:	089b      	lsrs	r3, r3, #2
 8005982:	b29b      	uxth	r3, r3
 8005984:	4619      	mov	r1, r3
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	fbb3 f3f1 	udiv	r3, r3, r1
 800598c:	4413      	add	r3, r2
 800598e:	4619      	mov	r1, r3
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f7ff fd93 	bl	80054bc <move_window>
 8005996:	4603      	mov	r3, r0
 8005998:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800599a:	7ffb      	ldrb	r3, [r7, #31]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d134      	bne.n	8005a0a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	8992      	ldrh	r2, [r2, #12]
 80059b4:	fbb3 f0f2 	udiv	r0, r3, r2
 80059b8:	fb00 f202 	mul.w	r2, r0, r2
 80059bc:	1a9b      	subs	r3, r3, r2
 80059be:	440b      	add	r3, r1
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7ff fae3 	bl	8004f8c <ld_dword>
 80059c6:	4603      	mov	r3, r0
 80059c8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80059cc:	4323      	orrs	r3, r4
 80059ce:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	8992      	ldrh	r2, [r2, #12]
 80059de:	fbb3 f0f2 	udiv	r0, r3, r2
 80059e2:	fb00 f202 	mul.w	r2, r0, r2
 80059e6:	1a9b      	subs	r3, r3, r2
 80059e8:	440b      	add	r3, r1
 80059ea:	6879      	ldr	r1, [r7, #4]
 80059ec:	4618      	mov	r0, r3
 80059ee:	f7ff fb0b 	bl	8005008 <st_dword>
			fs->wflag = 1;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2201      	movs	r2, #1
 80059f6:	70da      	strb	r2, [r3, #3]
			break;
 80059f8:	e008      	b.n	8005a0c <put_fat+0x22e>
		}
	}
 80059fa:	bf00      	nop
 80059fc:	e006      	b.n	8005a0c <put_fat+0x22e>
			if (res != FR_OK) break;
 80059fe:	bf00      	nop
 8005a00:	e004      	b.n	8005a0c <put_fat+0x22e>
			if (res != FR_OK) break;
 8005a02:	bf00      	nop
 8005a04:	e002      	b.n	8005a0c <put_fat+0x22e>
			if (res != FR_OK) break;
 8005a06:	bf00      	nop
 8005a08:	e000      	b.n	8005a0c <put_fat+0x22e>
			if (res != FR_OK) break;
 8005a0a:	bf00      	nop
	return res;
 8005a0c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3724      	adds	r7, #36	; 0x24
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd90      	pop	{r4, r7, pc}

08005a16 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005a16:	b580      	push	{r7, lr}
 8005a18:	b088      	sub	sp, #32
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	60f8      	str	r0, [r7, #12]
 8005a1e:	60b9      	str	r1, [r7, #8]
 8005a20:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005a22:	2300      	movs	r3, #0
 8005a24:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d904      	bls.n	8005a3c <remove_chain+0x26>
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	69db      	ldr	r3, [r3, #28]
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d301      	bcc.n	8005a40 <remove_chain+0x2a>
 8005a3c:	2302      	movs	r3, #2
 8005a3e:	e04b      	b.n	8005ad8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00c      	beq.n	8005a60 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005a46:	f04f 32ff 	mov.w	r2, #4294967295
 8005a4a:	6879      	ldr	r1, [r7, #4]
 8005a4c:	69b8      	ldr	r0, [r7, #24]
 8005a4e:	f7ff fec6 	bl	80057de <put_fat>
 8005a52:	4603      	mov	r3, r0
 8005a54:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005a56:	7ffb      	ldrb	r3, [r7, #31]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d001      	beq.n	8005a60 <remove_chain+0x4a>
 8005a5c:	7ffb      	ldrb	r3, [r7, #31]
 8005a5e:	e03b      	b.n	8005ad8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005a60:	68b9      	ldr	r1, [r7, #8]
 8005a62:	68f8      	ldr	r0, [r7, #12]
 8005a64:	f7ff fde7 	bl	8005636 <get_fat>
 8005a68:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d031      	beq.n	8005ad4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d101      	bne.n	8005a7a <remove_chain+0x64>
 8005a76:	2302      	movs	r3, #2
 8005a78:	e02e      	b.n	8005ad8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a80:	d101      	bne.n	8005a86 <remove_chain+0x70>
 8005a82:	2301      	movs	r3, #1
 8005a84:	e028      	b.n	8005ad8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005a86:	2200      	movs	r2, #0
 8005a88:	68b9      	ldr	r1, [r7, #8]
 8005a8a:	69b8      	ldr	r0, [r7, #24]
 8005a8c:	f7ff fea7 	bl	80057de <put_fat>
 8005a90:	4603      	mov	r3, r0
 8005a92:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005a94:	7ffb      	ldrb	r3, [r7, #31]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d001      	beq.n	8005a9e <remove_chain+0x88>
 8005a9a:	7ffb      	ldrb	r3, [r7, #31]
 8005a9c:	e01c      	b.n	8005ad8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	699a      	ldr	r2, [r3, #24]
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	69db      	ldr	r3, [r3, #28]
 8005aa6:	3b02      	subs	r3, #2
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d20b      	bcs.n	8005ac4 <remove_chain+0xae>
			fs->free_clst++;
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	699b      	ldr	r3, [r3, #24]
 8005ab0:	1c5a      	adds	r2, r3, #1
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	791b      	ldrb	r3, [r3, #4]
 8005aba:	f043 0301 	orr.w	r3, r3, #1
 8005abe:	b2da      	uxtb	r2, r3
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	69db      	ldr	r3, [r3, #28]
 8005acc:	68ba      	ldr	r2, [r7, #8]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d3c6      	bcc.n	8005a60 <remove_chain+0x4a>
 8005ad2:	e000      	b.n	8005ad6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005ad4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3720      	adds	r7, #32
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b088      	sub	sp, #32
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d10d      	bne.n	8005b12 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d004      	beq.n	8005b0c <create_chain+0x2c>
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	69db      	ldr	r3, [r3, #28]
 8005b06:	69ba      	ldr	r2, [r7, #24]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d31b      	bcc.n	8005b44 <create_chain+0x64>
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	61bb      	str	r3, [r7, #24]
 8005b10:	e018      	b.n	8005b44 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005b12:	6839      	ldr	r1, [r7, #0]
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f7ff fd8e 	bl	8005636 <get_fat>
 8005b1a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d801      	bhi.n	8005b26 <create_chain+0x46>
 8005b22:	2301      	movs	r3, #1
 8005b24:	e070      	b.n	8005c08 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2c:	d101      	bne.n	8005b32 <create_chain+0x52>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	e06a      	b.n	8005c08 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d201      	bcs.n	8005b40 <create_chain+0x60>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	e063      	b.n	8005c08 <create_chain+0x128>
		scl = clst;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	69db      	ldr	r3, [r3, #28]
 8005b52:	69fa      	ldr	r2, [r7, #28]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d307      	bcc.n	8005b68 <create_chain+0x88>
				ncl = 2;
 8005b58:	2302      	movs	r3, #2
 8005b5a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005b5c:	69fa      	ldr	r2, [r7, #28]
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d901      	bls.n	8005b68 <create_chain+0x88>
 8005b64:	2300      	movs	r3, #0
 8005b66:	e04f      	b.n	8005c08 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005b68:	69f9      	ldr	r1, [r7, #28]
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f7ff fd63 	bl	8005636 <get_fat>
 8005b70:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00e      	beq.n	8005b96 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d003      	beq.n	8005b86 <create_chain+0xa6>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b84:	d101      	bne.n	8005b8a <create_chain+0xaa>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	e03e      	b.n	8005c08 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005b8a:	69fa      	ldr	r2, [r7, #28]
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d1da      	bne.n	8005b48 <create_chain+0x68>
 8005b92:	2300      	movs	r3, #0
 8005b94:	e038      	b.n	8005c08 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005b96:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005b98:	f04f 32ff 	mov.w	r2, #4294967295
 8005b9c:	69f9      	ldr	r1, [r7, #28]
 8005b9e:	6938      	ldr	r0, [r7, #16]
 8005ba0:	f7ff fe1d 	bl	80057de <put_fat>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005ba8:	7dfb      	ldrb	r3, [r7, #23]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d109      	bne.n	8005bc2 <create_chain+0xe2>
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d006      	beq.n	8005bc2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005bb4:	69fa      	ldr	r2, [r7, #28]
 8005bb6:	6839      	ldr	r1, [r7, #0]
 8005bb8:	6938      	ldr	r0, [r7, #16]
 8005bba:	f7ff fe10 	bl	80057de <put_fat>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005bc2:	7dfb      	ldrb	r3, [r7, #23]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d116      	bne.n	8005bf6 <create_chain+0x116>
		fs->last_clst = ncl;
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	69fa      	ldr	r2, [r7, #28]
 8005bcc:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	699a      	ldr	r2, [r3, #24]
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	69db      	ldr	r3, [r3, #28]
 8005bd6:	3b02      	subs	r3, #2
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d804      	bhi.n	8005be6 <create_chain+0x106>
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	1e5a      	subs	r2, r3, #1
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	791b      	ldrb	r3, [r3, #4]
 8005bea:	f043 0301 	orr.w	r3, r3, #1
 8005bee:	b2da      	uxtb	r2, r3
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	711a      	strb	r2, [r3, #4]
 8005bf4:	e007      	b.n	8005c06 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005bf6:	7dfb      	ldrb	r3, [r7, #23]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d102      	bne.n	8005c02 <create_chain+0x122>
 8005bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8005c00:	e000      	b.n	8005c04 <create_chain+0x124>
 8005c02:	2301      	movs	r3, #1
 8005c04:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005c06:	69fb      	ldr	r3, [r7, #28]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3720      	adds	r7, #32
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b087      	sub	sp, #28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c24:	3304      	adds	r3, #4
 8005c26:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	899b      	ldrh	r3, [r3, #12]
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	8952      	ldrh	r2, [r2, #10]
 8005c38:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c3c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	1d1a      	adds	r2, r3, #4
 8005c42:	613a      	str	r2, [r7, #16]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d101      	bne.n	8005c52 <clmt_clust+0x42>
 8005c4e:	2300      	movs	r3, #0
 8005c50:	e010      	b.n	8005c74 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d307      	bcc.n	8005c6a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	617b      	str	r3, [r7, #20]
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	3304      	adds	r3, #4
 8005c66:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005c68:	e7e9      	b.n	8005c3e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8005c6a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	4413      	add	r3, r2
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	371c      	adds	r7, #28
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b086      	sub	sp, #24
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c96:	d204      	bcs.n	8005ca2 <dir_sdi+0x22>
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	f003 031f 	and.w	r3, r3, #31
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d001      	beq.n	8005ca6 <dir_sdi+0x26>
		return FR_INT_ERR;
 8005ca2:	2302      	movs	r3, #2
 8005ca4:	e071      	b.n	8005d8a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	683a      	ldr	r2, [r7, #0]
 8005caa:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d106      	bne.n	8005cc6 <dir_sdi+0x46>
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d902      	bls.n	8005cc6 <dir_sdi+0x46>
		clst = fs->dirbase;
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d10c      	bne.n	8005ce6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	095b      	lsrs	r3, r3, #5
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	8912      	ldrh	r2, [r2, #8]
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d301      	bcc.n	8005cdc <dir_sdi+0x5c>
 8005cd8:	2302      	movs	r3, #2
 8005cda:	e056      	b.n	8005d8a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	61da      	str	r2, [r3, #28]
 8005ce4:	e02d      	b.n	8005d42 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	895b      	ldrh	r3, [r3, #10]
 8005cea:	461a      	mov	r2, r3
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	899b      	ldrh	r3, [r3, #12]
 8005cf0:	fb02 f303 	mul.w	r3, r2, r3
 8005cf4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005cf6:	e019      	b.n	8005d2c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6979      	ldr	r1, [r7, #20]
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7ff fc9a 	bl	8005636 <get_fat>
 8005d02:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d0a:	d101      	bne.n	8005d10 <dir_sdi+0x90>
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e03c      	b.n	8005d8a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d904      	bls.n	8005d20 <dir_sdi+0xa0>
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	69db      	ldr	r3, [r3, #28]
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d301      	bcc.n	8005d24 <dir_sdi+0xa4>
 8005d20:	2302      	movs	r3, #2
 8005d22:	e032      	b.n	8005d8a <dir_sdi+0x10a>
			ofs -= csz;
 8005d24:	683a      	ldr	r2, [r7, #0]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005d2c:	683a      	ldr	r2, [r7, #0]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d2e1      	bcs.n	8005cf8 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005d34:	6979      	ldr	r1, [r7, #20]
 8005d36:	6938      	ldr	r0, [r7, #16]
 8005d38:	f7ff fc5e 	bl	80055f8 <clust2sect>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	697a      	ldr	r2, [r7, #20]
 8005d46:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	69db      	ldr	r3, [r3, #28]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d101      	bne.n	8005d54 <dir_sdi+0xd4>
 8005d50:	2302      	movs	r3, #2
 8005d52:	e01a      	b.n	8005d8a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	69da      	ldr	r2, [r3, #28]
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	899b      	ldrh	r3, [r3, #12]
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d64:	441a      	add	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	899b      	ldrh	r3, [r3, #12]
 8005d74:	461a      	mov	r2, r3
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	fbb3 f0f2 	udiv	r0, r3, r2
 8005d7c:	fb00 f202 	mul.w	r2, r0, r2
 8005d80:	1a9b      	subs	r3, r3, r2
 8005d82:	18ca      	adds	r2, r1, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3718      	adds	r7, #24
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}

08005d92 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b086      	sub	sp, #24
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
 8005d9a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	3320      	adds	r3, #32
 8005da8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	69db      	ldr	r3, [r3, #28]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d003      	beq.n	8005dba <dir_next+0x28>
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005db8:	d301      	bcc.n	8005dbe <dir_next+0x2c>
 8005dba:	2304      	movs	r3, #4
 8005dbc:	e0bb      	b.n	8005f36 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	899b      	ldrh	r3, [r3, #12]
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	fbb3 f1f2 	udiv	r1, r3, r2
 8005dca:	fb01 f202 	mul.w	r2, r1, r2
 8005dce:	1a9b      	subs	r3, r3, r2
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f040 809d 	bne.w	8005f10 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	1c5a      	adds	r2, r3, #1
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	699b      	ldr	r3, [r3, #24]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d10b      	bne.n	8005e00 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	095b      	lsrs	r3, r3, #5
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	8912      	ldrh	r2, [r2, #8]
 8005df0:	4293      	cmp	r3, r2
 8005df2:	f0c0 808d 	bcc.w	8005f10 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	61da      	str	r2, [r3, #28]
 8005dfc:	2304      	movs	r3, #4
 8005dfe:	e09a      	b.n	8005f36 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	899b      	ldrh	r3, [r3, #12]
 8005e04:	461a      	mov	r2, r3
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	8952      	ldrh	r2, [r2, #10]
 8005e10:	3a01      	subs	r2, #1
 8005e12:	4013      	ands	r3, r2
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d17b      	bne.n	8005f10 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	4619      	mov	r1, r3
 8005e20:	4610      	mov	r0, r2
 8005e22:	f7ff fc08 	bl	8005636 <get_fat>
 8005e26:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d801      	bhi.n	8005e32 <dir_next+0xa0>
 8005e2e:	2302      	movs	r3, #2
 8005e30:	e081      	b.n	8005f36 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e38:	d101      	bne.n	8005e3e <dir_next+0xac>
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e07b      	b.n	8005f36 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	69db      	ldr	r3, [r3, #28]
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d359      	bcc.n	8005efc <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d104      	bne.n	8005e58 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	61da      	str	r2, [r3, #28]
 8005e54:	2304      	movs	r3, #4
 8005e56:	e06e      	b.n	8005f36 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	699b      	ldr	r3, [r3, #24]
 8005e5e:	4619      	mov	r1, r3
 8005e60:	4610      	mov	r0, r2
 8005e62:	f7ff fe3d 	bl	8005ae0 <create_chain>
 8005e66:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d101      	bne.n	8005e72 <dir_next+0xe0>
 8005e6e:	2307      	movs	r3, #7
 8005e70:	e061      	b.n	8005f36 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d101      	bne.n	8005e7c <dir_next+0xea>
 8005e78:	2302      	movs	r3, #2
 8005e7a:	e05c      	b.n	8005f36 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e82:	d101      	bne.n	8005e88 <dir_next+0xf6>
 8005e84:	2301      	movs	r3, #1
 8005e86:	e056      	b.n	8005f36 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f7ff fad3 	bl	8005434 <sync_window>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d001      	beq.n	8005e98 <dir_next+0x106>
 8005e94:	2301      	movs	r3, #1
 8005e96:	e04e      	b.n	8005f36 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	899b      	ldrh	r3, [r3, #12]
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	2100      	movs	r1, #0
 8005ea6:	f7ff f8fc 	bl	80050a2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005eaa:	2300      	movs	r3, #0
 8005eac:	613b      	str	r3, [r7, #16]
 8005eae:	6979      	ldr	r1, [r7, #20]
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f7ff fba1 	bl	80055f8 <clust2sect>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	635a      	str	r2, [r3, #52]	; 0x34
 8005ebc:	e012      	b.n	8005ee4 <dir_next+0x152>
						fs->wflag = 1;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005ec4:	68f8      	ldr	r0, [r7, #12]
 8005ec6:	f7ff fab5 	bl	8005434 <sync_window>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d001      	beq.n	8005ed4 <dir_next+0x142>
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e030      	b.n	8005f36 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	613b      	str	r3, [r7, #16]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ede:	1c5a      	adds	r2, r3, #1
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	635a      	str	r2, [r3, #52]	; 0x34
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	895b      	ldrh	r3, [r3, #10]
 8005ee8:	461a      	mov	r2, r3
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d3e6      	bcc.n	8005ebe <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	1ad2      	subs	r2, r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	697a      	ldr	r2, [r7, #20]
 8005f00:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005f02:	6979      	ldr	r1, [r7, #20]
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f7ff fb77 	bl	80055f8 <clust2sect>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	68ba      	ldr	r2, [r7, #8]
 8005f14:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	899b      	ldrh	r3, [r3, #12]
 8005f20:	461a      	mov	r2, r3
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	fbb3 f0f2 	udiv	r0, r3, r2
 8005f28:	fb00 f202 	mul.w	r2, r0, r2
 8005f2c:	1a9b      	subs	r3, r3, r2
 8005f2e:	18ca      	adds	r2, r1, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3718      	adds	r7, #24
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	b086      	sub	sp, #24
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
 8005f46:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005f4e:	2100      	movs	r1, #0
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f7ff fe95 	bl	8005c80 <dir_sdi>
 8005f56:	4603      	mov	r3, r0
 8005f58:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005f5a:	7dfb      	ldrb	r3, [r7, #23]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d12b      	bne.n	8005fb8 <dir_alloc+0x7a>
		n = 0;
 8005f60:	2300      	movs	r3, #0
 8005f62:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	69db      	ldr	r3, [r3, #28]
 8005f68:	4619      	mov	r1, r3
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f7ff faa6 	bl	80054bc <move_window>
 8005f70:	4603      	mov	r3, r0
 8005f72:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005f74:	7dfb      	ldrb	r3, [r7, #23]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d11d      	bne.n	8005fb6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	2be5      	cmp	r3, #229	; 0xe5
 8005f82:	d004      	beq.n	8005f8e <dir_alloc+0x50>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a1b      	ldr	r3, [r3, #32]
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d107      	bne.n	8005f9e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	3301      	adds	r3, #1
 8005f92:	613b      	str	r3, [r7, #16]
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d102      	bne.n	8005fa2 <dir_alloc+0x64>
 8005f9c:	e00c      	b.n	8005fb8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005fa2:	2101      	movs	r1, #1
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f7ff fef4 	bl	8005d92 <dir_next>
 8005faa:	4603      	mov	r3, r0
 8005fac:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005fae:	7dfb      	ldrb	r3, [r7, #23]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d0d7      	beq.n	8005f64 <dir_alloc+0x26>
 8005fb4:	e000      	b.n	8005fb8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005fb6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005fb8:	7dfb      	ldrb	r3, [r7, #23]
 8005fba:	2b04      	cmp	r3, #4
 8005fbc:	d101      	bne.n	8005fc2 <dir_alloc+0x84>
 8005fbe:	2307      	movs	r3, #7
 8005fc0:	75fb      	strb	r3, [r7, #23]
	return res;
 8005fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3718      	adds	r7, #24
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	331a      	adds	r3, #26
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7fe ffbe 	bl	8004f5c <ld_word>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	2b03      	cmp	r3, #3
 8005fea:	d109      	bne.n	8006000 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	3314      	adds	r3, #20
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f7fe ffb3 	bl	8004f5c <ld_word>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	041b      	lsls	r3, r3, #16
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006000:	68fb      	ldr	r3, [r7, #12]
}
 8006002:	4618      	mov	r0, r3
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}

0800600a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800600a:	b580      	push	{r7, lr}
 800600c:	b084      	sub	sp, #16
 800600e:	af00      	add	r7, sp, #0
 8006010:	60f8      	str	r0, [r7, #12]
 8006012:	60b9      	str	r1, [r7, #8]
 8006014:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	331a      	adds	r3, #26
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	b292      	uxth	r2, r2
 800601e:	4611      	mov	r1, r2
 8006020:	4618      	mov	r0, r3
 8006022:	f7fe ffd6 	bl	8004fd2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	2b03      	cmp	r3, #3
 800602c:	d109      	bne.n	8006042 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	f103 0214 	add.w	r2, r3, #20
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	0c1b      	lsrs	r3, r3, #16
 8006038:	b29b      	uxth	r3, r3
 800603a:	4619      	mov	r1, r3
 800603c:	4610      	mov	r0, r2
 800603e:	f7fe ffc8 	bl	8004fd2 <st_word>
	}
}
 8006042:	bf00      	nop
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
	...

0800604c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800604c:	b590      	push	{r4, r7, lr}
 800604e:	b087      	sub	sp, #28
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	331a      	adds	r3, #26
 800605a:	4618      	mov	r0, r3
 800605c:	f7fe ff7e 	bl	8004f5c <ld_word>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d001      	beq.n	800606a <cmp_lfn+0x1e>
 8006066:	2300      	movs	r3, #0
 8006068:	e059      	b.n	800611e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006072:	1e5a      	subs	r2, r3, #1
 8006074:	4613      	mov	r3, r2
 8006076:	005b      	lsls	r3, r3, #1
 8006078:	4413      	add	r3, r2
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	4413      	add	r3, r2
 800607e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006080:	2301      	movs	r3, #1
 8006082:	81fb      	strh	r3, [r7, #14]
 8006084:	2300      	movs	r3, #0
 8006086:	613b      	str	r3, [r7, #16]
 8006088:	e033      	b.n	80060f2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800608a:	4a27      	ldr	r2, [pc, #156]	; (8006128 <cmp_lfn+0xdc>)
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	4413      	add	r3, r2
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	461a      	mov	r2, r3
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	4413      	add	r3, r2
 8006098:	4618      	mov	r0, r3
 800609a:	f7fe ff5f 	bl	8004f5c <ld_word>
 800609e:	4603      	mov	r3, r0
 80060a0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80060a2:	89fb      	ldrh	r3, [r7, #14]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d01a      	beq.n	80060de <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	2bfe      	cmp	r3, #254	; 0xfe
 80060ac:	d812      	bhi.n	80060d4 <cmp_lfn+0x88>
 80060ae:	89bb      	ldrh	r3, [r7, #12]
 80060b0:	4618      	mov	r0, r3
 80060b2:	f001 fd41 	bl	8007b38 <ff_wtoupper>
 80060b6:	4603      	mov	r3, r0
 80060b8:	461c      	mov	r4, r3
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	1c5a      	adds	r2, r3, #1
 80060be:	617a      	str	r2, [r7, #20]
 80060c0:	005b      	lsls	r3, r3, #1
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	4413      	add	r3, r2
 80060c6:	881b      	ldrh	r3, [r3, #0]
 80060c8:	4618      	mov	r0, r3
 80060ca:	f001 fd35 	bl	8007b38 <ff_wtoupper>
 80060ce:	4603      	mov	r3, r0
 80060d0:	429c      	cmp	r4, r3
 80060d2:	d001      	beq.n	80060d8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80060d4:	2300      	movs	r3, #0
 80060d6:	e022      	b.n	800611e <cmp_lfn+0xd2>
			}
			wc = uc;
 80060d8:	89bb      	ldrh	r3, [r7, #12]
 80060da:	81fb      	strh	r3, [r7, #14]
 80060dc:	e006      	b.n	80060ec <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80060de:	89bb      	ldrh	r3, [r7, #12]
 80060e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d001      	beq.n	80060ec <cmp_lfn+0xa0>
 80060e8:	2300      	movs	r3, #0
 80060ea:	e018      	b.n	800611e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	3301      	adds	r3, #1
 80060f0:	613b      	str	r3, [r7, #16]
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	2b0c      	cmp	r3, #12
 80060f6:	d9c8      	bls.n	800608a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00b      	beq.n	800611c <cmp_lfn+0xd0>
 8006104:	89fb      	ldrh	r3, [r7, #14]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d008      	beq.n	800611c <cmp_lfn+0xd0>
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	005b      	lsls	r3, r3, #1
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	4413      	add	r3, r2
 8006112:	881b      	ldrh	r3, [r3, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d001      	beq.n	800611c <cmp_lfn+0xd0>
 8006118:	2300      	movs	r3, #0
 800611a:	e000      	b.n	800611e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800611c:	2301      	movs	r3, #1
}
 800611e:	4618      	mov	r0, r3
 8006120:	371c      	adds	r7, #28
 8006122:	46bd      	mov	sp, r7
 8006124:	bd90      	pop	{r4, r7, pc}
 8006126:	bf00      	nop
 8006128:	080091ac 	.word	0x080091ac

0800612c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b088      	sub	sp, #32
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	4611      	mov	r1, r2
 8006138:	461a      	mov	r2, r3
 800613a:	460b      	mov	r3, r1
 800613c:	71fb      	strb	r3, [r7, #7]
 800613e:	4613      	mov	r3, r2
 8006140:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	330d      	adds	r3, #13
 8006146:	79ba      	ldrb	r2, [r7, #6]
 8006148:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	330b      	adds	r3, #11
 800614e:	220f      	movs	r2, #15
 8006150:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	330c      	adds	r3, #12
 8006156:	2200      	movs	r2, #0
 8006158:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	331a      	adds	r3, #26
 800615e:	2100      	movs	r1, #0
 8006160:	4618      	mov	r0, r3
 8006162:	f7fe ff36 	bl	8004fd2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006166:	79fb      	ldrb	r3, [r7, #7]
 8006168:	1e5a      	subs	r2, r3, #1
 800616a:	4613      	mov	r3, r2
 800616c:	005b      	lsls	r3, r3, #1
 800616e:	4413      	add	r3, r2
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	4413      	add	r3, r2
 8006174:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006176:	2300      	movs	r3, #0
 8006178:	82fb      	strh	r3, [r7, #22]
 800617a:	2300      	movs	r3, #0
 800617c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800617e:	8afb      	ldrh	r3, [r7, #22]
 8006180:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006184:	4293      	cmp	r3, r2
 8006186:	d007      	beq.n	8006198 <put_lfn+0x6c>
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	1c5a      	adds	r2, r3, #1
 800618c:	61fa      	str	r2, [r7, #28]
 800618e:	005b      	lsls	r3, r3, #1
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	4413      	add	r3, r2
 8006194:	881b      	ldrh	r3, [r3, #0]
 8006196:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006198:	4a17      	ldr	r2, [pc, #92]	; (80061f8 <put_lfn+0xcc>)
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	4413      	add	r3, r2
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	461a      	mov	r2, r3
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	4413      	add	r3, r2
 80061a6:	8afa      	ldrh	r2, [r7, #22]
 80061a8:	4611      	mov	r1, r2
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7fe ff11 	bl	8004fd2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80061b0:	8afb      	ldrh	r3, [r7, #22]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d102      	bne.n	80061bc <put_lfn+0x90>
 80061b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80061ba:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	3301      	adds	r3, #1
 80061c0:	61bb      	str	r3, [r7, #24]
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	2b0c      	cmp	r3, #12
 80061c6:	d9da      	bls.n	800617e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80061c8:	8afb      	ldrh	r3, [r7, #22]
 80061ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d006      	beq.n	80061e0 <put_lfn+0xb4>
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	005b      	lsls	r3, r3, #1
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	4413      	add	r3, r2
 80061da:	881b      	ldrh	r3, [r3, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d103      	bne.n	80061e8 <put_lfn+0xbc>
 80061e0:	79fb      	ldrb	r3, [r7, #7]
 80061e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061e6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	79fa      	ldrb	r2, [r7, #7]
 80061ec:	701a      	strb	r2, [r3, #0]
}
 80061ee:	bf00      	nop
 80061f0:	3720      	adds	r7, #32
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	080091ac 	.word	0x080091ac

080061fc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b08c      	sub	sp, #48	; 0x30
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]
 8006208:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800620a:	220b      	movs	r2, #11
 800620c:	68b9      	ldr	r1, [r7, #8]
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	f7fe ff26 	bl	8005060 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	2b05      	cmp	r3, #5
 8006218:	d92b      	bls.n	8006272 <gen_numname+0x76>
		sr = seq;
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800621e:	e022      	b.n	8006266 <gen_numname+0x6a>
			wc = *lfn++;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	1c9a      	adds	r2, r3, #2
 8006224:	607a      	str	r2, [r7, #4]
 8006226:	881b      	ldrh	r3, [r3, #0]
 8006228:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800622a:	2300      	movs	r3, #0
 800622c:	62bb      	str	r3, [r7, #40]	; 0x28
 800622e:	e017      	b.n	8006260 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	005a      	lsls	r2, r3, #1
 8006234:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006236:	f003 0301 	and.w	r3, r3, #1
 800623a:	4413      	add	r3, r2
 800623c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800623e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006240:	085b      	lsrs	r3, r3, #1
 8006242:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800624a:	2b00      	cmp	r3, #0
 800624c:	d005      	beq.n	800625a <gen_numname+0x5e>
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8006254:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8006258:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800625a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625c:	3301      	adds	r3, #1
 800625e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006262:	2b0f      	cmp	r3, #15
 8006264:	d9e4      	bls.n	8006230 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	881b      	ldrh	r3, [r3, #0]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d1d8      	bne.n	8006220 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006272:	2307      	movs	r3, #7
 8006274:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	b2db      	uxtb	r3, r3
 800627a:	f003 030f 	and.w	r3, r3, #15
 800627e:	b2db      	uxtb	r3, r3
 8006280:	3330      	adds	r3, #48	; 0x30
 8006282:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006286:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800628a:	2b39      	cmp	r3, #57	; 0x39
 800628c:	d904      	bls.n	8006298 <gen_numname+0x9c>
 800628e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006292:	3307      	adds	r3, #7
 8006294:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629a:	1e5a      	subs	r2, r3, #1
 800629c:	62ba      	str	r2, [r7, #40]	; 0x28
 800629e:	3330      	adds	r3, #48	; 0x30
 80062a0:	443b      	add	r3, r7
 80062a2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80062a6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	091b      	lsrs	r3, r3, #4
 80062ae:	603b      	str	r3, [r7, #0]
	} while (seq);
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d1df      	bne.n	8006276 <gen_numname+0x7a>
	ns[i] = '~';
 80062b6:	f107 0214 	add.w	r2, r7, #20
 80062ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062bc:	4413      	add	r3, r2
 80062be:	227e      	movs	r2, #126	; 0x7e
 80062c0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80062c2:	2300      	movs	r3, #0
 80062c4:	627b      	str	r3, [r7, #36]	; 0x24
 80062c6:	e002      	b.n	80062ce <gen_numname+0xd2>
 80062c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ca:	3301      	adds	r3, #1
 80062cc:	627b      	str	r3, [r7, #36]	; 0x24
 80062ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d205      	bcs.n	80062e2 <gen_numname+0xe6>
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062da:	4413      	add	r3, r2
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	2b20      	cmp	r3, #32
 80062e0:	d1f2      	bne.n	80062c8 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80062e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e4:	2b07      	cmp	r3, #7
 80062e6:	d807      	bhi.n	80062f8 <gen_numname+0xfc>
 80062e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ea:	1c5a      	adds	r2, r3, #1
 80062ec:	62ba      	str	r2, [r7, #40]	; 0x28
 80062ee:	3330      	adds	r3, #48	; 0x30
 80062f0:	443b      	add	r3, r7
 80062f2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80062f6:	e000      	b.n	80062fa <gen_numname+0xfe>
 80062f8:	2120      	movs	r1, #32
 80062fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fc:	1c5a      	adds	r2, r3, #1
 80062fe:	627a      	str	r2, [r7, #36]	; 0x24
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	4413      	add	r3, r2
 8006304:	460a      	mov	r2, r1
 8006306:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630a:	2b07      	cmp	r3, #7
 800630c:	d9e9      	bls.n	80062e2 <gen_numname+0xe6>
}
 800630e:	bf00      	nop
 8006310:	bf00      	nop
 8006312:	3730      	adds	r7, #48	; 0x30
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006318:	b480      	push	{r7}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006320:	2300      	movs	r3, #0
 8006322:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006324:	230b      	movs	r3, #11
 8006326:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006328:	7bfb      	ldrb	r3, [r7, #15]
 800632a:	b2da      	uxtb	r2, r3
 800632c:	0852      	lsrs	r2, r2, #1
 800632e:	01db      	lsls	r3, r3, #7
 8006330:	4313      	orrs	r3, r2
 8006332:	b2da      	uxtb	r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	1c59      	adds	r1, r3, #1
 8006338:	6079      	str	r1, [r7, #4]
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	4413      	add	r3, r2
 800633e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	3b01      	subs	r3, #1
 8006344:	60bb      	str	r3, [r7, #8]
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d1ed      	bne.n	8006328 <sum_sfn+0x10>
	return sum;
 800634c:	7bfb      	ldrb	r3, [r7, #15]
}
 800634e:	4618      	mov	r0, r3
 8006350:	3714      	adds	r7, #20
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr

0800635a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800635a:	b580      	push	{r7, lr}
 800635c:	b086      	sub	sp, #24
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006368:	2100      	movs	r1, #0
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f7ff fc88 	bl	8005c80 <dir_sdi>
 8006370:	4603      	mov	r3, r0
 8006372:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006374:	7dfb      	ldrb	r3, [r7, #23]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d001      	beq.n	800637e <dir_find+0x24>
 800637a:	7dfb      	ldrb	r3, [r7, #23]
 800637c:	e0a9      	b.n	80064d2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800637e:	23ff      	movs	r3, #255	; 0xff
 8006380:	753b      	strb	r3, [r7, #20]
 8006382:	7d3b      	ldrb	r3, [r7, #20]
 8006384:	757b      	strb	r3, [r7, #21]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f04f 32ff 	mov.w	r2, #4294967295
 800638c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	69db      	ldr	r3, [r3, #28]
 8006392:	4619      	mov	r1, r3
 8006394:	6938      	ldr	r0, [r7, #16]
 8006396:	f7ff f891 	bl	80054bc <move_window>
 800639a:	4603      	mov	r3, r0
 800639c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800639e:	7dfb      	ldrb	r3, [r7, #23]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	f040 8090 	bne.w	80064c6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a1b      	ldr	r3, [r3, #32]
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80063ae:	7dbb      	ldrb	r3, [r7, #22]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d102      	bne.n	80063ba <dir_find+0x60>
 80063b4:	2304      	movs	r3, #4
 80063b6:	75fb      	strb	r3, [r7, #23]
 80063b8:	e08a      	b.n	80064d0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6a1b      	ldr	r3, [r3, #32]
 80063be:	330b      	adds	r3, #11
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063c6:	73fb      	strb	r3, [r7, #15]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	7bfa      	ldrb	r2, [r7, #15]
 80063cc:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80063ce:	7dbb      	ldrb	r3, [r7, #22]
 80063d0:	2be5      	cmp	r3, #229	; 0xe5
 80063d2:	d007      	beq.n	80063e4 <dir_find+0x8a>
 80063d4:	7bfb      	ldrb	r3, [r7, #15]
 80063d6:	f003 0308 	and.w	r3, r3, #8
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d009      	beq.n	80063f2 <dir_find+0x98>
 80063de:	7bfb      	ldrb	r3, [r7, #15]
 80063e0:	2b0f      	cmp	r3, #15
 80063e2:	d006      	beq.n	80063f2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80063e4:	23ff      	movs	r3, #255	; 0xff
 80063e6:	757b      	strb	r3, [r7, #21]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f04f 32ff 	mov.w	r2, #4294967295
 80063ee:	631a      	str	r2, [r3, #48]	; 0x30
 80063f0:	e05e      	b.n	80064b0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80063f2:	7bfb      	ldrb	r3, [r7, #15]
 80063f4:	2b0f      	cmp	r3, #15
 80063f6:	d136      	bne.n	8006466 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80063fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006402:	2b00      	cmp	r3, #0
 8006404:	d154      	bne.n	80064b0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006406:	7dbb      	ldrb	r3, [r7, #22]
 8006408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00d      	beq.n	800642c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a1b      	ldr	r3, [r3, #32]
 8006414:	7b5b      	ldrb	r3, [r3, #13]
 8006416:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006418:	7dbb      	ldrb	r3, [r7, #22]
 800641a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800641e:	75bb      	strb	r3, [r7, #22]
 8006420:	7dbb      	ldrb	r3, [r7, #22]
 8006422:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	695a      	ldr	r2, [r3, #20]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800642c:	7dba      	ldrb	r2, [r7, #22]
 800642e:	7d7b      	ldrb	r3, [r7, #21]
 8006430:	429a      	cmp	r2, r3
 8006432:	d115      	bne.n	8006460 <dir_find+0x106>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6a1b      	ldr	r3, [r3, #32]
 8006438:	330d      	adds	r3, #13
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	7d3a      	ldrb	r2, [r7, #20]
 800643e:	429a      	cmp	r2, r3
 8006440:	d10e      	bne.n	8006460 <dir_find+0x106>
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	691a      	ldr	r2, [r3, #16]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	4619      	mov	r1, r3
 800644c:	4610      	mov	r0, r2
 800644e:	f7ff fdfd 	bl	800604c <cmp_lfn>
 8006452:	4603      	mov	r3, r0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d003      	beq.n	8006460 <dir_find+0x106>
 8006458:	7d7b      	ldrb	r3, [r7, #21]
 800645a:	3b01      	subs	r3, #1
 800645c:	b2db      	uxtb	r3, r3
 800645e:	e000      	b.n	8006462 <dir_find+0x108>
 8006460:	23ff      	movs	r3, #255	; 0xff
 8006462:	757b      	strb	r3, [r7, #21]
 8006464:	e024      	b.n	80064b0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006466:	7d7b      	ldrb	r3, [r7, #21]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d109      	bne.n	8006480 <dir_find+0x126>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a1b      	ldr	r3, [r3, #32]
 8006470:	4618      	mov	r0, r3
 8006472:	f7ff ff51 	bl	8006318 <sum_sfn>
 8006476:	4603      	mov	r3, r0
 8006478:	461a      	mov	r2, r3
 800647a:	7d3b      	ldrb	r3, [r7, #20]
 800647c:	4293      	cmp	r3, r2
 800647e:	d024      	beq.n	80064ca <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006486:	f003 0301 	and.w	r3, r3, #1
 800648a:	2b00      	cmp	r3, #0
 800648c:	d10a      	bne.n	80064a4 <dir_find+0x14a>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a18      	ldr	r0, [r3, #32]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	3324      	adds	r3, #36	; 0x24
 8006496:	220b      	movs	r2, #11
 8006498:	4619      	mov	r1, r3
 800649a:	f7fe fe1d 	bl	80050d8 <mem_cmp>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d014      	beq.n	80064ce <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80064a4:	23ff      	movs	r3, #255	; 0xff
 80064a6:	757b      	strb	r3, [r7, #21]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f04f 32ff 	mov.w	r2, #4294967295
 80064ae:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80064b0:	2100      	movs	r1, #0
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f7ff fc6d 	bl	8005d92 <dir_next>
 80064b8:	4603      	mov	r3, r0
 80064ba:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80064bc:	7dfb      	ldrb	r3, [r7, #23]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	f43f af65 	beq.w	800638e <dir_find+0x34>
 80064c4:	e004      	b.n	80064d0 <dir_find+0x176>
		if (res != FR_OK) break;
 80064c6:	bf00      	nop
 80064c8:	e002      	b.n	80064d0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80064ca:	bf00      	nop
 80064cc:	e000      	b.n	80064d0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80064ce:	bf00      	nop

	return res;
 80064d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3718      	adds	r7, #24
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
	...

080064dc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b08c      	sub	sp, #48	; 0x30
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80064f0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d001      	beq.n	80064fc <dir_register+0x20>
 80064f8:	2306      	movs	r3, #6
 80064fa:	e0e0      	b.n	80066be <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80064fc:	2300      	movs	r3, #0
 80064fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006500:	e002      	b.n	8006508 <dir_register+0x2c>
 8006502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006504:	3301      	adds	r3, #1
 8006506:	627b      	str	r3, [r7, #36]	; 0x24
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	691a      	ldr	r2, [r3, #16]
 800650c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650e:	005b      	lsls	r3, r3, #1
 8006510:	4413      	add	r3, r2
 8006512:	881b      	ldrh	r3, [r3, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1f4      	bne.n	8006502 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800651e:	f107 030c 	add.w	r3, r7, #12
 8006522:	220c      	movs	r2, #12
 8006524:	4618      	mov	r0, r3
 8006526:	f7fe fd9b 	bl	8005060 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800652a:	7dfb      	ldrb	r3, [r7, #23]
 800652c:	f003 0301 	and.w	r3, r3, #1
 8006530:	2b00      	cmp	r3, #0
 8006532:	d032      	beq.n	800659a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2240      	movs	r2, #64	; 0x40
 8006538:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800653c:	2301      	movs	r3, #1
 800653e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006540:	e016      	b.n	8006570 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	691a      	ldr	r2, [r3, #16]
 800654c:	f107 010c 	add.w	r1, r7, #12
 8006550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006552:	f7ff fe53 	bl	80061fc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f7ff feff 	bl	800635a <dir_find>
 800655c:	4603      	mov	r3, r0
 800655e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8006562:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006566:	2b00      	cmp	r3, #0
 8006568:	d106      	bne.n	8006578 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800656a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656c:	3301      	adds	r3, #1
 800656e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006572:	2b63      	cmp	r3, #99	; 0x63
 8006574:	d9e5      	bls.n	8006542 <dir_register+0x66>
 8006576:	e000      	b.n	800657a <dir_register+0x9e>
			if (res != FR_OK) break;
 8006578:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800657a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657c:	2b64      	cmp	r3, #100	; 0x64
 800657e:	d101      	bne.n	8006584 <dir_register+0xa8>
 8006580:	2307      	movs	r3, #7
 8006582:	e09c      	b.n	80066be <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006584:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006588:	2b04      	cmp	r3, #4
 800658a:	d002      	beq.n	8006592 <dir_register+0xb6>
 800658c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006590:	e095      	b.n	80066be <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8006592:	7dfa      	ldrb	r2, [r7, #23]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800659a:	7dfb      	ldrb	r3, [r7, #23]
 800659c:	f003 0302 	and.w	r3, r3, #2
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d007      	beq.n	80065b4 <dir_register+0xd8>
 80065a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a6:	330c      	adds	r3, #12
 80065a8:	4a47      	ldr	r2, [pc, #284]	; (80066c8 <dir_register+0x1ec>)
 80065aa:	fba2 2303 	umull	r2, r3, r2, r3
 80065ae:	089b      	lsrs	r3, r3, #2
 80065b0:	3301      	adds	r3, #1
 80065b2:	e000      	b.n	80065b6 <dir_register+0xda>
 80065b4:	2301      	movs	r3, #1
 80065b6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80065b8:	6a39      	ldr	r1, [r7, #32]
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f7ff fcbf 	bl	8005f3e <dir_alloc>
 80065c0:	4603      	mov	r3, r0
 80065c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80065c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d148      	bne.n	8006660 <dir_register+0x184>
 80065ce:	6a3b      	ldr	r3, [r7, #32]
 80065d0:	3b01      	subs	r3, #1
 80065d2:	623b      	str	r3, [r7, #32]
 80065d4:	6a3b      	ldr	r3, [r7, #32]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d042      	beq.n	8006660 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	695a      	ldr	r2, [r3, #20]
 80065de:	6a3b      	ldr	r3, [r7, #32]
 80065e0:	015b      	lsls	r3, r3, #5
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	4619      	mov	r1, r3
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f7ff fb4a 	bl	8005c80 <dir_sdi>
 80065ec:	4603      	mov	r3, r0
 80065ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80065f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d132      	bne.n	8006660 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	3324      	adds	r3, #36	; 0x24
 80065fe:	4618      	mov	r0, r3
 8006600:	f7ff fe8a 	bl	8006318 <sum_sfn>
 8006604:	4603      	mov	r3, r0
 8006606:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	69db      	ldr	r3, [r3, #28]
 800660c:	4619      	mov	r1, r3
 800660e:	69f8      	ldr	r0, [r7, #28]
 8006610:	f7fe ff54 	bl	80054bc <move_window>
 8006614:	4603      	mov	r3, r0
 8006616:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800661a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800661e:	2b00      	cmp	r3, #0
 8006620:	d11d      	bne.n	800665e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	6918      	ldr	r0, [r3, #16]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a19      	ldr	r1, [r3, #32]
 800662a:	6a3b      	ldr	r3, [r7, #32]
 800662c:	b2da      	uxtb	r2, r3
 800662e:	7efb      	ldrb	r3, [r7, #27]
 8006630:	f7ff fd7c 	bl	800612c <put_lfn>
				fs->wflag = 1;
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	2201      	movs	r2, #1
 8006638:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800663a:	2100      	movs	r1, #0
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f7ff fba8 	bl	8005d92 <dir_next>
 8006642:	4603      	mov	r3, r0
 8006644:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8006648:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800664c:	2b00      	cmp	r3, #0
 800664e:	d107      	bne.n	8006660 <dir_register+0x184>
 8006650:	6a3b      	ldr	r3, [r7, #32]
 8006652:	3b01      	subs	r3, #1
 8006654:	623b      	str	r3, [r7, #32]
 8006656:	6a3b      	ldr	r3, [r7, #32]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d1d5      	bne.n	8006608 <dir_register+0x12c>
 800665c:	e000      	b.n	8006660 <dir_register+0x184>
				if (res != FR_OK) break;
 800665e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006660:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006664:	2b00      	cmp	r3, #0
 8006666:	d128      	bne.n	80066ba <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	69db      	ldr	r3, [r3, #28]
 800666c:	4619      	mov	r1, r3
 800666e:	69f8      	ldr	r0, [r7, #28]
 8006670:	f7fe ff24 	bl	80054bc <move_window>
 8006674:	4603      	mov	r3, r0
 8006676:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800667a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800667e:	2b00      	cmp	r3, #0
 8006680:	d11b      	bne.n	80066ba <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a1b      	ldr	r3, [r3, #32]
 8006686:	2220      	movs	r2, #32
 8006688:	2100      	movs	r1, #0
 800668a:	4618      	mov	r0, r3
 800668c:	f7fe fd09 	bl	80050a2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6a18      	ldr	r0, [r3, #32]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	3324      	adds	r3, #36	; 0x24
 8006698:	220b      	movs	r2, #11
 800669a:	4619      	mov	r1, r3
 800669c:	f7fe fce0 	bl	8005060 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	330c      	adds	r3, #12
 80066ac:	f002 0218 	and.w	r2, r2, #24
 80066b0:	b2d2      	uxtb	r2, r2
 80066b2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	2201      	movs	r2, #1
 80066b8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80066ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3730      	adds	r7, #48	; 0x30
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	4ec4ec4f 	.word	0x4ec4ec4f

080066cc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b08a      	sub	sp, #40	; 0x28
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	613b      	str	r3, [r7, #16]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	60fb      	str	r3, [r7, #12]
 80066e4:	2300      	movs	r3, #0
 80066e6:	617b      	str	r3, [r7, #20]
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	1c5a      	adds	r2, r3, #1
 80066f0:	61ba      	str	r2, [r7, #24]
 80066f2:	693a      	ldr	r2, [r7, #16]
 80066f4:	4413      	add	r3, r2
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80066fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80066fc:	2b1f      	cmp	r3, #31
 80066fe:	d940      	bls.n	8006782 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006700:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006702:	2b2f      	cmp	r3, #47	; 0x2f
 8006704:	d006      	beq.n	8006714 <create_name+0x48>
 8006706:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006708:	2b5c      	cmp	r3, #92	; 0x5c
 800670a:	d110      	bne.n	800672e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800670c:	e002      	b.n	8006714 <create_name+0x48>
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	3301      	adds	r3, #1
 8006712:	61bb      	str	r3, [r7, #24]
 8006714:	693a      	ldr	r2, [r7, #16]
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	4413      	add	r3, r2
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	2b2f      	cmp	r3, #47	; 0x2f
 800671e:	d0f6      	beq.n	800670e <create_name+0x42>
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	4413      	add	r3, r2
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	2b5c      	cmp	r3, #92	; 0x5c
 800672a:	d0f0      	beq.n	800670e <create_name+0x42>
			break;
 800672c:	e02a      	b.n	8006784 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	2bfe      	cmp	r3, #254	; 0xfe
 8006732:	d901      	bls.n	8006738 <create_name+0x6c>
 8006734:	2306      	movs	r3, #6
 8006736:	e17d      	b.n	8006a34 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006738:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800673a:	b2db      	uxtb	r3, r3
 800673c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800673e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006740:	2101      	movs	r1, #1
 8006742:	4618      	mov	r0, r3
 8006744:	f001 f9bc 	bl	8007ac0 <ff_convert>
 8006748:	4603      	mov	r3, r0
 800674a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800674c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800674e:	2b00      	cmp	r3, #0
 8006750:	d101      	bne.n	8006756 <create_name+0x8a>
 8006752:	2306      	movs	r3, #6
 8006754:	e16e      	b.n	8006a34 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8006756:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006758:	2b7f      	cmp	r3, #127	; 0x7f
 800675a:	d809      	bhi.n	8006770 <create_name+0xa4>
 800675c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800675e:	4619      	mov	r1, r3
 8006760:	488d      	ldr	r0, [pc, #564]	; (8006998 <create_name+0x2cc>)
 8006762:	f7fe fce0 	bl	8005126 <chk_chr>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d001      	beq.n	8006770 <create_name+0xa4>
 800676c:	2306      	movs	r3, #6
 800676e:	e161      	b.n	8006a34 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	1c5a      	adds	r2, r3, #1
 8006774:	617a      	str	r2, [r7, #20]
 8006776:	005b      	lsls	r3, r3, #1
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	4413      	add	r3, r2
 800677c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800677e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006780:	e7b4      	b.n	80066ec <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8006782:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006784:	693a      	ldr	r2, [r7, #16]
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	441a      	add	r2, r3
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800678e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006790:	2b1f      	cmp	r3, #31
 8006792:	d801      	bhi.n	8006798 <create_name+0xcc>
 8006794:	2304      	movs	r3, #4
 8006796:	e000      	b.n	800679a <create_name+0xce>
 8006798:	2300      	movs	r3, #0
 800679a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800679e:	e011      	b.n	80067c4 <create_name+0xf8>
		w = lfn[di - 1];
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80067a6:	3b01      	subs	r3, #1
 80067a8:	005b      	lsls	r3, r3, #1
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	4413      	add	r3, r2
 80067ae:	881b      	ldrh	r3, [r3, #0]
 80067b0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80067b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067b4:	2b20      	cmp	r3, #32
 80067b6:	d002      	beq.n	80067be <create_name+0xf2>
 80067b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067ba:	2b2e      	cmp	r3, #46	; 0x2e
 80067bc:	d106      	bne.n	80067cc <create_name+0x100>
		di--;
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	3b01      	subs	r3, #1
 80067c2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d1ea      	bne.n	80067a0 <create_name+0xd4>
 80067ca:	e000      	b.n	80067ce <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80067cc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	005b      	lsls	r3, r3, #1
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	4413      	add	r3, r2
 80067d6:	2200      	movs	r2, #0
 80067d8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d101      	bne.n	80067e4 <create_name+0x118>
 80067e0:	2306      	movs	r3, #6
 80067e2:	e127      	b.n	8006a34 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	3324      	adds	r3, #36	; 0x24
 80067e8:	220b      	movs	r2, #11
 80067ea:	2120      	movs	r1, #32
 80067ec:	4618      	mov	r0, r3
 80067ee:	f7fe fc58 	bl	80050a2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80067f2:	2300      	movs	r3, #0
 80067f4:	61bb      	str	r3, [r7, #24]
 80067f6:	e002      	b.n	80067fe <create_name+0x132>
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	3301      	adds	r3, #1
 80067fc:	61bb      	str	r3, [r7, #24]
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	005b      	lsls	r3, r3, #1
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	4413      	add	r3, r2
 8006806:	881b      	ldrh	r3, [r3, #0]
 8006808:	2b20      	cmp	r3, #32
 800680a:	d0f5      	beq.n	80067f8 <create_name+0x12c>
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	005b      	lsls	r3, r3, #1
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	4413      	add	r3, r2
 8006814:	881b      	ldrh	r3, [r3, #0]
 8006816:	2b2e      	cmp	r3, #46	; 0x2e
 8006818:	d0ee      	beq.n	80067f8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d009      	beq.n	8006834 <create_name+0x168>
 8006820:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006824:	f043 0303 	orr.w	r3, r3, #3
 8006828:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800682c:	e002      	b.n	8006834 <create_name+0x168>
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	3b01      	subs	r3, #1
 8006832:	617b      	str	r3, [r7, #20]
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d009      	beq.n	800684e <create_name+0x182>
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006840:	3b01      	subs	r3, #1
 8006842:	005b      	lsls	r3, r3, #1
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	4413      	add	r3, r2
 8006848:	881b      	ldrh	r3, [r3, #0]
 800684a:	2b2e      	cmp	r3, #46	; 0x2e
 800684c:	d1ef      	bne.n	800682e <create_name+0x162>

	i = b = 0; ni = 8;
 800684e:	2300      	movs	r3, #0
 8006850:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006854:	2300      	movs	r3, #0
 8006856:	623b      	str	r3, [r7, #32]
 8006858:	2308      	movs	r3, #8
 800685a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800685c:	69bb      	ldr	r3, [r7, #24]
 800685e:	1c5a      	adds	r2, r3, #1
 8006860:	61ba      	str	r2, [r7, #24]
 8006862:	005b      	lsls	r3, r3, #1
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	4413      	add	r3, r2
 8006868:	881b      	ldrh	r3, [r3, #0]
 800686a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800686c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800686e:	2b00      	cmp	r3, #0
 8006870:	f000 8090 	beq.w	8006994 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006874:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006876:	2b20      	cmp	r3, #32
 8006878:	d006      	beq.n	8006888 <create_name+0x1bc>
 800687a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800687c:	2b2e      	cmp	r3, #46	; 0x2e
 800687e:	d10a      	bne.n	8006896 <create_name+0x1ca>
 8006880:	69ba      	ldr	r2, [r7, #24]
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	429a      	cmp	r2, r3
 8006886:	d006      	beq.n	8006896 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8006888:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800688c:	f043 0303 	orr.w	r3, r3, #3
 8006890:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006894:	e07d      	b.n	8006992 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006896:	6a3a      	ldr	r2, [r7, #32]
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	429a      	cmp	r2, r3
 800689c:	d203      	bcs.n	80068a6 <create_name+0x1da>
 800689e:	69ba      	ldr	r2, [r7, #24]
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d123      	bne.n	80068ee <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	2b0b      	cmp	r3, #11
 80068aa:	d106      	bne.n	80068ba <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80068ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80068b0:	f043 0303 	orr.w	r3, r3, #3
 80068b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80068b8:	e075      	b.n	80069a6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80068ba:	69ba      	ldr	r2, [r7, #24]
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d005      	beq.n	80068ce <create_name+0x202>
 80068c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80068c6:	f043 0303 	orr.w	r3, r3, #3
 80068ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80068ce:	69ba      	ldr	r2, [r7, #24]
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d866      	bhi.n	80069a4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	61bb      	str	r3, [r7, #24]
 80068da:	2308      	movs	r3, #8
 80068dc:	623b      	str	r3, [r7, #32]
 80068de:	230b      	movs	r3, #11
 80068e0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80068e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80068ec:	e051      	b.n	8006992 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80068ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068f0:	2b7f      	cmp	r3, #127	; 0x7f
 80068f2:	d914      	bls.n	800691e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80068f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068f6:	2100      	movs	r1, #0
 80068f8:	4618      	mov	r0, r3
 80068fa:	f001 f8e1 	bl	8007ac0 <ff_convert>
 80068fe:	4603      	mov	r3, r0
 8006900:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006902:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006904:	2b00      	cmp	r3, #0
 8006906:	d004      	beq.n	8006912 <create_name+0x246>
 8006908:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800690a:	3b80      	subs	r3, #128	; 0x80
 800690c:	4a23      	ldr	r2, [pc, #140]	; (800699c <create_name+0x2d0>)
 800690e:	5cd3      	ldrb	r3, [r2, r3]
 8006910:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006912:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006916:	f043 0302 	orr.w	r3, r3, #2
 800691a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800691e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006920:	2b00      	cmp	r3, #0
 8006922:	d007      	beq.n	8006934 <create_name+0x268>
 8006924:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006926:	4619      	mov	r1, r3
 8006928:	481d      	ldr	r0, [pc, #116]	; (80069a0 <create_name+0x2d4>)
 800692a:	f7fe fbfc 	bl	8005126 <chk_chr>
 800692e:	4603      	mov	r3, r0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d008      	beq.n	8006946 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006934:	235f      	movs	r3, #95	; 0x5f
 8006936:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006938:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800693c:	f043 0303 	orr.w	r3, r3, #3
 8006940:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006944:	e01b      	b.n	800697e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006946:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006948:	2b40      	cmp	r3, #64	; 0x40
 800694a:	d909      	bls.n	8006960 <create_name+0x294>
 800694c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800694e:	2b5a      	cmp	r3, #90	; 0x5a
 8006950:	d806      	bhi.n	8006960 <create_name+0x294>
					b |= 2;
 8006952:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006956:	f043 0302 	orr.w	r3, r3, #2
 800695a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800695e:	e00e      	b.n	800697e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006960:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006962:	2b60      	cmp	r3, #96	; 0x60
 8006964:	d90b      	bls.n	800697e <create_name+0x2b2>
 8006966:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006968:	2b7a      	cmp	r3, #122	; 0x7a
 800696a:	d808      	bhi.n	800697e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800696c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006970:	f043 0301 	orr.w	r3, r3, #1
 8006974:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006978:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800697a:	3b20      	subs	r3, #32
 800697c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800697e:	6a3b      	ldr	r3, [r7, #32]
 8006980:	1c5a      	adds	r2, r3, #1
 8006982:	623a      	str	r2, [r7, #32]
 8006984:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006986:	b2d1      	uxtb	r1, r2
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	4413      	add	r3, r2
 800698c:	460a      	mov	r2, r1
 800698e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8006992:	e763      	b.n	800685c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8006994:	bf00      	nop
 8006996:	e006      	b.n	80069a6 <create_name+0x2da>
 8006998:	080090cc 	.word	0x080090cc
 800699c:	0800912c 	.word	0x0800912c
 80069a0:	080090d8 	.word	0x080090d8
			if (si > di) break;			/* No extension */
 80069a4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80069ac:	2be5      	cmp	r3, #229	; 0xe5
 80069ae:	d103      	bne.n	80069b8 <create_name+0x2ec>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2205      	movs	r2, #5
 80069b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	2b08      	cmp	r3, #8
 80069bc:	d104      	bne.n	80069c8 <create_name+0x2fc>
 80069be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80069c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80069cc:	f003 030c 	and.w	r3, r3, #12
 80069d0:	2b0c      	cmp	r3, #12
 80069d2:	d005      	beq.n	80069e0 <create_name+0x314>
 80069d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80069d8:	f003 0303 	and.w	r3, r3, #3
 80069dc:	2b03      	cmp	r3, #3
 80069de:	d105      	bne.n	80069ec <create_name+0x320>
 80069e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069e4:	f043 0302 	orr.w	r3, r3, #2
 80069e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80069ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069f0:	f003 0302 	and.w	r3, r3, #2
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d117      	bne.n	8006a28 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80069f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80069fc:	f003 0303 	and.w	r3, r3, #3
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d105      	bne.n	8006a10 <create_name+0x344>
 8006a04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a08:	f043 0310 	orr.w	r3, r3, #16
 8006a0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006a10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006a14:	f003 030c 	and.w	r3, r3, #12
 8006a18:	2b04      	cmp	r3, #4
 8006a1a:	d105      	bne.n	8006a28 <create_name+0x35c>
 8006a1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a20:	f043 0308 	orr.w	r3, r3, #8
 8006a24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006a2e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8006a32:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3728      	adds	r7, #40	; 0x28
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b086      	sub	sp, #24
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006a50:	e002      	b.n	8006a58 <follow_path+0x1c>
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	3301      	adds	r3, #1
 8006a56:	603b      	str	r3, [r7, #0]
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	2b2f      	cmp	r3, #47	; 0x2f
 8006a5e:	d0f8      	beq.n	8006a52 <follow_path+0x16>
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	2b5c      	cmp	r3, #92	; 0x5c
 8006a66:	d0f4      	beq.n	8006a52 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	2b1f      	cmp	r3, #31
 8006a74:	d80a      	bhi.n	8006a8c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2280      	movs	r2, #128	; 0x80
 8006a7a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006a7e:	2100      	movs	r1, #0
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f7ff f8fd 	bl	8005c80 <dir_sdi>
 8006a86:	4603      	mov	r3, r0
 8006a88:	75fb      	strb	r3, [r7, #23]
 8006a8a:	e048      	b.n	8006b1e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006a8c:	463b      	mov	r3, r7
 8006a8e:	4619      	mov	r1, r3
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f7ff fe1b 	bl	80066cc <create_name>
 8006a96:	4603      	mov	r3, r0
 8006a98:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006a9a:	7dfb      	ldrb	r3, [r7, #23]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d139      	bne.n	8006b14 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f7ff fc5a 	bl	800635a <dir_find>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006ab0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006ab2:	7dfb      	ldrb	r3, [r7, #23]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d00a      	beq.n	8006ace <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006ab8:	7dfb      	ldrb	r3, [r7, #23]
 8006aba:	2b04      	cmp	r3, #4
 8006abc:	d12c      	bne.n	8006b18 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006abe:	7afb      	ldrb	r3, [r7, #11]
 8006ac0:	f003 0304 	and.w	r3, r3, #4
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d127      	bne.n	8006b18 <follow_path+0xdc>
 8006ac8:	2305      	movs	r3, #5
 8006aca:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006acc:	e024      	b.n	8006b18 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006ace:	7afb      	ldrb	r3, [r7, #11]
 8006ad0:	f003 0304 	and.w	r3, r3, #4
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d121      	bne.n	8006b1c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	799b      	ldrb	r3, [r3, #6]
 8006adc:	f003 0310 	and.w	r3, r3, #16
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d102      	bne.n	8006aea <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006ae4:	2305      	movs	r3, #5
 8006ae6:	75fb      	strb	r3, [r7, #23]
 8006ae8:	e019      	b.n	8006b1e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	695b      	ldr	r3, [r3, #20]
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	8992      	ldrh	r2, [r2, #12]
 8006af8:	fbb3 f0f2 	udiv	r0, r3, r2
 8006afc:	fb00 f202 	mul.w	r2, r0, r2
 8006b00:	1a9b      	subs	r3, r3, r2
 8006b02:	440b      	add	r3, r1
 8006b04:	4619      	mov	r1, r3
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	f7ff fa60 	bl	8005fcc <ld_clust>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006b12:	e7bb      	b.n	8006a8c <follow_path+0x50>
			if (res != FR_OK) break;
 8006b14:	bf00      	nop
 8006b16:	e002      	b.n	8006b1e <follow_path+0xe2>
				break;
 8006b18:	bf00      	nop
 8006b1a:	e000      	b.n	8006b1e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006b1c:	bf00      	nop
			}
		}
	}

	return res;
 8006b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3718      	adds	r7, #24
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b087      	sub	sp, #28
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006b30:	f04f 33ff 	mov.w	r3, #4294967295
 8006b34:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d031      	beq.n	8006ba2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	617b      	str	r3, [r7, #20]
 8006b44:	e002      	b.n	8006b4c <get_ldnumber+0x24>
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	3301      	adds	r3, #1
 8006b4a:	617b      	str	r3, [r7, #20]
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	2b1f      	cmp	r3, #31
 8006b52:	d903      	bls.n	8006b5c <get_ldnumber+0x34>
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	2b3a      	cmp	r3, #58	; 0x3a
 8006b5a:	d1f4      	bne.n	8006b46 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	2b3a      	cmp	r3, #58	; 0x3a
 8006b62:	d11c      	bne.n	8006b9e <get_ldnumber+0x76>
			tp = *path;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	1c5a      	adds	r2, r3, #1
 8006b6e:	60fa      	str	r2, [r7, #12]
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	3b30      	subs	r3, #48	; 0x30
 8006b74:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	2b09      	cmp	r3, #9
 8006b7a:	d80e      	bhi.n	8006b9a <get_ldnumber+0x72>
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d10a      	bne.n	8006b9a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d107      	bne.n	8006b9a <get_ldnumber+0x72>
					vol = (int)i;
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	3301      	adds	r3, #1
 8006b92:	617b      	str	r3, [r7, #20]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	697a      	ldr	r2, [r7, #20]
 8006b98:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	e002      	b.n	8006ba4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006ba2:	693b      	ldr	r3, [r7, #16]
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	371c      	adds	r7, #28
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	70da      	strb	r2, [r3, #3]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8006bc6:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006bc8:	6839      	ldr	r1, [r7, #0]
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f7fe fc76 	bl	80054bc <move_window>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d001      	beq.n	8006bda <check_fs+0x2a>
 8006bd6:	2304      	movs	r3, #4
 8006bd8:	e038      	b.n	8006c4c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	3338      	adds	r3, #56	; 0x38
 8006bde:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006be2:	4618      	mov	r0, r3
 8006be4:	f7fe f9ba 	bl	8004f5c <ld_word>
 8006be8:	4603      	mov	r3, r0
 8006bea:	461a      	mov	r2, r3
 8006bec:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d001      	beq.n	8006bf8 <check_fs+0x48>
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	e029      	b.n	8006c4c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006bfe:	2be9      	cmp	r3, #233	; 0xe9
 8006c00:	d009      	beq.n	8006c16 <check_fs+0x66>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006c08:	2beb      	cmp	r3, #235	; 0xeb
 8006c0a:	d11e      	bne.n	8006c4a <check_fs+0x9a>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006c12:	2b90      	cmp	r3, #144	; 0x90
 8006c14:	d119      	bne.n	8006c4a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	3338      	adds	r3, #56	; 0x38
 8006c1a:	3336      	adds	r3, #54	; 0x36
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f7fe f9b5 	bl	8004f8c <ld_dword>
 8006c22:	4603      	mov	r3, r0
 8006c24:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006c28:	4a0a      	ldr	r2, [pc, #40]	; (8006c54 <check_fs+0xa4>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d101      	bne.n	8006c32 <check_fs+0x82>
 8006c2e:	2300      	movs	r3, #0
 8006c30:	e00c      	b.n	8006c4c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	3338      	adds	r3, #56	; 0x38
 8006c36:	3352      	adds	r3, #82	; 0x52
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7fe f9a7 	bl	8004f8c <ld_dword>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	4a05      	ldr	r2, [pc, #20]	; (8006c58 <check_fs+0xa8>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d101      	bne.n	8006c4a <check_fs+0x9a>
 8006c46:	2300      	movs	r3, #0
 8006c48:	e000      	b.n	8006c4c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006c4a:	2302      	movs	r3, #2
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3708      	adds	r7, #8
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}
 8006c54:	00544146 	.word	0x00544146
 8006c58:	33544146 	.word	0x33544146

08006c5c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b096      	sub	sp, #88	; 0x58
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	4613      	mov	r3, r2
 8006c68:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006c70:	68f8      	ldr	r0, [r7, #12]
 8006c72:	f7ff ff59 	bl	8006b28 <get_ldnumber>
 8006c76:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	da01      	bge.n	8006c82 <find_volume+0x26>
 8006c7e:	230b      	movs	r3, #11
 8006c80:	e265      	b.n	800714e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006c82:	4a9f      	ldr	r2, [pc, #636]	; (8006f00 <find_volume+0x2a4>)
 8006c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c8a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d101      	bne.n	8006c96 <find_volume+0x3a>
 8006c92:	230c      	movs	r3, #12
 8006c94:	e25b      	b.n	800714e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c9a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006c9c:	79fb      	ldrb	r3, [r7, #7]
 8006c9e:	f023 0301 	bic.w	r3, r3, #1
 8006ca2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d01a      	beq.n	8006ce2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cae:	785b      	ldrb	r3, [r3, #1]
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f7fe f8b5 	bl	8004e20 <disk_status>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006cbc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006cc0:	f003 0301 	and.w	r3, r3, #1
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d10c      	bne.n	8006ce2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006cc8:	79fb      	ldrb	r3, [r7, #7]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d007      	beq.n	8006cde <find_volume+0x82>
 8006cce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006cd2:	f003 0304 	and.w	r3, r3, #4
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d001      	beq.n	8006cde <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006cda:	230a      	movs	r3, #10
 8006cdc:	e237      	b.n	800714e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8006cde:	2300      	movs	r3, #0
 8006ce0:	e235      	b.n	800714e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cea:	b2da      	uxtb	r2, r3
 8006cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cee:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf2:	785b      	ldrb	r3, [r3, #1]
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f7fe f8ad 	bl	8004e54 <disk_initialize>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006d00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006d04:	f003 0301 	and.w	r3, r3, #1
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d001      	beq.n	8006d10 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e21e      	b.n	800714e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006d10:	79fb      	ldrb	r3, [r7, #7]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d007      	beq.n	8006d26 <find_volume+0xca>
 8006d16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006d1a:	f003 0304 	and.w	r3, r3, #4
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d001      	beq.n	8006d26 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006d22:	230a      	movs	r3, #10
 8006d24:	e213      	b.n	800714e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d28:	7858      	ldrb	r0, [r3, #1]
 8006d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2c:	330c      	adds	r3, #12
 8006d2e:	461a      	mov	r2, r3
 8006d30:	2102      	movs	r1, #2
 8006d32:	f7fe f8f5 	bl	8004f20 <disk_ioctl>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d001      	beq.n	8006d40 <find_volume+0xe4>
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e206      	b.n	800714e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d42:	899b      	ldrh	r3, [r3, #12]
 8006d44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d48:	d80d      	bhi.n	8006d66 <find_volume+0x10a>
 8006d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4c:	899b      	ldrh	r3, [r3, #12]
 8006d4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d52:	d308      	bcc.n	8006d66 <find_volume+0x10a>
 8006d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d56:	899b      	ldrh	r3, [r3, #12]
 8006d58:	461a      	mov	r2, r3
 8006d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d5c:	899b      	ldrh	r3, [r3, #12]
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	4013      	ands	r3, r2
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d001      	beq.n	8006d6a <find_volume+0x10e>
 8006d66:	2301      	movs	r3, #1
 8006d68:	e1f1      	b.n	800714e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006d6e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006d70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006d72:	f7ff ff1d 	bl	8006bb0 <check_fs>
 8006d76:	4603      	mov	r3, r0
 8006d78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006d7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d149      	bne.n	8006e18 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006d84:	2300      	movs	r3, #0
 8006d86:	643b      	str	r3, [r7, #64]	; 0x40
 8006d88:	e01e      	b.n	8006dc8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d8c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d92:	011b      	lsls	r3, r3, #4
 8006d94:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006d98:	4413      	add	r3, r2
 8006d9a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9e:	3304      	adds	r3, #4
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d006      	beq.n	8006db4 <find_volume+0x158>
 8006da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da8:	3308      	adds	r3, #8
 8006daa:	4618      	mov	r0, r3
 8006dac:	f7fe f8ee 	bl	8004f8c <ld_dword>
 8006db0:	4602      	mov	r2, r0
 8006db2:	e000      	b.n	8006db6 <find_volume+0x15a>
 8006db4:	2200      	movs	r2, #0
 8006db6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	3358      	adds	r3, #88	; 0x58
 8006dbc:	443b      	add	r3, r7
 8006dbe:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006dc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	643b      	str	r3, [r7, #64]	; 0x40
 8006dc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dca:	2b03      	cmp	r3, #3
 8006dcc:	d9dd      	bls.n	8006d8a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006dce:	2300      	movs	r3, #0
 8006dd0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006dd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d002      	beq.n	8006dde <find_volume+0x182>
 8006dd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006dde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	3358      	adds	r3, #88	; 0x58
 8006de4:	443b      	add	r3, r7
 8006de6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006dea:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006dec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d005      	beq.n	8006dfe <find_volume+0x1a2>
 8006df2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006df4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006df6:	f7ff fedb 	bl	8006bb0 <check_fs>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	e000      	b.n	8006e00 <find_volume+0x1a4>
 8006dfe:	2303      	movs	r3, #3
 8006e00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006e04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d905      	bls.n	8006e18 <find_volume+0x1bc>
 8006e0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e0e:	3301      	adds	r3, #1
 8006e10:	643b      	str	r3, [r7, #64]	; 0x40
 8006e12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e14:	2b03      	cmp	r3, #3
 8006e16:	d9e2      	bls.n	8006dde <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006e18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e1c:	2b04      	cmp	r3, #4
 8006e1e:	d101      	bne.n	8006e24 <find_volume+0x1c8>
 8006e20:	2301      	movs	r3, #1
 8006e22:	e194      	b.n	800714e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006e24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d901      	bls.n	8006e30 <find_volume+0x1d4>
 8006e2c:	230d      	movs	r3, #13
 8006e2e:	e18e      	b.n	800714e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e32:	3338      	adds	r3, #56	; 0x38
 8006e34:	330b      	adds	r3, #11
 8006e36:	4618      	mov	r0, r3
 8006e38:	f7fe f890 	bl	8004f5c <ld_word>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	461a      	mov	r2, r3
 8006e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e42:	899b      	ldrh	r3, [r3, #12]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d001      	beq.n	8006e4c <find_volume+0x1f0>
 8006e48:	230d      	movs	r3, #13
 8006e4a:	e180      	b.n	800714e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4e:	3338      	adds	r3, #56	; 0x38
 8006e50:	3316      	adds	r3, #22
 8006e52:	4618      	mov	r0, r3
 8006e54:	f7fe f882 	bl	8004f5c <ld_word>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006e5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d106      	bne.n	8006e70 <find_volume+0x214>
 8006e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e64:	3338      	adds	r3, #56	; 0x38
 8006e66:	3324      	adds	r3, #36	; 0x24
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7fe f88f 	bl	8004f8c <ld_dword>
 8006e6e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e74:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e78:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8006e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e7e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e82:	789b      	ldrb	r3, [r3, #2]
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d005      	beq.n	8006e94 <find_volume+0x238>
 8006e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e8a:	789b      	ldrb	r3, [r3, #2]
 8006e8c:	2b02      	cmp	r3, #2
 8006e8e:	d001      	beq.n	8006e94 <find_volume+0x238>
 8006e90:	230d      	movs	r3, #13
 8006e92:	e15c      	b.n	800714e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e96:	789b      	ldrb	r3, [r3, #2]
 8006e98:	461a      	mov	r2, r3
 8006e9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e9c:	fb02 f303 	mul.w	r3, r2, r3
 8006ea0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ea8:	b29a      	uxth	r2, r3
 8006eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb0:	895b      	ldrh	r3, [r3, #10]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d008      	beq.n	8006ec8 <find_volume+0x26c>
 8006eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb8:	895b      	ldrh	r3, [r3, #10]
 8006eba:	461a      	mov	r2, r3
 8006ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ebe:	895b      	ldrh	r3, [r3, #10]
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	4013      	ands	r3, r2
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d001      	beq.n	8006ecc <find_volume+0x270>
 8006ec8:	230d      	movs	r3, #13
 8006eca:	e140      	b.n	800714e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ece:	3338      	adds	r3, #56	; 0x38
 8006ed0:	3311      	adds	r3, #17
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f7fe f842 	bl	8004f5c <ld_word>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	461a      	mov	r2, r3
 8006edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ede:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee2:	891b      	ldrh	r3, [r3, #8]
 8006ee4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ee6:	8992      	ldrh	r2, [r2, #12]
 8006ee8:	0952      	lsrs	r2, r2, #5
 8006eea:	b292      	uxth	r2, r2
 8006eec:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ef0:	fb01 f202 	mul.w	r2, r1, r2
 8006ef4:	1a9b      	subs	r3, r3, r2
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d003      	beq.n	8006f04 <find_volume+0x2a8>
 8006efc:	230d      	movs	r3, #13
 8006efe:	e126      	b.n	800714e <find_volume+0x4f2>
 8006f00:	20004260 	.word	0x20004260

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f06:	3338      	adds	r3, #56	; 0x38
 8006f08:	3313      	adds	r3, #19
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f7fe f826 	bl	8004f5c <ld_word>
 8006f10:	4603      	mov	r3, r0
 8006f12:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006f14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d106      	bne.n	8006f28 <find_volume+0x2cc>
 8006f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f1c:	3338      	adds	r3, #56	; 0x38
 8006f1e:	3320      	adds	r3, #32
 8006f20:	4618      	mov	r0, r3
 8006f22:	f7fe f833 	bl	8004f8c <ld_dword>
 8006f26:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f2a:	3338      	adds	r3, #56	; 0x38
 8006f2c:	330e      	adds	r3, #14
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f7fe f814 	bl	8004f5c <ld_word>
 8006f34:	4603      	mov	r3, r0
 8006f36:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006f38:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d101      	bne.n	8006f42 <find_volume+0x2e6>
 8006f3e:	230d      	movs	r3, #13
 8006f40:	e105      	b.n	800714e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006f42:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f46:	4413      	add	r3, r2
 8006f48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f4a:	8911      	ldrh	r1, [r2, #8]
 8006f4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f4e:	8992      	ldrh	r2, [r2, #12]
 8006f50:	0952      	lsrs	r2, r2, #5
 8006f52:	b292      	uxth	r2, r2
 8006f54:	fbb1 f2f2 	udiv	r2, r1, r2
 8006f58:	b292      	uxth	r2, r2
 8006f5a:	4413      	add	r3, r2
 8006f5c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006f5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d201      	bcs.n	8006f6a <find_volume+0x30e>
 8006f66:	230d      	movs	r3, #13
 8006f68:	e0f1      	b.n	800714e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006f6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6e:	1ad3      	subs	r3, r2, r3
 8006f70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f72:	8952      	ldrh	r2, [r2, #10]
 8006f74:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f78:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d101      	bne.n	8006f84 <find_volume+0x328>
 8006f80:	230d      	movs	r3, #13
 8006f82:	e0e4      	b.n	800714e <find_volume+0x4f2>
		fmt = FS_FAT32;
 8006f84:	2303      	movs	r3, #3
 8006f86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d802      	bhi.n	8006f9a <find_volume+0x33e>
 8006f94:	2302      	movs	r3, #2
 8006f96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d802      	bhi.n	8006faa <find_volume+0x34e>
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fac:	1c9a      	adds	r2, r3, #2
 8006fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb0:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8006fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006fb6:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006fb8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006fba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fbc:	441a      	add	r2, r3
 8006fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc0:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8006fc2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc6:	441a      	add	r2, r3
 8006fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fca:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8006fcc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006fd0:	2b03      	cmp	r3, #3
 8006fd2:	d11e      	bne.n	8007012 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd6:	3338      	adds	r3, #56	; 0x38
 8006fd8:	332a      	adds	r3, #42	; 0x2a
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7fd ffbe 	bl	8004f5c <ld_word>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d001      	beq.n	8006fea <find_volume+0x38e>
 8006fe6:	230d      	movs	r3, #13
 8006fe8:	e0b1      	b.n	800714e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fec:	891b      	ldrh	r3, [r3, #8]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d001      	beq.n	8006ff6 <find_volume+0x39a>
 8006ff2:	230d      	movs	r3, #13
 8006ff4:	e0ab      	b.n	800714e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff8:	3338      	adds	r3, #56	; 0x38
 8006ffa:	332c      	adds	r3, #44	; 0x2c
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7fd ffc5 	bl	8004f8c <ld_dword>
 8007002:	4602      	mov	r2, r0
 8007004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007006:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800700a:	69db      	ldr	r3, [r3, #28]
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	647b      	str	r3, [r7, #68]	; 0x44
 8007010:	e01f      	b.n	8007052 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007014:	891b      	ldrh	r3, [r3, #8]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d101      	bne.n	800701e <find_volume+0x3c2>
 800701a:	230d      	movs	r3, #13
 800701c:	e097      	b.n	800714e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800701e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007020:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007024:	441a      	add	r2, r3
 8007026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007028:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800702a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800702e:	2b02      	cmp	r3, #2
 8007030:	d103      	bne.n	800703a <find_volume+0x3de>
 8007032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007034:	69db      	ldr	r3, [r3, #28]
 8007036:	005b      	lsls	r3, r3, #1
 8007038:	e00a      	b.n	8007050 <find_volume+0x3f4>
 800703a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800703c:	69da      	ldr	r2, [r3, #28]
 800703e:	4613      	mov	r3, r2
 8007040:	005b      	lsls	r3, r3, #1
 8007042:	4413      	add	r3, r2
 8007044:	085a      	lsrs	r2, r3, #1
 8007046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007048:	69db      	ldr	r3, [r3, #28]
 800704a:	f003 0301 	and.w	r3, r3, #1
 800704e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007050:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007054:	6a1a      	ldr	r2, [r3, #32]
 8007056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007058:	899b      	ldrh	r3, [r3, #12]
 800705a:	4619      	mov	r1, r3
 800705c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800705e:	440b      	add	r3, r1
 8007060:	3b01      	subs	r3, #1
 8007062:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007064:	8989      	ldrh	r1, [r1, #12]
 8007066:	fbb3 f3f1 	udiv	r3, r3, r1
 800706a:	429a      	cmp	r2, r3
 800706c:	d201      	bcs.n	8007072 <find_volume+0x416>
 800706e:	230d      	movs	r3, #13
 8007070:	e06d      	b.n	800714e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007074:	f04f 32ff 	mov.w	r2, #4294967295
 8007078:	619a      	str	r2, [r3, #24]
 800707a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707c:	699a      	ldr	r2, [r3, #24]
 800707e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007080:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8007082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007084:	2280      	movs	r2, #128	; 0x80
 8007086:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007088:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800708c:	2b03      	cmp	r3, #3
 800708e:	d149      	bne.n	8007124 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007092:	3338      	adds	r3, #56	; 0x38
 8007094:	3330      	adds	r3, #48	; 0x30
 8007096:	4618      	mov	r0, r3
 8007098:	f7fd ff60 	bl	8004f5c <ld_word>
 800709c:	4603      	mov	r3, r0
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d140      	bne.n	8007124 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80070a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070a4:	3301      	adds	r3, #1
 80070a6:	4619      	mov	r1, r3
 80070a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80070aa:	f7fe fa07 	bl	80054bc <move_window>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d137      	bne.n	8007124 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80070b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b6:	2200      	movs	r2, #0
 80070b8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80070ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070bc:	3338      	adds	r3, #56	; 0x38
 80070be:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7fd ff4a 	bl	8004f5c <ld_word>
 80070c8:	4603      	mov	r3, r0
 80070ca:	461a      	mov	r2, r3
 80070cc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d127      	bne.n	8007124 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80070d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d6:	3338      	adds	r3, #56	; 0x38
 80070d8:	4618      	mov	r0, r3
 80070da:	f7fd ff57 	bl	8004f8c <ld_dword>
 80070de:	4603      	mov	r3, r0
 80070e0:	4a1d      	ldr	r2, [pc, #116]	; (8007158 <find_volume+0x4fc>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d11e      	bne.n	8007124 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80070e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e8:	3338      	adds	r3, #56	; 0x38
 80070ea:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7fd ff4c 	bl	8004f8c <ld_dword>
 80070f4:	4603      	mov	r3, r0
 80070f6:	4a19      	ldr	r2, [pc, #100]	; (800715c <find_volume+0x500>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d113      	bne.n	8007124 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80070fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fe:	3338      	adds	r3, #56	; 0x38
 8007100:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007104:	4618      	mov	r0, r3
 8007106:	f7fd ff41 	bl	8004f8c <ld_dword>
 800710a:	4602      	mov	r2, r0
 800710c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800710e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007112:	3338      	adds	r3, #56	; 0x38
 8007114:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007118:	4618      	mov	r0, r3
 800711a:	f7fd ff37 	bl	8004f8c <ld_dword>
 800711e:	4602      	mov	r2, r0
 8007120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007122:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007126:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800712a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800712c:	4b0c      	ldr	r3, [pc, #48]	; (8007160 <find_volume+0x504>)
 800712e:	881b      	ldrh	r3, [r3, #0]
 8007130:	3301      	adds	r3, #1
 8007132:	b29a      	uxth	r2, r3
 8007134:	4b0a      	ldr	r3, [pc, #40]	; (8007160 <find_volume+0x504>)
 8007136:	801a      	strh	r2, [r3, #0]
 8007138:	4b09      	ldr	r3, [pc, #36]	; (8007160 <find_volume+0x504>)
 800713a:	881a      	ldrh	r2, [r3, #0]
 800713c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800713e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8007140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007142:	4a08      	ldr	r2, [pc, #32]	; (8007164 <find_volume+0x508>)
 8007144:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007146:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007148:	f7fe f950 	bl	80053ec <clear_lock>
#endif
	return FR_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3758      	adds	r7, #88	; 0x58
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	41615252 	.word	0x41615252
 800715c:	61417272 	.word	0x61417272
 8007160:	20004264 	.word	0x20004264
 8007164:	20004288 	.word	0x20004288

08007168 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007172:	2309      	movs	r3, #9
 8007174:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d01c      	beq.n	80071b6 <validate+0x4e>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d018      	beq.n	80071b6 <validate+0x4e>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d013      	beq.n	80071b6 <validate+0x4e>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	889a      	ldrh	r2, [r3, #4]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	88db      	ldrh	r3, [r3, #6]
 8007198:	429a      	cmp	r2, r3
 800719a:	d10c      	bne.n	80071b6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	785b      	ldrb	r3, [r3, #1]
 80071a2:	4618      	mov	r0, r3
 80071a4:	f7fd fe3c 	bl	8004e20 <disk_status>
 80071a8:	4603      	mov	r3, r0
 80071aa:	f003 0301 	and.w	r3, r3, #1
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d101      	bne.n	80071b6 <validate+0x4e>
			res = FR_OK;
 80071b2:	2300      	movs	r3, #0
 80071b4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80071b6:	7bfb      	ldrb	r3, [r7, #15]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d102      	bne.n	80071c2 <validate+0x5a>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	e000      	b.n	80071c4 <validate+0x5c>
 80071c2:	2300      	movs	r3, #0
 80071c4:	683a      	ldr	r2, [r7, #0]
 80071c6:	6013      	str	r3, [r2, #0]
	return res;
 80071c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3710      	adds	r7, #16
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
	...

080071d4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b088      	sub	sp, #32
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	4613      	mov	r3, r2
 80071e0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80071e6:	f107 0310 	add.w	r3, r7, #16
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7ff fc9c 	bl	8006b28 <get_ldnumber>
 80071f0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	da01      	bge.n	80071fc <f_mount+0x28>
 80071f8:	230b      	movs	r3, #11
 80071fa:	e02b      	b.n	8007254 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80071fc:	4a17      	ldr	r2, [pc, #92]	; (800725c <f_mount+0x88>)
 80071fe:	69fb      	ldr	r3, [r7, #28]
 8007200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007204:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d005      	beq.n	8007218 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800720c:	69b8      	ldr	r0, [r7, #24]
 800720e:	f7fe f8ed 	bl	80053ec <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	2200      	movs	r2, #0
 8007216:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d002      	beq.n	8007224 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2200      	movs	r2, #0
 8007222:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007224:	68fa      	ldr	r2, [r7, #12]
 8007226:	490d      	ldr	r1, [pc, #52]	; (800725c <f_mount+0x88>)
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d002      	beq.n	800723a <f_mount+0x66>
 8007234:	79fb      	ldrb	r3, [r7, #7]
 8007236:	2b01      	cmp	r3, #1
 8007238:	d001      	beq.n	800723e <f_mount+0x6a>
 800723a:	2300      	movs	r3, #0
 800723c:	e00a      	b.n	8007254 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800723e:	f107 010c 	add.w	r1, r7, #12
 8007242:	f107 0308 	add.w	r3, r7, #8
 8007246:	2200      	movs	r2, #0
 8007248:	4618      	mov	r0, r3
 800724a:	f7ff fd07 	bl	8006c5c <find_volume>
 800724e:	4603      	mov	r3, r0
 8007250:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007252:	7dfb      	ldrb	r3, [r7, #23]
}
 8007254:	4618      	mov	r0, r3
 8007256:	3720      	adds	r7, #32
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}
 800725c:	20004260 	.word	0x20004260

08007260 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b09a      	sub	sp, #104	; 0x68
 8007264:	af00      	add	r7, sp, #0
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	4613      	mov	r3, r2
 800726c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d101      	bne.n	8007278 <f_open+0x18>
 8007274:	2309      	movs	r3, #9
 8007276:	e1bb      	b.n	80075f0 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007278:	79fb      	ldrb	r3, [r7, #7]
 800727a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800727e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007280:	79fa      	ldrb	r2, [r7, #7]
 8007282:	f107 0114 	add.w	r1, r7, #20
 8007286:	f107 0308 	add.w	r3, r7, #8
 800728a:	4618      	mov	r0, r3
 800728c:	f7ff fce6 	bl	8006c5c <find_volume>
 8007290:	4603      	mov	r3, r0
 8007292:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8007296:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800729a:	2b00      	cmp	r3, #0
 800729c:	f040 819f 	bne.w	80075de <f_open+0x37e>
		dj.obj.fs = fs;
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80072a4:	68ba      	ldr	r2, [r7, #8]
 80072a6:	f107 0318 	add.w	r3, r7, #24
 80072aa:	4611      	mov	r1, r2
 80072ac:	4618      	mov	r0, r3
 80072ae:	f7ff fbc5 	bl	8006a3c <follow_path>
 80072b2:	4603      	mov	r3, r0
 80072b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80072b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d11a      	bne.n	80072f6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80072c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80072c4:	b25b      	sxtb	r3, r3
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	da03      	bge.n	80072d2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80072ca:	2306      	movs	r3, #6
 80072cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80072d0:	e011      	b.n	80072f6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80072d2:	79fb      	ldrb	r3, [r7, #7]
 80072d4:	f023 0301 	bic.w	r3, r3, #1
 80072d8:	2b00      	cmp	r3, #0
 80072da:	bf14      	ite	ne
 80072dc:	2301      	movne	r3, #1
 80072de:	2300      	moveq	r3, #0
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	461a      	mov	r2, r3
 80072e4:	f107 0318 	add.w	r3, r7, #24
 80072e8:	4611      	mov	r1, r2
 80072ea:	4618      	mov	r0, r3
 80072ec:	f7fd ff36 	bl	800515c <chk_lock>
 80072f0:	4603      	mov	r3, r0
 80072f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80072f6:	79fb      	ldrb	r3, [r7, #7]
 80072f8:	f003 031c 	and.w	r3, r3, #28
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d07f      	beq.n	8007400 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007300:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007304:	2b00      	cmp	r3, #0
 8007306:	d017      	beq.n	8007338 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007308:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800730c:	2b04      	cmp	r3, #4
 800730e:	d10e      	bne.n	800732e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007310:	f7fd ff80 	bl	8005214 <enq_lock>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d006      	beq.n	8007328 <f_open+0xc8>
 800731a:	f107 0318 	add.w	r3, r7, #24
 800731e:	4618      	mov	r0, r3
 8007320:	f7ff f8dc 	bl	80064dc <dir_register>
 8007324:	4603      	mov	r3, r0
 8007326:	e000      	b.n	800732a <f_open+0xca>
 8007328:	2312      	movs	r3, #18
 800732a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800732e:	79fb      	ldrb	r3, [r7, #7]
 8007330:	f043 0308 	orr.w	r3, r3, #8
 8007334:	71fb      	strb	r3, [r7, #7]
 8007336:	e010      	b.n	800735a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007338:	7fbb      	ldrb	r3, [r7, #30]
 800733a:	f003 0311 	and.w	r3, r3, #17
 800733e:	2b00      	cmp	r3, #0
 8007340:	d003      	beq.n	800734a <f_open+0xea>
					res = FR_DENIED;
 8007342:	2307      	movs	r3, #7
 8007344:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007348:	e007      	b.n	800735a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800734a:	79fb      	ldrb	r3, [r7, #7]
 800734c:	f003 0304 	and.w	r3, r3, #4
 8007350:	2b00      	cmp	r3, #0
 8007352:	d002      	beq.n	800735a <f_open+0xfa>
 8007354:	2308      	movs	r3, #8
 8007356:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800735a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800735e:	2b00      	cmp	r3, #0
 8007360:	d168      	bne.n	8007434 <f_open+0x1d4>
 8007362:	79fb      	ldrb	r3, [r7, #7]
 8007364:	f003 0308 	and.w	r3, r3, #8
 8007368:	2b00      	cmp	r3, #0
 800736a:	d063      	beq.n	8007434 <f_open+0x1d4>
				dw = GET_FATTIME();
 800736c:	f7fd fcf6 	bl	8004d5c <get_fattime>
 8007370:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007374:	330e      	adds	r3, #14
 8007376:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007378:	4618      	mov	r0, r3
 800737a:	f7fd fe45 	bl	8005008 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800737e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007380:	3316      	adds	r3, #22
 8007382:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007384:	4618      	mov	r0, r3
 8007386:	f7fd fe3f 	bl	8005008 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800738a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800738c:	330b      	adds	r3, #11
 800738e:	2220      	movs	r2, #32
 8007390:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007396:	4611      	mov	r1, r2
 8007398:	4618      	mov	r0, r3
 800739a:	f7fe fe17 	bl	8005fcc <ld_clust>
 800739e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80073a4:	2200      	movs	r2, #0
 80073a6:	4618      	mov	r0, r3
 80073a8:	f7fe fe2f 	bl	800600a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80073ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ae:	331c      	adds	r3, #28
 80073b0:	2100      	movs	r1, #0
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7fd fe28 	bl	8005008 <st_dword>
					fs->wflag = 1;
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	2201      	movs	r2, #1
 80073bc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80073be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d037      	beq.n	8007434 <f_open+0x1d4>
						dw = fs->winsect;
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073c8:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80073ca:	f107 0318 	add.w	r3, r7, #24
 80073ce:	2200      	movs	r2, #0
 80073d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80073d2:	4618      	mov	r0, r3
 80073d4:	f7fe fb1f 	bl	8005a16 <remove_chain>
 80073d8:	4603      	mov	r3, r0
 80073da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80073de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d126      	bne.n	8007434 <f_open+0x1d4>
							res = move_window(fs, dw);
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7fe f866 	bl	80054bc <move_window>
 80073f0:	4603      	mov	r3, r0
 80073f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80073fa:	3a01      	subs	r2, #1
 80073fc:	615a      	str	r2, [r3, #20]
 80073fe:	e019      	b.n	8007434 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007400:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007404:	2b00      	cmp	r3, #0
 8007406:	d115      	bne.n	8007434 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007408:	7fbb      	ldrb	r3, [r7, #30]
 800740a:	f003 0310 	and.w	r3, r3, #16
 800740e:	2b00      	cmp	r3, #0
 8007410:	d003      	beq.n	800741a <f_open+0x1ba>
					res = FR_NO_FILE;
 8007412:	2304      	movs	r3, #4
 8007414:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007418:	e00c      	b.n	8007434 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800741a:	79fb      	ldrb	r3, [r7, #7]
 800741c:	f003 0302 	and.w	r3, r3, #2
 8007420:	2b00      	cmp	r3, #0
 8007422:	d007      	beq.n	8007434 <f_open+0x1d4>
 8007424:	7fbb      	ldrb	r3, [r7, #30]
 8007426:	f003 0301 	and.w	r3, r3, #1
 800742a:	2b00      	cmp	r3, #0
 800742c:	d002      	beq.n	8007434 <f_open+0x1d4>
						res = FR_DENIED;
 800742e:	2307      	movs	r3, #7
 8007430:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8007434:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007438:	2b00      	cmp	r3, #0
 800743a:	d128      	bne.n	800748e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800743c:	79fb      	ldrb	r3, [r7, #7]
 800743e:	f003 0308 	and.w	r3, r3, #8
 8007442:	2b00      	cmp	r3, #0
 8007444:	d003      	beq.n	800744e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8007446:	79fb      	ldrb	r3, [r7, #7]
 8007448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800744c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007456:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800745c:	79fb      	ldrb	r3, [r7, #7]
 800745e:	f023 0301 	bic.w	r3, r3, #1
 8007462:	2b00      	cmp	r3, #0
 8007464:	bf14      	ite	ne
 8007466:	2301      	movne	r3, #1
 8007468:	2300      	moveq	r3, #0
 800746a:	b2db      	uxtb	r3, r3
 800746c:	461a      	mov	r2, r3
 800746e:	f107 0318 	add.w	r3, r7, #24
 8007472:	4611      	mov	r1, r2
 8007474:	4618      	mov	r0, r3
 8007476:	f7fd feef 	bl	8005258 <inc_lock>
 800747a:	4602      	mov	r2, r0
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d102      	bne.n	800748e <f_open+0x22e>
 8007488:	2302      	movs	r3, #2
 800748a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800748e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007492:	2b00      	cmp	r3, #0
 8007494:	f040 80a3 	bne.w	80075de <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800749c:	4611      	mov	r1, r2
 800749e:	4618      	mov	r0, r3
 80074a0:	f7fe fd94 	bl	8005fcc <ld_clust>
 80074a4:	4602      	mov	r2, r0
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80074aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ac:	331c      	adds	r3, #28
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7fd fd6c 	bl	8004f8c <ld_dword>
 80074b4:	4602      	mov	r2, r0
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2200      	movs	r2, #0
 80074be:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80074c0:	697a      	ldr	r2, [r7, #20]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	88da      	ldrh	r2, [r3, #6]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	79fa      	ldrb	r2, [r7, #7]
 80074d2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2200      	movs	r2, #0
 80074d8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2200      	movs	r2, #0
 80074e4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	3330      	adds	r3, #48	; 0x30
 80074ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80074ee:	2100      	movs	r1, #0
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7fd fdd6 	bl	80050a2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80074f6:	79fb      	ldrb	r3, [r7, #7]
 80074f8:	f003 0320 	and.w	r3, r3, #32
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d06e      	beq.n	80075de <f_open+0x37e>
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d06a      	beq.n	80075de <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	68da      	ldr	r2, [r3, #12]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	895b      	ldrh	r3, [r3, #10]
 8007514:	461a      	mov	r2, r3
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	899b      	ldrh	r3, [r3, #12]
 800751a:	fb02 f303 	mul.w	r3, r2, r3
 800751e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	68db      	ldr	r3, [r3, #12]
 800752a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800752c:	e016      	b.n	800755c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007532:	4618      	mov	r0, r3
 8007534:	f7fe f87f 	bl	8005636 <get_fat>
 8007538:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800753a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800753c:	2b01      	cmp	r3, #1
 800753e:	d802      	bhi.n	8007546 <f_open+0x2e6>
 8007540:	2302      	movs	r3, #2
 8007542:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007546:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800754c:	d102      	bne.n	8007554 <f_open+0x2f4>
 800754e:	2301      	movs	r3, #1
 8007550:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007554:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007556:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007558:	1ad3      	subs	r3, r2, r3
 800755a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800755c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007560:	2b00      	cmp	r3, #0
 8007562:	d103      	bne.n	800756c <f_open+0x30c>
 8007564:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007568:	429a      	cmp	r2, r3
 800756a:	d8e0      	bhi.n	800752e <f_open+0x2ce>
				}
				fp->clust = clst;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007570:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007572:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007576:	2b00      	cmp	r3, #0
 8007578:	d131      	bne.n	80075de <f_open+0x37e>
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	899b      	ldrh	r3, [r3, #12]
 800757e:	461a      	mov	r2, r3
 8007580:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007582:	fbb3 f1f2 	udiv	r1, r3, r2
 8007586:	fb01 f202 	mul.w	r2, r1, r2
 800758a:	1a9b      	subs	r3, r3, r2
 800758c:	2b00      	cmp	r3, #0
 800758e:	d026      	beq.n	80075de <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007594:	4618      	mov	r0, r3
 8007596:	f7fe f82f 	bl	80055f8 <clust2sect>
 800759a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800759c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d103      	bne.n	80075aa <f_open+0x34a>
						res = FR_INT_ERR;
 80075a2:	2302      	movs	r3, #2
 80075a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80075a8:	e019      	b.n	80075de <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	899b      	ldrh	r3, [r3, #12]
 80075ae:	461a      	mov	r2, r3
 80075b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80075b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075b8:	441a      	add	r2, r3
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	7858      	ldrb	r0, [r3, #1]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6a1a      	ldr	r2, [r3, #32]
 80075cc:	2301      	movs	r3, #1
 80075ce:	f7fd fc67 	bl	8004ea0 <disk_read>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d002      	beq.n	80075de <f_open+0x37e>
 80075d8:	2301      	movs	r3, #1
 80075da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80075de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d002      	beq.n	80075ec <f_open+0x38c>
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2200      	movs	r2, #0
 80075ea:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80075ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3768      	adds	r7, #104	; 0x68
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b08e      	sub	sp, #56	; 0x38
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	60b9      	str	r1, [r7, #8]
 8007602:	607a      	str	r2, [r7, #4]
 8007604:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	2200      	movs	r2, #0
 800760e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f107 0214 	add.w	r2, r7, #20
 8007616:	4611      	mov	r1, r2
 8007618:	4618      	mov	r0, r3
 800761a:	f7ff fda5 	bl	8007168 <validate>
 800761e:	4603      	mov	r3, r0
 8007620:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007624:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007628:	2b00      	cmp	r3, #0
 800762a:	d107      	bne.n	800763c <f_read+0x44>
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	7d5b      	ldrb	r3, [r3, #21]
 8007630:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007634:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007638:	2b00      	cmp	r3, #0
 800763a:	d002      	beq.n	8007642 <f_read+0x4a>
 800763c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007640:	e135      	b.n	80078ae <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	7d1b      	ldrb	r3, [r3, #20]
 8007646:	f003 0301 	and.w	r3, r3, #1
 800764a:	2b00      	cmp	r3, #0
 800764c:	d101      	bne.n	8007652 <f_read+0x5a>
 800764e:	2307      	movs	r3, #7
 8007650:	e12d      	b.n	80078ae <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	68da      	ldr	r2, [r3, #12]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	699b      	ldr	r3, [r3, #24]
 800765a:	1ad3      	subs	r3, r2, r3
 800765c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	6a3b      	ldr	r3, [r7, #32]
 8007662:	429a      	cmp	r2, r3
 8007664:	f240 811e 	bls.w	80078a4 <f_read+0x2ac>
 8007668:	6a3b      	ldr	r3, [r7, #32]
 800766a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800766c:	e11a      	b.n	80078a4 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	699b      	ldr	r3, [r3, #24]
 8007672:	697a      	ldr	r2, [r7, #20]
 8007674:	8992      	ldrh	r2, [r2, #12]
 8007676:	fbb3 f1f2 	udiv	r1, r3, r2
 800767a:	fb01 f202 	mul.w	r2, r1, r2
 800767e:	1a9b      	subs	r3, r3, r2
 8007680:	2b00      	cmp	r3, #0
 8007682:	f040 80d5 	bne.w	8007830 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	699b      	ldr	r3, [r3, #24]
 800768a:	697a      	ldr	r2, [r7, #20]
 800768c:	8992      	ldrh	r2, [r2, #12]
 800768e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007692:	697a      	ldr	r2, [r7, #20]
 8007694:	8952      	ldrh	r2, [r2, #10]
 8007696:	3a01      	subs	r2, #1
 8007698:	4013      	ands	r3, r2
 800769a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d12f      	bne.n	8007702 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	699b      	ldr	r3, [r3, #24]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d103      	bne.n	80076b2 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	633b      	str	r3, [r7, #48]	; 0x30
 80076b0:	e013      	b.n	80076da <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d007      	beq.n	80076ca <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	699b      	ldr	r3, [r3, #24]
 80076be:	4619      	mov	r1, r3
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f7fe faa5 	bl	8005c10 <clmt_clust>
 80076c6:	6338      	str	r0, [r7, #48]	; 0x30
 80076c8:	e007      	b.n	80076da <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80076ca:	68fa      	ldr	r2, [r7, #12]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	69db      	ldr	r3, [r3, #28]
 80076d0:	4619      	mov	r1, r3
 80076d2:	4610      	mov	r0, r2
 80076d4:	f7fd ffaf 	bl	8005636 <get_fat>
 80076d8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80076da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d804      	bhi.n	80076ea <f_read+0xf2>
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2202      	movs	r2, #2
 80076e4:	755a      	strb	r2, [r3, #21]
 80076e6:	2302      	movs	r3, #2
 80076e8:	e0e1      	b.n	80078ae <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80076ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076f0:	d104      	bne.n	80076fc <f_read+0x104>
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2201      	movs	r2, #1
 80076f6:	755a      	strb	r2, [r3, #21]
 80076f8:	2301      	movs	r3, #1
 80076fa:	e0d8      	b.n	80078ae <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007700:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007702:	697a      	ldr	r2, [r7, #20]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	69db      	ldr	r3, [r3, #28]
 8007708:	4619      	mov	r1, r3
 800770a:	4610      	mov	r0, r2
 800770c:	f7fd ff74 	bl	80055f8 <clust2sect>
 8007710:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007712:	69bb      	ldr	r3, [r7, #24]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d104      	bne.n	8007722 <f_read+0x12a>
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2202      	movs	r2, #2
 800771c:	755a      	strb	r2, [r3, #21]
 800771e:	2302      	movs	r3, #2
 8007720:	e0c5      	b.n	80078ae <f_read+0x2b6>
			sect += csect;
 8007722:	69ba      	ldr	r2, [r7, #24]
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	4413      	add	r3, r2
 8007728:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	899b      	ldrh	r3, [r3, #12]
 800772e:	461a      	mov	r2, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	fbb3 f3f2 	udiv	r3, r3, r2
 8007736:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773a:	2b00      	cmp	r3, #0
 800773c:	d041      	beq.n	80077c2 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800773e:	69fa      	ldr	r2, [r7, #28]
 8007740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007742:	4413      	add	r3, r2
 8007744:	697a      	ldr	r2, [r7, #20]
 8007746:	8952      	ldrh	r2, [r2, #10]
 8007748:	4293      	cmp	r3, r2
 800774a:	d905      	bls.n	8007758 <f_read+0x160>
					cc = fs->csize - csect;
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	895b      	ldrh	r3, [r3, #10]
 8007750:	461a      	mov	r2, r3
 8007752:	69fb      	ldr	r3, [r7, #28]
 8007754:	1ad3      	subs	r3, r2, r3
 8007756:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	7858      	ldrb	r0, [r3, #1]
 800775c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775e:	69ba      	ldr	r2, [r7, #24]
 8007760:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007762:	f7fd fb9d 	bl	8004ea0 <disk_read>
 8007766:	4603      	mov	r3, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d004      	beq.n	8007776 <f_read+0x17e>
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2201      	movs	r2, #1
 8007770:	755a      	strb	r2, [r3, #21]
 8007772:	2301      	movs	r3, #1
 8007774:	e09b      	b.n	80078ae <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	7d1b      	ldrb	r3, [r3, #20]
 800777a:	b25b      	sxtb	r3, r3
 800777c:	2b00      	cmp	r3, #0
 800777e:	da18      	bge.n	80077b2 <f_read+0x1ba>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6a1a      	ldr	r2, [r3, #32]
 8007784:	69bb      	ldr	r3, [r7, #24]
 8007786:	1ad3      	subs	r3, r2, r3
 8007788:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800778a:	429a      	cmp	r2, r3
 800778c:	d911      	bls.n	80077b2 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	6a1a      	ldr	r2, [r3, #32]
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	1ad3      	subs	r3, r2, r3
 8007796:	697a      	ldr	r2, [r7, #20]
 8007798:	8992      	ldrh	r2, [r2, #12]
 800779a:	fb02 f303 	mul.w	r3, r2, r3
 800779e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077a0:	18d0      	adds	r0, r2, r3
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	899b      	ldrh	r3, [r3, #12]
 80077ac:	461a      	mov	r2, r3
 80077ae:	f7fd fc57 	bl	8005060 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	899b      	ldrh	r3, [r3, #12]
 80077b6:	461a      	mov	r2, r3
 80077b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ba:	fb02 f303 	mul.w	r3, r2, r3
 80077be:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80077c0:	e05c      	b.n	800787c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6a1b      	ldr	r3, [r3, #32]
 80077c6:	69ba      	ldr	r2, [r7, #24]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d02e      	beq.n	800782a <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	7d1b      	ldrb	r3, [r3, #20]
 80077d0:	b25b      	sxtb	r3, r3
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	da18      	bge.n	8007808 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	7858      	ldrb	r0, [r3, #1]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6a1a      	ldr	r2, [r3, #32]
 80077e4:	2301      	movs	r3, #1
 80077e6:	f7fd fb7b 	bl	8004ee0 <disk_write>
 80077ea:	4603      	mov	r3, r0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d004      	beq.n	80077fa <f_read+0x202>
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2201      	movs	r2, #1
 80077f4:	755a      	strb	r2, [r3, #21]
 80077f6:	2301      	movs	r3, #1
 80077f8:	e059      	b.n	80078ae <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	7d1b      	ldrb	r3, [r3, #20]
 80077fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007802:	b2da      	uxtb	r2, r3
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	7858      	ldrb	r0, [r3, #1]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007812:	2301      	movs	r3, #1
 8007814:	69ba      	ldr	r2, [r7, #24]
 8007816:	f7fd fb43 	bl	8004ea0 <disk_read>
 800781a:	4603      	mov	r3, r0
 800781c:	2b00      	cmp	r3, #0
 800781e:	d004      	beq.n	800782a <f_read+0x232>
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2201      	movs	r2, #1
 8007824:	755a      	strb	r2, [r3, #21]
 8007826:	2301      	movs	r3, #1
 8007828:	e041      	b.n	80078ae <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	69ba      	ldr	r2, [r7, #24]
 800782e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	899b      	ldrh	r3, [r3, #12]
 8007834:	4618      	mov	r0, r3
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	699b      	ldr	r3, [r3, #24]
 800783a:	697a      	ldr	r2, [r7, #20]
 800783c:	8992      	ldrh	r2, [r2, #12]
 800783e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007842:	fb01 f202 	mul.w	r2, r1, r2
 8007846:	1a9b      	subs	r3, r3, r2
 8007848:	1ac3      	subs	r3, r0, r3
 800784a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800784c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	429a      	cmp	r2, r3
 8007852:	d901      	bls.n	8007858 <f_read+0x260>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	699b      	ldr	r3, [r3, #24]
 8007862:	697a      	ldr	r2, [r7, #20]
 8007864:	8992      	ldrh	r2, [r2, #12]
 8007866:	fbb3 f0f2 	udiv	r0, r3, r2
 800786a:	fb00 f202 	mul.w	r2, r0, r2
 800786e:	1a9b      	subs	r3, r3, r2
 8007870:	440b      	add	r3, r1
 8007872:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007874:	4619      	mov	r1, r3
 8007876:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007878:	f7fd fbf2 	bl	8005060 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800787c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800787e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007880:	4413      	add	r3, r2
 8007882:	627b      	str	r3, [r7, #36]	; 0x24
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	699a      	ldr	r2, [r3, #24]
 8007888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800788a:	441a      	add	r2, r3
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	619a      	str	r2, [r3, #24]
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007896:	441a      	add	r2, r3
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	601a      	str	r2, [r3, #0]
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a0:	1ad3      	subs	r3, r2, r3
 80078a2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	f47f aee1 	bne.w	800766e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3738      	adds	r7, #56	; 0x38
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b086      	sub	sp, #24
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f107 0208 	add.w	r2, r7, #8
 80078c4:	4611      	mov	r1, r2
 80078c6:	4618      	mov	r0, r3
 80078c8:	f7ff fc4e 	bl	8007168 <validate>
 80078cc:	4603      	mov	r3, r0
 80078ce:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80078d0:	7dfb      	ldrb	r3, [r7, #23]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d168      	bne.n	80079a8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	7d1b      	ldrb	r3, [r3, #20]
 80078da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d062      	beq.n	80079a8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	7d1b      	ldrb	r3, [r3, #20]
 80078e6:	b25b      	sxtb	r3, r3
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	da15      	bge.n	8007918 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	7858      	ldrb	r0, [r3, #1]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6a1a      	ldr	r2, [r3, #32]
 80078fa:	2301      	movs	r3, #1
 80078fc:	f7fd faf0 	bl	8004ee0 <disk_write>
 8007900:	4603      	mov	r3, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	d001      	beq.n	800790a <f_sync+0x54>
 8007906:	2301      	movs	r3, #1
 8007908:	e04f      	b.n	80079aa <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	7d1b      	ldrb	r3, [r3, #20]
 800790e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007912:	b2da      	uxtb	r2, r3
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007918:	f7fd fa20 	bl	8004d5c <get_fattime>
 800791c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800791e:	68ba      	ldr	r2, [r7, #8]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007924:	4619      	mov	r1, r3
 8007926:	4610      	mov	r0, r2
 8007928:	f7fd fdc8 	bl	80054bc <move_window>
 800792c:	4603      	mov	r3, r0
 800792e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007930:	7dfb      	ldrb	r3, [r7, #23]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d138      	bne.n	80079a8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800793a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	330b      	adds	r3, #11
 8007940:	781a      	ldrb	r2, [r3, #0]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	330b      	adds	r3, #11
 8007946:	f042 0220 	orr.w	r2, r2, #32
 800794a:	b2d2      	uxtb	r2, r2
 800794c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6818      	ldr	r0, [r3, #0]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	461a      	mov	r2, r3
 8007958:	68f9      	ldr	r1, [r7, #12]
 800795a:	f7fe fb56 	bl	800600a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f103 021c 	add.w	r2, r3, #28
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	4619      	mov	r1, r3
 800796a:	4610      	mov	r0, r2
 800796c:	f7fd fb4c 	bl	8005008 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	3316      	adds	r3, #22
 8007974:	6939      	ldr	r1, [r7, #16]
 8007976:	4618      	mov	r0, r3
 8007978:	f7fd fb46 	bl	8005008 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	3312      	adds	r3, #18
 8007980:	2100      	movs	r1, #0
 8007982:	4618      	mov	r0, r3
 8007984:	f7fd fb25 	bl	8004fd2 <st_word>
					fs->wflag = 1;
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	2201      	movs	r2, #1
 800798c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	4618      	mov	r0, r3
 8007992:	f7fd fdc1 	bl	8005518 <sync_fs>
 8007996:	4603      	mov	r3, r0
 8007998:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	7d1b      	ldrb	r3, [r3, #20]
 800799e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079a2:	b2da      	uxtb	r2, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80079a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3718      	adds	r7, #24
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b084      	sub	sp, #16
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f7ff ff7b 	bl	80078b6 <f_sync>
 80079c0:	4603      	mov	r3, r0
 80079c2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80079c4:	7bfb      	ldrb	r3, [r7, #15]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d118      	bne.n	80079fc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f107 0208 	add.w	r2, r7, #8
 80079d0:	4611      	mov	r1, r2
 80079d2:	4618      	mov	r0, r3
 80079d4:	f7ff fbc8 	bl	8007168 <validate>
 80079d8:	4603      	mov	r3, r0
 80079da:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80079dc:	7bfb      	ldrb	r3, [r7, #15]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d10c      	bne.n	80079fc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	691b      	ldr	r3, [r3, #16]
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7fd fcc4 	bl	8005374 <dec_lock>
 80079ec:	4603      	mov	r3, r0
 80079ee:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80079f0:	7bfb      	ldrb	r3, [r7, #15]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d102      	bne.n	80079fc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80079fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
	...

08007a08 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b087      	sub	sp, #28
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	4613      	mov	r3, r2
 8007a14:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007a16:	2301      	movs	r3, #1
 8007a18:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007a1e:	4b1f      	ldr	r3, [pc, #124]	; (8007a9c <FATFS_LinkDriverEx+0x94>)
 8007a20:	7a5b      	ldrb	r3, [r3, #9]
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d131      	bne.n	8007a8c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007a28:	4b1c      	ldr	r3, [pc, #112]	; (8007a9c <FATFS_LinkDriverEx+0x94>)
 8007a2a:	7a5b      	ldrb	r3, [r3, #9]
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	461a      	mov	r2, r3
 8007a30:	4b1a      	ldr	r3, [pc, #104]	; (8007a9c <FATFS_LinkDriverEx+0x94>)
 8007a32:	2100      	movs	r1, #0
 8007a34:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007a36:	4b19      	ldr	r3, [pc, #100]	; (8007a9c <FATFS_LinkDriverEx+0x94>)
 8007a38:	7a5b      	ldrb	r3, [r3, #9]
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	4a17      	ldr	r2, [pc, #92]	; (8007a9c <FATFS_LinkDriverEx+0x94>)
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	4413      	add	r3, r2
 8007a42:	68fa      	ldr	r2, [r7, #12]
 8007a44:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007a46:	4b15      	ldr	r3, [pc, #84]	; (8007a9c <FATFS_LinkDriverEx+0x94>)
 8007a48:	7a5b      	ldrb	r3, [r3, #9]
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	4b13      	ldr	r3, [pc, #76]	; (8007a9c <FATFS_LinkDriverEx+0x94>)
 8007a50:	4413      	add	r3, r2
 8007a52:	79fa      	ldrb	r2, [r7, #7]
 8007a54:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007a56:	4b11      	ldr	r3, [pc, #68]	; (8007a9c <FATFS_LinkDriverEx+0x94>)
 8007a58:	7a5b      	ldrb	r3, [r3, #9]
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	1c5a      	adds	r2, r3, #1
 8007a5e:	b2d1      	uxtb	r1, r2
 8007a60:	4a0e      	ldr	r2, [pc, #56]	; (8007a9c <FATFS_LinkDriverEx+0x94>)
 8007a62:	7251      	strb	r1, [r2, #9]
 8007a64:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007a66:	7dbb      	ldrb	r3, [r7, #22]
 8007a68:	3330      	adds	r3, #48	; 0x30
 8007a6a:	b2da      	uxtb	r2, r3
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	3301      	adds	r3, #1
 8007a74:	223a      	movs	r2, #58	; 0x3a
 8007a76:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	3302      	adds	r3, #2
 8007a7c:	222f      	movs	r2, #47	; 0x2f
 8007a7e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	3303      	adds	r3, #3
 8007a84:	2200      	movs	r2, #0
 8007a86:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	371c      	adds	r7, #28
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr
 8007a9a:	bf00      	nop
 8007a9c:	20004488 	.word	0x20004488

08007aa0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007aaa:	2200      	movs	r2, #0
 8007aac:	6839      	ldr	r1, [r7, #0]
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f7ff ffaa 	bl	8007a08 <FATFS_LinkDriverEx>
 8007ab4:	4603      	mov	r3, r0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3708      	adds	r7, #8
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
	...

08007ac0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b085      	sub	sp, #20
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	6039      	str	r1, [r7, #0]
 8007aca:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007acc:	88fb      	ldrh	r3, [r7, #6]
 8007ace:	2b7f      	cmp	r3, #127	; 0x7f
 8007ad0:	d802      	bhi.n	8007ad8 <ff_convert+0x18>
		c = chr;
 8007ad2:	88fb      	ldrh	r3, [r7, #6]
 8007ad4:	81fb      	strh	r3, [r7, #14]
 8007ad6:	e025      	b.n	8007b24 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00b      	beq.n	8007af6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007ade:	88fb      	ldrh	r3, [r7, #6]
 8007ae0:	2bff      	cmp	r3, #255	; 0xff
 8007ae2:	d805      	bhi.n	8007af0 <ff_convert+0x30>
 8007ae4:	88fb      	ldrh	r3, [r7, #6]
 8007ae6:	3b80      	subs	r3, #128	; 0x80
 8007ae8:	4a12      	ldr	r2, [pc, #72]	; (8007b34 <ff_convert+0x74>)
 8007aea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007aee:	e000      	b.n	8007af2 <ff_convert+0x32>
 8007af0:	2300      	movs	r3, #0
 8007af2:	81fb      	strh	r3, [r7, #14]
 8007af4:	e016      	b.n	8007b24 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8007af6:	2300      	movs	r3, #0
 8007af8:	81fb      	strh	r3, [r7, #14]
 8007afa:	e009      	b.n	8007b10 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007afc:	89fb      	ldrh	r3, [r7, #14]
 8007afe:	4a0d      	ldr	r2, [pc, #52]	; (8007b34 <ff_convert+0x74>)
 8007b00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b04:	88fa      	ldrh	r2, [r7, #6]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d006      	beq.n	8007b18 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8007b0a:	89fb      	ldrh	r3, [r7, #14]
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	81fb      	strh	r3, [r7, #14]
 8007b10:	89fb      	ldrh	r3, [r7, #14]
 8007b12:	2b7f      	cmp	r3, #127	; 0x7f
 8007b14:	d9f2      	bls.n	8007afc <ff_convert+0x3c>
 8007b16:	e000      	b.n	8007b1a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007b18:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8007b1a:	89fb      	ldrh	r3, [r7, #14]
 8007b1c:	3380      	adds	r3, #128	; 0x80
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007b24:	89fb      	ldrh	r3, [r7, #14]
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3714      	adds	r7, #20
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr
 8007b32:	bf00      	nop
 8007b34:	080091bc 	.word	0x080091bc

08007b38 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b087      	sub	sp, #28
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	4603      	mov	r3, r0
 8007b40:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8007b42:	88fb      	ldrh	r3, [r7, #6]
 8007b44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b48:	d201      	bcs.n	8007b4e <ff_wtoupper+0x16>
 8007b4a:	4b3e      	ldr	r3, [pc, #248]	; (8007c44 <ff_wtoupper+0x10c>)
 8007b4c:	e000      	b.n	8007b50 <ff_wtoupper+0x18>
 8007b4e:	4b3e      	ldr	r3, [pc, #248]	; (8007c48 <ff_wtoupper+0x110>)
 8007b50:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	1c9a      	adds	r2, r3, #2
 8007b56:	617a      	str	r2, [r7, #20]
 8007b58:	881b      	ldrh	r3, [r3, #0]
 8007b5a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8007b5c:	8a7b      	ldrh	r3, [r7, #18]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d068      	beq.n	8007c34 <ff_wtoupper+0xfc>
 8007b62:	88fa      	ldrh	r2, [r7, #6]
 8007b64:	8a7b      	ldrh	r3, [r7, #18]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d364      	bcc.n	8007c34 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	1c9a      	adds	r2, r3, #2
 8007b6e:	617a      	str	r2, [r7, #20]
 8007b70:	881b      	ldrh	r3, [r3, #0]
 8007b72:	823b      	strh	r3, [r7, #16]
 8007b74:	8a3b      	ldrh	r3, [r7, #16]
 8007b76:	0a1b      	lsrs	r3, r3, #8
 8007b78:	81fb      	strh	r3, [r7, #14]
 8007b7a:	8a3b      	ldrh	r3, [r7, #16]
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8007b80:	88fa      	ldrh	r2, [r7, #6]
 8007b82:	8a79      	ldrh	r1, [r7, #18]
 8007b84:	8a3b      	ldrh	r3, [r7, #16]
 8007b86:	440b      	add	r3, r1
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	da49      	bge.n	8007c20 <ff_wtoupper+0xe8>
			switch (cmd) {
 8007b8c:	89fb      	ldrh	r3, [r7, #14]
 8007b8e:	2b08      	cmp	r3, #8
 8007b90:	d84f      	bhi.n	8007c32 <ff_wtoupper+0xfa>
 8007b92:	a201      	add	r2, pc, #4	; (adr r2, 8007b98 <ff_wtoupper+0x60>)
 8007b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b98:	08007bbd 	.word	0x08007bbd
 8007b9c:	08007bcf 	.word	0x08007bcf
 8007ba0:	08007be5 	.word	0x08007be5
 8007ba4:	08007bed 	.word	0x08007bed
 8007ba8:	08007bf5 	.word	0x08007bf5
 8007bac:	08007bfd 	.word	0x08007bfd
 8007bb0:	08007c05 	.word	0x08007c05
 8007bb4:	08007c0d 	.word	0x08007c0d
 8007bb8:	08007c15 	.word	0x08007c15
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007bbc:	88fa      	ldrh	r2, [r7, #6]
 8007bbe:	8a7b      	ldrh	r3, [r7, #18]
 8007bc0:	1ad3      	subs	r3, r2, r3
 8007bc2:	005b      	lsls	r3, r3, #1
 8007bc4:	697a      	ldr	r2, [r7, #20]
 8007bc6:	4413      	add	r3, r2
 8007bc8:	881b      	ldrh	r3, [r3, #0]
 8007bca:	80fb      	strh	r3, [r7, #6]
 8007bcc:	e027      	b.n	8007c1e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8007bce:	88fa      	ldrh	r2, [r7, #6]
 8007bd0:	8a7b      	ldrh	r3, [r7, #18]
 8007bd2:	1ad3      	subs	r3, r2, r3
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	f003 0301 	and.w	r3, r3, #1
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	88fa      	ldrh	r2, [r7, #6]
 8007bde:	1ad3      	subs	r3, r2, r3
 8007be0:	80fb      	strh	r3, [r7, #6]
 8007be2:	e01c      	b.n	8007c1e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007be4:	88fb      	ldrh	r3, [r7, #6]
 8007be6:	3b10      	subs	r3, #16
 8007be8:	80fb      	strh	r3, [r7, #6]
 8007bea:	e018      	b.n	8007c1e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007bec:	88fb      	ldrh	r3, [r7, #6]
 8007bee:	3b20      	subs	r3, #32
 8007bf0:	80fb      	strh	r3, [r7, #6]
 8007bf2:	e014      	b.n	8007c1e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007bf4:	88fb      	ldrh	r3, [r7, #6]
 8007bf6:	3b30      	subs	r3, #48	; 0x30
 8007bf8:	80fb      	strh	r3, [r7, #6]
 8007bfa:	e010      	b.n	8007c1e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8007bfc:	88fb      	ldrh	r3, [r7, #6]
 8007bfe:	3b1a      	subs	r3, #26
 8007c00:	80fb      	strh	r3, [r7, #6]
 8007c02:	e00c      	b.n	8007c1e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007c04:	88fb      	ldrh	r3, [r7, #6]
 8007c06:	3308      	adds	r3, #8
 8007c08:	80fb      	strh	r3, [r7, #6]
 8007c0a:	e008      	b.n	8007c1e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8007c0c:	88fb      	ldrh	r3, [r7, #6]
 8007c0e:	3b50      	subs	r3, #80	; 0x50
 8007c10:	80fb      	strh	r3, [r7, #6]
 8007c12:	e004      	b.n	8007c1e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8007c14:	88fb      	ldrh	r3, [r7, #6]
 8007c16:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8007c1a:	80fb      	strh	r3, [r7, #6]
 8007c1c:	bf00      	nop
			}
			break;
 8007c1e:	e008      	b.n	8007c32 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8007c20:	89fb      	ldrh	r3, [r7, #14]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d195      	bne.n	8007b52 <ff_wtoupper+0x1a>
 8007c26:	8a3b      	ldrh	r3, [r7, #16]
 8007c28:	005b      	lsls	r3, r3, #1
 8007c2a:	697a      	ldr	r2, [r7, #20]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8007c30:	e78f      	b.n	8007b52 <ff_wtoupper+0x1a>
			break;
 8007c32:	bf00      	nop
	}

	return chr;
 8007c34:	88fb      	ldrh	r3, [r7, #6]
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	371c      	adds	r7, #28
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr
 8007c42:	bf00      	nop
 8007c44:	080092bc 	.word	0x080092bc
 8007c48:	080094b0 	.word	0x080094b0

08007c4c <__errno>:
 8007c4c:	4b01      	ldr	r3, [pc, #4]	; (8007c54 <__errno+0x8>)
 8007c4e:	6818      	ldr	r0, [r3, #0]
 8007c50:	4770      	bx	lr
 8007c52:	bf00      	nop
 8007c54:	20000028 	.word	0x20000028

08007c58 <__libc_init_array>:
 8007c58:	b570      	push	{r4, r5, r6, lr}
 8007c5a:	4d0d      	ldr	r5, [pc, #52]	; (8007c90 <__libc_init_array+0x38>)
 8007c5c:	4c0d      	ldr	r4, [pc, #52]	; (8007c94 <__libc_init_array+0x3c>)
 8007c5e:	1b64      	subs	r4, r4, r5
 8007c60:	10a4      	asrs	r4, r4, #2
 8007c62:	2600      	movs	r6, #0
 8007c64:	42a6      	cmp	r6, r4
 8007c66:	d109      	bne.n	8007c7c <__libc_init_array+0x24>
 8007c68:	4d0b      	ldr	r5, [pc, #44]	; (8007c98 <__libc_init_array+0x40>)
 8007c6a:	4c0c      	ldr	r4, [pc, #48]	; (8007c9c <__libc_init_array+0x44>)
 8007c6c:	f001 f824 	bl	8008cb8 <_init>
 8007c70:	1b64      	subs	r4, r4, r5
 8007c72:	10a4      	asrs	r4, r4, #2
 8007c74:	2600      	movs	r6, #0
 8007c76:	42a6      	cmp	r6, r4
 8007c78:	d105      	bne.n	8007c86 <__libc_init_array+0x2e>
 8007c7a:	bd70      	pop	{r4, r5, r6, pc}
 8007c7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c80:	4798      	blx	r3
 8007c82:	3601      	adds	r6, #1
 8007c84:	e7ee      	b.n	8007c64 <__libc_init_array+0xc>
 8007c86:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c8a:	4798      	blx	r3
 8007c8c:	3601      	adds	r6, #1
 8007c8e:	e7f2      	b.n	8007c76 <__libc_init_array+0x1e>
 8007c90:	0800960c 	.word	0x0800960c
 8007c94:	0800960c 	.word	0x0800960c
 8007c98:	0800960c 	.word	0x0800960c
 8007c9c:	08009610 	.word	0x08009610

08007ca0 <memset>:
 8007ca0:	4402      	add	r2, r0
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d100      	bne.n	8007caa <memset+0xa>
 8007ca8:	4770      	bx	lr
 8007caa:	f803 1b01 	strb.w	r1, [r3], #1
 8007cae:	e7f9      	b.n	8007ca4 <memset+0x4>

08007cb0 <iprintf>:
 8007cb0:	b40f      	push	{r0, r1, r2, r3}
 8007cb2:	4b0a      	ldr	r3, [pc, #40]	; (8007cdc <iprintf+0x2c>)
 8007cb4:	b513      	push	{r0, r1, r4, lr}
 8007cb6:	681c      	ldr	r4, [r3, #0]
 8007cb8:	b124      	cbz	r4, 8007cc4 <iprintf+0x14>
 8007cba:	69a3      	ldr	r3, [r4, #24]
 8007cbc:	b913      	cbnz	r3, 8007cc4 <iprintf+0x14>
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	f000 fa5e 	bl	8008180 <__sinit>
 8007cc4:	ab05      	add	r3, sp, #20
 8007cc6:	9a04      	ldr	r2, [sp, #16]
 8007cc8:	68a1      	ldr	r1, [r4, #8]
 8007cca:	9301      	str	r3, [sp, #4]
 8007ccc:	4620      	mov	r0, r4
 8007cce:	f000 fc67 	bl	80085a0 <_vfiprintf_r>
 8007cd2:	b002      	add	sp, #8
 8007cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cd8:	b004      	add	sp, #16
 8007cda:	4770      	bx	lr
 8007cdc:	20000028 	.word	0x20000028

08007ce0 <_puts_r>:
 8007ce0:	b570      	push	{r4, r5, r6, lr}
 8007ce2:	460e      	mov	r6, r1
 8007ce4:	4605      	mov	r5, r0
 8007ce6:	b118      	cbz	r0, 8007cf0 <_puts_r+0x10>
 8007ce8:	6983      	ldr	r3, [r0, #24]
 8007cea:	b90b      	cbnz	r3, 8007cf0 <_puts_r+0x10>
 8007cec:	f000 fa48 	bl	8008180 <__sinit>
 8007cf0:	69ab      	ldr	r3, [r5, #24]
 8007cf2:	68ac      	ldr	r4, [r5, #8]
 8007cf4:	b913      	cbnz	r3, 8007cfc <_puts_r+0x1c>
 8007cf6:	4628      	mov	r0, r5
 8007cf8:	f000 fa42 	bl	8008180 <__sinit>
 8007cfc:	4b2c      	ldr	r3, [pc, #176]	; (8007db0 <_puts_r+0xd0>)
 8007cfe:	429c      	cmp	r4, r3
 8007d00:	d120      	bne.n	8007d44 <_puts_r+0x64>
 8007d02:	686c      	ldr	r4, [r5, #4]
 8007d04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d06:	07db      	lsls	r3, r3, #31
 8007d08:	d405      	bmi.n	8007d16 <_puts_r+0x36>
 8007d0a:	89a3      	ldrh	r3, [r4, #12]
 8007d0c:	0598      	lsls	r0, r3, #22
 8007d0e:	d402      	bmi.n	8007d16 <_puts_r+0x36>
 8007d10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d12:	f000 fad3 	bl	80082bc <__retarget_lock_acquire_recursive>
 8007d16:	89a3      	ldrh	r3, [r4, #12]
 8007d18:	0719      	lsls	r1, r3, #28
 8007d1a:	d51d      	bpl.n	8007d58 <_puts_r+0x78>
 8007d1c:	6923      	ldr	r3, [r4, #16]
 8007d1e:	b1db      	cbz	r3, 8007d58 <_puts_r+0x78>
 8007d20:	3e01      	subs	r6, #1
 8007d22:	68a3      	ldr	r3, [r4, #8]
 8007d24:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007d28:	3b01      	subs	r3, #1
 8007d2a:	60a3      	str	r3, [r4, #8]
 8007d2c:	bb39      	cbnz	r1, 8007d7e <_puts_r+0x9e>
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	da38      	bge.n	8007da4 <_puts_r+0xc4>
 8007d32:	4622      	mov	r2, r4
 8007d34:	210a      	movs	r1, #10
 8007d36:	4628      	mov	r0, r5
 8007d38:	f000 f848 	bl	8007dcc <__swbuf_r>
 8007d3c:	3001      	adds	r0, #1
 8007d3e:	d011      	beq.n	8007d64 <_puts_r+0x84>
 8007d40:	250a      	movs	r5, #10
 8007d42:	e011      	b.n	8007d68 <_puts_r+0x88>
 8007d44:	4b1b      	ldr	r3, [pc, #108]	; (8007db4 <_puts_r+0xd4>)
 8007d46:	429c      	cmp	r4, r3
 8007d48:	d101      	bne.n	8007d4e <_puts_r+0x6e>
 8007d4a:	68ac      	ldr	r4, [r5, #8]
 8007d4c:	e7da      	b.n	8007d04 <_puts_r+0x24>
 8007d4e:	4b1a      	ldr	r3, [pc, #104]	; (8007db8 <_puts_r+0xd8>)
 8007d50:	429c      	cmp	r4, r3
 8007d52:	bf08      	it	eq
 8007d54:	68ec      	ldreq	r4, [r5, #12]
 8007d56:	e7d5      	b.n	8007d04 <_puts_r+0x24>
 8007d58:	4621      	mov	r1, r4
 8007d5a:	4628      	mov	r0, r5
 8007d5c:	f000 f888 	bl	8007e70 <__swsetup_r>
 8007d60:	2800      	cmp	r0, #0
 8007d62:	d0dd      	beq.n	8007d20 <_puts_r+0x40>
 8007d64:	f04f 35ff 	mov.w	r5, #4294967295
 8007d68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d6a:	07da      	lsls	r2, r3, #31
 8007d6c:	d405      	bmi.n	8007d7a <_puts_r+0x9a>
 8007d6e:	89a3      	ldrh	r3, [r4, #12]
 8007d70:	059b      	lsls	r3, r3, #22
 8007d72:	d402      	bmi.n	8007d7a <_puts_r+0x9a>
 8007d74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d76:	f000 faa2 	bl	80082be <__retarget_lock_release_recursive>
 8007d7a:	4628      	mov	r0, r5
 8007d7c:	bd70      	pop	{r4, r5, r6, pc}
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	da04      	bge.n	8007d8c <_puts_r+0xac>
 8007d82:	69a2      	ldr	r2, [r4, #24]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	dc06      	bgt.n	8007d96 <_puts_r+0xb6>
 8007d88:	290a      	cmp	r1, #10
 8007d8a:	d004      	beq.n	8007d96 <_puts_r+0xb6>
 8007d8c:	6823      	ldr	r3, [r4, #0]
 8007d8e:	1c5a      	adds	r2, r3, #1
 8007d90:	6022      	str	r2, [r4, #0]
 8007d92:	7019      	strb	r1, [r3, #0]
 8007d94:	e7c5      	b.n	8007d22 <_puts_r+0x42>
 8007d96:	4622      	mov	r2, r4
 8007d98:	4628      	mov	r0, r5
 8007d9a:	f000 f817 	bl	8007dcc <__swbuf_r>
 8007d9e:	3001      	adds	r0, #1
 8007da0:	d1bf      	bne.n	8007d22 <_puts_r+0x42>
 8007da2:	e7df      	b.n	8007d64 <_puts_r+0x84>
 8007da4:	6823      	ldr	r3, [r4, #0]
 8007da6:	250a      	movs	r5, #10
 8007da8:	1c5a      	adds	r2, r3, #1
 8007daa:	6022      	str	r2, [r4, #0]
 8007dac:	701d      	strb	r5, [r3, #0]
 8007dae:	e7db      	b.n	8007d68 <_puts_r+0x88>
 8007db0:	08009590 	.word	0x08009590
 8007db4:	080095b0 	.word	0x080095b0
 8007db8:	08009570 	.word	0x08009570

08007dbc <puts>:
 8007dbc:	4b02      	ldr	r3, [pc, #8]	; (8007dc8 <puts+0xc>)
 8007dbe:	4601      	mov	r1, r0
 8007dc0:	6818      	ldr	r0, [r3, #0]
 8007dc2:	f7ff bf8d 	b.w	8007ce0 <_puts_r>
 8007dc6:	bf00      	nop
 8007dc8:	20000028 	.word	0x20000028

08007dcc <__swbuf_r>:
 8007dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dce:	460e      	mov	r6, r1
 8007dd0:	4614      	mov	r4, r2
 8007dd2:	4605      	mov	r5, r0
 8007dd4:	b118      	cbz	r0, 8007dde <__swbuf_r+0x12>
 8007dd6:	6983      	ldr	r3, [r0, #24]
 8007dd8:	b90b      	cbnz	r3, 8007dde <__swbuf_r+0x12>
 8007dda:	f000 f9d1 	bl	8008180 <__sinit>
 8007dde:	4b21      	ldr	r3, [pc, #132]	; (8007e64 <__swbuf_r+0x98>)
 8007de0:	429c      	cmp	r4, r3
 8007de2:	d12b      	bne.n	8007e3c <__swbuf_r+0x70>
 8007de4:	686c      	ldr	r4, [r5, #4]
 8007de6:	69a3      	ldr	r3, [r4, #24]
 8007de8:	60a3      	str	r3, [r4, #8]
 8007dea:	89a3      	ldrh	r3, [r4, #12]
 8007dec:	071a      	lsls	r2, r3, #28
 8007dee:	d52f      	bpl.n	8007e50 <__swbuf_r+0x84>
 8007df0:	6923      	ldr	r3, [r4, #16]
 8007df2:	b36b      	cbz	r3, 8007e50 <__swbuf_r+0x84>
 8007df4:	6923      	ldr	r3, [r4, #16]
 8007df6:	6820      	ldr	r0, [r4, #0]
 8007df8:	1ac0      	subs	r0, r0, r3
 8007dfa:	6963      	ldr	r3, [r4, #20]
 8007dfc:	b2f6      	uxtb	r6, r6
 8007dfe:	4283      	cmp	r3, r0
 8007e00:	4637      	mov	r7, r6
 8007e02:	dc04      	bgt.n	8007e0e <__swbuf_r+0x42>
 8007e04:	4621      	mov	r1, r4
 8007e06:	4628      	mov	r0, r5
 8007e08:	f000 f926 	bl	8008058 <_fflush_r>
 8007e0c:	bb30      	cbnz	r0, 8007e5c <__swbuf_r+0x90>
 8007e0e:	68a3      	ldr	r3, [r4, #8]
 8007e10:	3b01      	subs	r3, #1
 8007e12:	60a3      	str	r3, [r4, #8]
 8007e14:	6823      	ldr	r3, [r4, #0]
 8007e16:	1c5a      	adds	r2, r3, #1
 8007e18:	6022      	str	r2, [r4, #0]
 8007e1a:	701e      	strb	r6, [r3, #0]
 8007e1c:	6963      	ldr	r3, [r4, #20]
 8007e1e:	3001      	adds	r0, #1
 8007e20:	4283      	cmp	r3, r0
 8007e22:	d004      	beq.n	8007e2e <__swbuf_r+0x62>
 8007e24:	89a3      	ldrh	r3, [r4, #12]
 8007e26:	07db      	lsls	r3, r3, #31
 8007e28:	d506      	bpl.n	8007e38 <__swbuf_r+0x6c>
 8007e2a:	2e0a      	cmp	r6, #10
 8007e2c:	d104      	bne.n	8007e38 <__swbuf_r+0x6c>
 8007e2e:	4621      	mov	r1, r4
 8007e30:	4628      	mov	r0, r5
 8007e32:	f000 f911 	bl	8008058 <_fflush_r>
 8007e36:	b988      	cbnz	r0, 8007e5c <__swbuf_r+0x90>
 8007e38:	4638      	mov	r0, r7
 8007e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e3c:	4b0a      	ldr	r3, [pc, #40]	; (8007e68 <__swbuf_r+0x9c>)
 8007e3e:	429c      	cmp	r4, r3
 8007e40:	d101      	bne.n	8007e46 <__swbuf_r+0x7a>
 8007e42:	68ac      	ldr	r4, [r5, #8]
 8007e44:	e7cf      	b.n	8007de6 <__swbuf_r+0x1a>
 8007e46:	4b09      	ldr	r3, [pc, #36]	; (8007e6c <__swbuf_r+0xa0>)
 8007e48:	429c      	cmp	r4, r3
 8007e4a:	bf08      	it	eq
 8007e4c:	68ec      	ldreq	r4, [r5, #12]
 8007e4e:	e7ca      	b.n	8007de6 <__swbuf_r+0x1a>
 8007e50:	4621      	mov	r1, r4
 8007e52:	4628      	mov	r0, r5
 8007e54:	f000 f80c 	bl	8007e70 <__swsetup_r>
 8007e58:	2800      	cmp	r0, #0
 8007e5a:	d0cb      	beq.n	8007df4 <__swbuf_r+0x28>
 8007e5c:	f04f 37ff 	mov.w	r7, #4294967295
 8007e60:	e7ea      	b.n	8007e38 <__swbuf_r+0x6c>
 8007e62:	bf00      	nop
 8007e64:	08009590 	.word	0x08009590
 8007e68:	080095b0 	.word	0x080095b0
 8007e6c:	08009570 	.word	0x08009570

08007e70 <__swsetup_r>:
 8007e70:	4b32      	ldr	r3, [pc, #200]	; (8007f3c <__swsetup_r+0xcc>)
 8007e72:	b570      	push	{r4, r5, r6, lr}
 8007e74:	681d      	ldr	r5, [r3, #0]
 8007e76:	4606      	mov	r6, r0
 8007e78:	460c      	mov	r4, r1
 8007e7a:	b125      	cbz	r5, 8007e86 <__swsetup_r+0x16>
 8007e7c:	69ab      	ldr	r3, [r5, #24]
 8007e7e:	b913      	cbnz	r3, 8007e86 <__swsetup_r+0x16>
 8007e80:	4628      	mov	r0, r5
 8007e82:	f000 f97d 	bl	8008180 <__sinit>
 8007e86:	4b2e      	ldr	r3, [pc, #184]	; (8007f40 <__swsetup_r+0xd0>)
 8007e88:	429c      	cmp	r4, r3
 8007e8a:	d10f      	bne.n	8007eac <__swsetup_r+0x3c>
 8007e8c:	686c      	ldr	r4, [r5, #4]
 8007e8e:	89a3      	ldrh	r3, [r4, #12]
 8007e90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e94:	0719      	lsls	r1, r3, #28
 8007e96:	d42c      	bmi.n	8007ef2 <__swsetup_r+0x82>
 8007e98:	06dd      	lsls	r5, r3, #27
 8007e9a:	d411      	bmi.n	8007ec0 <__swsetup_r+0x50>
 8007e9c:	2309      	movs	r3, #9
 8007e9e:	6033      	str	r3, [r6, #0]
 8007ea0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007ea4:	81a3      	strh	r3, [r4, #12]
 8007ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8007eaa:	e03e      	b.n	8007f2a <__swsetup_r+0xba>
 8007eac:	4b25      	ldr	r3, [pc, #148]	; (8007f44 <__swsetup_r+0xd4>)
 8007eae:	429c      	cmp	r4, r3
 8007eb0:	d101      	bne.n	8007eb6 <__swsetup_r+0x46>
 8007eb2:	68ac      	ldr	r4, [r5, #8]
 8007eb4:	e7eb      	b.n	8007e8e <__swsetup_r+0x1e>
 8007eb6:	4b24      	ldr	r3, [pc, #144]	; (8007f48 <__swsetup_r+0xd8>)
 8007eb8:	429c      	cmp	r4, r3
 8007eba:	bf08      	it	eq
 8007ebc:	68ec      	ldreq	r4, [r5, #12]
 8007ebe:	e7e6      	b.n	8007e8e <__swsetup_r+0x1e>
 8007ec0:	0758      	lsls	r0, r3, #29
 8007ec2:	d512      	bpl.n	8007eea <__swsetup_r+0x7a>
 8007ec4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ec6:	b141      	cbz	r1, 8007eda <__swsetup_r+0x6a>
 8007ec8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ecc:	4299      	cmp	r1, r3
 8007ece:	d002      	beq.n	8007ed6 <__swsetup_r+0x66>
 8007ed0:	4630      	mov	r0, r6
 8007ed2:	f000 fa5b 	bl	800838c <_free_r>
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	6363      	str	r3, [r4, #52]	; 0x34
 8007eda:	89a3      	ldrh	r3, [r4, #12]
 8007edc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007ee0:	81a3      	strh	r3, [r4, #12]
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	6063      	str	r3, [r4, #4]
 8007ee6:	6923      	ldr	r3, [r4, #16]
 8007ee8:	6023      	str	r3, [r4, #0]
 8007eea:	89a3      	ldrh	r3, [r4, #12]
 8007eec:	f043 0308 	orr.w	r3, r3, #8
 8007ef0:	81a3      	strh	r3, [r4, #12]
 8007ef2:	6923      	ldr	r3, [r4, #16]
 8007ef4:	b94b      	cbnz	r3, 8007f0a <__swsetup_r+0x9a>
 8007ef6:	89a3      	ldrh	r3, [r4, #12]
 8007ef8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007efc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f00:	d003      	beq.n	8007f0a <__swsetup_r+0x9a>
 8007f02:	4621      	mov	r1, r4
 8007f04:	4630      	mov	r0, r6
 8007f06:	f000 fa01 	bl	800830c <__smakebuf_r>
 8007f0a:	89a0      	ldrh	r0, [r4, #12]
 8007f0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f10:	f010 0301 	ands.w	r3, r0, #1
 8007f14:	d00a      	beq.n	8007f2c <__swsetup_r+0xbc>
 8007f16:	2300      	movs	r3, #0
 8007f18:	60a3      	str	r3, [r4, #8]
 8007f1a:	6963      	ldr	r3, [r4, #20]
 8007f1c:	425b      	negs	r3, r3
 8007f1e:	61a3      	str	r3, [r4, #24]
 8007f20:	6923      	ldr	r3, [r4, #16]
 8007f22:	b943      	cbnz	r3, 8007f36 <__swsetup_r+0xc6>
 8007f24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007f28:	d1ba      	bne.n	8007ea0 <__swsetup_r+0x30>
 8007f2a:	bd70      	pop	{r4, r5, r6, pc}
 8007f2c:	0781      	lsls	r1, r0, #30
 8007f2e:	bf58      	it	pl
 8007f30:	6963      	ldrpl	r3, [r4, #20]
 8007f32:	60a3      	str	r3, [r4, #8]
 8007f34:	e7f4      	b.n	8007f20 <__swsetup_r+0xb0>
 8007f36:	2000      	movs	r0, #0
 8007f38:	e7f7      	b.n	8007f2a <__swsetup_r+0xba>
 8007f3a:	bf00      	nop
 8007f3c:	20000028 	.word	0x20000028
 8007f40:	08009590 	.word	0x08009590
 8007f44:	080095b0 	.word	0x080095b0
 8007f48:	08009570 	.word	0x08009570

08007f4c <__sflush_r>:
 8007f4c:	898a      	ldrh	r2, [r1, #12]
 8007f4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f52:	4605      	mov	r5, r0
 8007f54:	0710      	lsls	r0, r2, #28
 8007f56:	460c      	mov	r4, r1
 8007f58:	d458      	bmi.n	800800c <__sflush_r+0xc0>
 8007f5a:	684b      	ldr	r3, [r1, #4]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	dc05      	bgt.n	8007f6c <__sflush_r+0x20>
 8007f60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	dc02      	bgt.n	8007f6c <__sflush_r+0x20>
 8007f66:	2000      	movs	r0, #0
 8007f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f6e:	2e00      	cmp	r6, #0
 8007f70:	d0f9      	beq.n	8007f66 <__sflush_r+0x1a>
 8007f72:	2300      	movs	r3, #0
 8007f74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f78:	682f      	ldr	r7, [r5, #0]
 8007f7a:	602b      	str	r3, [r5, #0]
 8007f7c:	d032      	beq.n	8007fe4 <__sflush_r+0x98>
 8007f7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f80:	89a3      	ldrh	r3, [r4, #12]
 8007f82:	075a      	lsls	r2, r3, #29
 8007f84:	d505      	bpl.n	8007f92 <__sflush_r+0x46>
 8007f86:	6863      	ldr	r3, [r4, #4]
 8007f88:	1ac0      	subs	r0, r0, r3
 8007f8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f8c:	b10b      	cbz	r3, 8007f92 <__sflush_r+0x46>
 8007f8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f90:	1ac0      	subs	r0, r0, r3
 8007f92:	2300      	movs	r3, #0
 8007f94:	4602      	mov	r2, r0
 8007f96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f98:	6a21      	ldr	r1, [r4, #32]
 8007f9a:	4628      	mov	r0, r5
 8007f9c:	47b0      	blx	r6
 8007f9e:	1c43      	adds	r3, r0, #1
 8007fa0:	89a3      	ldrh	r3, [r4, #12]
 8007fa2:	d106      	bne.n	8007fb2 <__sflush_r+0x66>
 8007fa4:	6829      	ldr	r1, [r5, #0]
 8007fa6:	291d      	cmp	r1, #29
 8007fa8:	d82c      	bhi.n	8008004 <__sflush_r+0xb8>
 8007faa:	4a2a      	ldr	r2, [pc, #168]	; (8008054 <__sflush_r+0x108>)
 8007fac:	40ca      	lsrs	r2, r1
 8007fae:	07d6      	lsls	r6, r2, #31
 8007fb0:	d528      	bpl.n	8008004 <__sflush_r+0xb8>
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	6062      	str	r2, [r4, #4]
 8007fb6:	04d9      	lsls	r1, r3, #19
 8007fb8:	6922      	ldr	r2, [r4, #16]
 8007fba:	6022      	str	r2, [r4, #0]
 8007fbc:	d504      	bpl.n	8007fc8 <__sflush_r+0x7c>
 8007fbe:	1c42      	adds	r2, r0, #1
 8007fc0:	d101      	bne.n	8007fc6 <__sflush_r+0x7a>
 8007fc2:	682b      	ldr	r3, [r5, #0]
 8007fc4:	b903      	cbnz	r3, 8007fc8 <__sflush_r+0x7c>
 8007fc6:	6560      	str	r0, [r4, #84]	; 0x54
 8007fc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fca:	602f      	str	r7, [r5, #0]
 8007fcc:	2900      	cmp	r1, #0
 8007fce:	d0ca      	beq.n	8007f66 <__sflush_r+0x1a>
 8007fd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fd4:	4299      	cmp	r1, r3
 8007fd6:	d002      	beq.n	8007fde <__sflush_r+0x92>
 8007fd8:	4628      	mov	r0, r5
 8007fda:	f000 f9d7 	bl	800838c <_free_r>
 8007fde:	2000      	movs	r0, #0
 8007fe0:	6360      	str	r0, [r4, #52]	; 0x34
 8007fe2:	e7c1      	b.n	8007f68 <__sflush_r+0x1c>
 8007fe4:	6a21      	ldr	r1, [r4, #32]
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	4628      	mov	r0, r5
 8007fea:	47b0      	blx	r6
 8007fec:	1c41      	adds	r1, r0, #1
 8007fee:	d1c7      	bne.n	8007f80 <__sflush_r+0x34>
 8007ff0:	682b      	ldr	r3, [r5, #0]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d0c4      	beq.n	8007f80 <__sflush_r+0x34>
 8007ff6:	2b1d      	cmp	r3, #29
 8007ff8:	d001      	beq.n	8007ffe <__sflush_r+0xb2>
 8007ffa:	2b16      	cmp	r3, #22
 8007ffc:	d101      	bne.n	8008002 <__sflush_r+0xb6>
 8007ffe:	602f      	str	r7, [r5, #0]
 8008000:	e7b1      	b.n	8007f66 <__sflush_r+0x1a>
 8008002:	89a3      	ldrh	r3, [r4, #12]
 8008004:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008008:	81a3      	strh	r3, [r4, #12]
 800800a:	e7ad      	b.n	8007f68 <__sflush_r+0x1c>
 800800c:	690f      	ldr	r7, [r1, #16]
 800800e:	2f00      	cmp	r7, #0
 8008010:	d0a9      	beq.n	8007f66 <__sflush_r+0x1a>
 8008012:	0793      	lsls	r3, r2, #30
 8008014:	680e      	ldr	r6, [r1, #0]
 8008016:	bf08      	it	eq
 8008018:	694b      	ldreq	r3, [r1, #20]
 800801a:	600f      	str	r7, [r1, #0]
 800801c:	bf18      	it	ne
 800801e:	2300      	movne	r3, #0
 8008020:	eba6 0807 	sub.w	r8, r6, r7
 8008024:	608b      	str	r3, [r1, #8]
 8008026:	f1b8 0f00 	cmp.w	r8, #0
 800802a:	dd9c      	ble.n	8007f66 <__sflush_r+0x1a>
 800802c:	6a21      	ldr	r1, [r4, #32]
 800802e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008030:	4643      	mov	r3, r8
 8008032:	463a      	mov	r2, r7
 8008034:	4628      	mov	r0, r5
 8008036:	47b0      	blx	r6
 8008038:	2800      	cmp	r0, #0
 800803a:	dc06      	bgt.n	800804a <__sflush_r+0xfe>
 800803c:	89a3      	ldrh	r3, [r4, #12]
 800803e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008042:	81a3      	strh	r3, [r4, #12]
 8008044:	f04f 30ff 	mov.w	r0, #4294967295
 8008048:	e78e      	b.n	8007f68 <__sflush_r+0x1c>
 800804a:	4407      	add	r7, r0
 800804c:	eba8 0800 	sub.w	r8, r8, r0
 8008050:	e7e9      	b.n	8008026 <__sflush_r+0xda>
 8008052:	bf00      	nop
 8008054:	20400001 	.word	0x20400001

08008058 <_fflush_r>:
 8008058:	b538      	push	{r3, r4, r5, lr}
 800805a:	690b      	ldr	r3, [r1, #16]
 800805c:	4605      	mov	r5, r0
 800805e:	460c      	mov	r4, r1
 8008060:	b913      	cbnz	r3, 8008068 <_fflush_r+0x10>
 8008062:	2500      	movs	r5, #0
 8008064:	4628      	mov	r0, r5
 8008066:	bd38      	pop	{r3, r4, r5, pc}
 8008068:	b118      	cbz	r0, 8008072 <_fflush_r+0x1a>
 800806a:	6983      	ldr	r3, [r0, #24]
 800806c:	b90b      	cbnz	r3, 8008072 <_fflush_r+0x1a>
 800806e:	f000 f887 	bl	8008180 <__sinit>
 8008072:	4b14      	ldr	r3, [pc, #80]	; (80080c4 <_fflush_r+0x6c>)
 8008074:	429c      	cmp	r4, r3
 8008076:	d11b      	bne.n	80080b0 <_fflush_r+0x58>
 8008078:	686c      	ldr	r4, [r5, #4]
 800807a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d0ef      	beq.n	8008062 <_fflush_r+0xa>
 8008082:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008084:	07d0      	lsls	r0, r2, #31
 8008086:	d404      	bmi.n	8008092 <_fflush_r+0x3a>
 8008088:	0599      	lsls	r1, r3, #22
 800808a:	d402      	bmi.n	8008092 <_fflush_r+0x3a>
 800808c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800808e:	f000 f915 	bl	80082bc <__retarget_lock_acquire_recursive>
 8008092:	4628      	mov	r0, r5
 8008094:	4621      	mov	r1, r4
 8008096:	f7ff ff59 	bl	8007f4c <__sflush_r>
 800809a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800809c:	07da      	lsls	r2, r3, #31
 800809e:	4605      	mov	r5, r0
 80080a0:	d4e0      	bmi.n	8008064 <_fflush_r+0xc>
 80080a2:	89a3      	ldrh	r3, [r4, #12]
 80080a4:	059b      	lsls	r3, r3, #22
 80080a6:	d4dd      	bmi.n	8008064 <_fflush_r+0xc>
 80080a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080aa:	f000 f908 	bl	80082be <__retarget_lock_release_recursive>
 80080ae:	e7d9      	b.n	8008064 <_fflush_r+0xc>
 80080b0:	4b05      	ldr	r3, [pc, #20]	; (80080c8 <_fflush_r+0x70>)
 80080b2:	429c      	cmp	r4, r3
 80080b4:	d101      	bne.n	80080ba <_fflush_r+0x62>
 80080b6:	68ac      	ldr	r4, [r5, #8]
 80080b8:	e7df      	b.n	800807a <_fflush_r+0x22>
 80080ba:	4b04      	ldr	r3, [pc, #16]	; (80080cc <_fflush_r+0x74>)
 80080bc:	429c      	cmp	r4, r3
 80080be:	bf08      	it	eq
 80080c0:	68ec      	ldreq	r4, [r5, #12]
 80080c2:	e7da      	b.n	800807a <_fflush_r+0x22>
 80080c4:	08009590 	.word	0x08009590
 80080c8:	080095b0 	.word	0x080095b0
 80080cc:	08009570 	.word	0x08009570

080080d0 <std>:
 80080d0:	2300      	movs	r3, #0
 80080d2:	b510      	push	{r4, lr}
 80080d4:	4604      	mov	r4, r0
 80080d6:	e9c0 3300 	strd	r3, r3, [r0]
 80080da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80080de:	6083      	str	r3, [r0, #8]
 80080e0:	8181      	strh	r1, [r0, #12]
 80080e2:	6643      	str	r3, [r0, #100]	; 0x64
 80080e4:	81c2      	strh	r2, [r0, #14]
 80080e6:	6183      	str	r3, [r0, #24]
 80080e8:	4619      	mov	r1, r3
 80080ea:	2208      	movs	r2, #8
 80080ec:	305c      	adds	r0, #92	; 0x5c
 80080ee:	f7ff fdd7 	bl	8007ca0 <memset>
 80080f2:	4b05      	ldr	r3, [pc, #20]	; (8008108 <std+0x38>)
 80080f4:	6263      	str	r3, [r4, #36]	; 0x24
 80080f6:	4b05      	ldr	r3, [pc, #20]	; (800810c <std+0x3c>)
 80080f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80080fa:	4b05      	ldr	r3, [pc, #20]	; (8008110 <std+0x40>)
 80080fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80080fe:	4b05      	ldr	r3, [pc, #20]	; (8008114 <std+0x44>)
 8008100:	6224      	str	r4, [r4, #32]
 8008102:	6323      	str	r3, [r4, #48]	; 0x30
 8008104:	bd10      	pop	{r4, pc}
 8008106:	bf00      	nop
 8008108:	08008b49 	.word	0x08008b49
 800810c:	08008b6b 	.word	0x08008b6b
 8008110:	08008ba3 	.word	0x08008ba3
 8008114:	08008bc7 	.word	0x08008bc7

08008118 <_cleanup_r>:
 8008118:	4901      	ldr	r1, [pc, #4]	; (8008120 <_cleanup_r+0x8>)
 800811a:	f000 b8af 	b.w	800827c <_fwalk_reent>
 800811e:	bf00      	nop
 8008120:	08008059 	.word	0x08008059

08008124 <__sfmoreglue>:
 8008124:	b570      	push	{r4, r5, r6, lr}
 8008126:	2268      	movs	r2, #104	; 0x68
 8008128:	1e4d      	subs	r5, r1, #1
 800812a:	4355      	muls	r5, r2
 800812c:	460e      	mov	r6, r1
 800812e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008132:	f000 f997 	bl	8008464 <_malloc_r>
 8008136:	4604      	mov	r4, r0
 8008138:	b140      	cbz	r0, 800814c <__sfmoreglue+0x28>
 800813a:	2100      	movs	r1, #0
 800813c:	e9c0 1600 	strd	r1, r6, [r0]
 8008140:	300c      	adds	r0, #12
 8008142:	60a0      	str	r0, [r4, #8]
 8008144:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008148:	f7ff fdaa 	bl	8007ca0 <memset>
 800814c:	4620      	mov	r0, r4
 800814e:	bd70      	pop	{r4, r5, r6, pc}

08008150 <__sfp_lock_acquire>:
 8008150:	4801      	ldr	r0, [pc, #4]	; (8008158 <__sfp_lock_acquire+0x8>)
 8008152:	f000 b8b3 	b.w	80082bc <__retarget_lock_acquire_recursive>
 8008156:	bf00      	nop
 8008158:	20004495 	.word	0x20004495

0800815c <__sfp_lock_release>:
 800815c:	4801      	ldr	r0, [pc, #4]	; (8008164 <__sfp_lock_release+0x8>)
 800815e:	f000 b8ae 	b.w	80082be <__retarget_lock_release_recursive>
 8008162:	bf00      	nop
 8008164:	20004495 	.word	0x20004495

08008168 <__sinit_lock_acquire>:
 8008168:	4801      	ldr	r0, [pc, #4]	; (8008170 <__sinit_lock_acquire+0x8>)
 800816a:	f000 b8a7 	b.w	80082bc <__retarget_lock_acquire_recursive>
 800816e:	bf00      	nop
 8008170:	20004496 	.word	0x20004496

08008174 <__sinit_lock_release>:
 8008174:	4801      	ldr	r0, [pc, #4]	; (800817c <__sinit_lock_release+0x8>)
 8008176:	f000 b8a2 	b.w	80082be <__retarget_lock_release_recursive>
 800817a:	bf00      	nop
 800817c:	20004496 	.word	0x20004496

08008180 <__sinit>:
 8008180:	b510      	push	{r4, lr}
 8008182:	4604      	mov	r4, r0
 8008184:	f7ff fff0 	bl	8008168 <__sinit_lock_acquire>
 8008188:	69a3      	ldr	r3, [r4, #24]
 800818a:	b11b      	cbz	r3, 8008194 <__sinit+0x14>
 800818c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008190:	f7ff bff0 	b.w	8008174 <__sinit_lock_release>
 8008194:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008198:	6523      	str	r3, [r4, #80]	; 0x50
 800819a:	4b13      	ldr	r3, [pc, #76]	; (80081e8 <__sinit+0x68>)
 800819c:	4a13      	ldr	r2, [pc, #76]	; (80081ec <__sinit+0x6c>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80081a2:	42a3      	cmp	r3, r4
 80081a4:	bf04      	itt	eq
 80081a6:	2301      	moveq	r3, #1
 80081a8:	61a3      	streq	r3, [r4, #24]
 80081aa:	4620      	mov	r0, r4
 80081ac:	f000 f820 	bl	80081f0 <__sfp>
 80081b0:	6060      	str	r0, [r4, #4]
 80081b2:	4620      	mov	r0, r4
 80081b4:	f000 f81c 	bl	80081f0 <__sfp>
 80081b8:	60a0      	str	r0, [r4, #8]
 80081ba:	4620      	mov	r0, r4
 80081bc:	f000 f818 	bl	80081f0 <__sfp>
 80081c0:	2200      	movs	r2, #0
 80081c2:	60e0      	str	r0, [r4, #12]
 80081c4:	2104      	movs	r1, #4
 80081c6:	6860      	ldr	r0, [r4, #4]
 80081c8:	f7ff ff82 	bl	80080d0 <std>
 80081cc:	68a0      	ldr	r0, [r4, #8]
 80081ce:	2201      	movs	r2, #1
 80081d0:	2109      	movs	r1, #9
 80081d2:	f7ff ff7d 	bl	80080d0 <std>
 80081d6:	68e0      	ldr	r0, [r4, #12]
 80081d8:	2202      	movs	r2, #2
 80081da:	2112      	movs	r1, #18
 80081dc:	f7ff ff78 	bl	80080d0 <std>
 80081e0:	2301      	movs	r3, #1
 80081e2:	61a3      	str	r3, [r4, #24]
 80081e4:	e7d2      	b.n	800818c <__sinit+0xc>
 80081e6:	bf00      	nop
 80081e8:	0800956c 	.word	0x0800956c
 80081ec:	08008119 	.word	0x08008119

080081f0 <__sfp>:
 80081f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081f2:	4607      	mov	r7, r0
 80081f4:	f7ff ffac 	bl	8008150 <__sfp_lock_acquire>
 80081f8:	4b1e      	ldr	r3, [pc, #120]	; (8008274 <__sfp+0x84>)
 80081fa:	681e      	ldr	r6, [r3, #0]
 80081fc:	69b3      	ldr	r3, [r6, #24]
 80081fe:	b913      	cbnz	r3, 8008206 <__sfp+0x16>
 8008200:	4630      	mov	r0, r6
 8008202:	f7ff ffbd 	bl	8008180 <__sinit>
 8008206:	3648      	adds	r6, #72	; 0x48
 8008208:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800820c:	3b01      	subs	r3, #1
 800820e:	d503      	bpl.n	8008218 <__sfp+0x28>
 8008210:	6833      	ldr	r3, [r6, #0]
 8008212:	b30b      	cbz	r3, 8008258 <__sfp+0x68>
 8008214:	6836      	ldr	r6, [r6, #0]
 8008216:	e7f7      	b.n	8008208 <__sfp+0x18>
 8008218:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800821c:	b9d5      	cbnz	r5, 8008254 <__sfp+0x64>
 800821e:	4b16      	ldr	r3, [pc, #88]	; (8008278 <__sfp+0x88>)
 8008220:	60e3      	str	r3, [r4, #12]
 8008222:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008226:	6665      	str	r5, [r4, #100]	; 0x64
 8008228:	f000 f847 	bl	80082ba <__retarget_lock_init_recursive>
 800822c:	f7ff ff96 	bl	800815c <__sfp_lock_release>
 8008230:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008234:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008238:	6025      	str	r5, [r4, #0]
 800823a:	61a5      	str	r5, [r4, #24]
 800823c:	2208      	movs	r2, #8
 800823e:	4629      	mov	r1, r5
 8008240:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008244:	f7ff fd2c 	bl	8007ca0 <memset>
 8008248:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800824c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008250:	4620      	mov	r0, r4
 8008252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008254:	3468      	adds	r4, #104	; 0x68
 8008256:	e7d9      	b.n	800820c <__sfp+0x1c>
 8008258:	2104      	movs	r1, #4
 800825a:	4638      	mov	r0, r7
 800825c:	f7ff ff62 	bl	8008124 <__sfmoreglue>
 8008260:	4604      	mov	r4, r0
 8008262:	6030      	str	r0, [r6, #0]
 8008264:	2800      	cmp	r0, #0
 8008266:	d1d5      	bne.n	8008214 <__sfp+0x24>
 8008268:	f7ff ff78 	bl	800815c <__sfp_lock_release>
 800826c:	230c      	movs	r3, #12
 800826e:	603b      	str	r3, [r7, #0]
 8008270:	e7ee      	b.n	8008250 <__sfp+0x60>
 8008272:	bf00      	nop
 8008274:	0800956c 	.word	0x0800956c
 8008278:	ffff0001 	.word	0xffff0001

0800827c <_fwalk_reent>:
 800827c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008280:	4606      	mov	r6, r0
 8008282:	4688      	mov	r8, r1
 8008284:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008288:	2700      	movs	r7, #0
 800828a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800828e:	f1b9 0901 	subs.w	r9, r9, #1
 8008292:	d505      	bpl.n	80082a0 <_fwalk_reent+0x24>
 8008294:	6824      	ldr	r4, [r4, #0]
 8008296:	2c00      	cmp	r4, #0
 8008298:	d1f7      	bne.n	800828a <_fwalk_reent+0xe>
 800829a:	4638      	mov	r0, r7
 800829c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082a0:	89ab      	ldrh	r3, [r5, #12]
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d907      	bls.n	80082b6 <_fwalk_reent+0x3a>
 80082a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80082aa:	3301      	adds	r3, #1
 80082ac:	d003      	beq.n	80082b6 <_fwalk_reent+0x3a>
 80082ae:	4629      	mov	r1, r5
 80082b0:	4630      	mov	r0, r6
 80082b2:	47c0      	blx	r8
 80082b4:	4307      	orrs	r7, r0
 80082b6:	3568      	adds	r5, #104	; 0x68
 80082b8:	e7e9      	b.n	800828e <_fwalk_reent+0x12>

080082ba <__retarget_lock_init_recursive>:
 80082ba:	4770      	bx	lr

080082bc <__retarget_lock_acquire_recursive>:
 80082bc:	4770      	bx	lr

080082be <__retarget_lock_release_recursive>:
 80082be:	4770      	bx	lr

080082c0 <__swhatbuf_r>:
 80082c0:	b570      	push	{r4, r5, r6, lr}
 80082c2:	460e      	mov	r6, r1
 80082c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082c8:	2900      	cmp	r1, #0
 80082ca:	b096      	sub	sp, #88	; 0x58
 80082cc:	4614      	mov	r4, r2
 80082ce:	461d      	mov	r5, r3
 80082d0:	da08      	bge.n	80082e4 <__swhatbuf_r+0x24>
 80082d2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80082d6:	2200      	movs	r2, #0
 80082d8:	602a      	str	r2, [r5, #0]
 80082da:	061a      	lsls	r2, r3, #24
 80082dc:	d410      	bmi.n	8008300 <__swhatbuf_r+0x40>
 80082de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082e2:	e00e      	b.n	8008302 <__swhatbuf_r+0x42>
 80082e4:	466a      	mov	r2, sp
 80082e6:	f000 fc95 	bl	8008c14 <_fstat_r>
 80082ea:	2800      	cmp	r0, #0
 80082ec:	dbf1      	blt.n	80082d2 <__swhatbuf_r+0x12>
 80082ee:	9a01      	ldr	r2, [sp, #4]
 80082f0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80082f4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80082f8:	425a      	negs	r2, r3
 80082fa:	415a      	adcs	r2, r3
 80082fc:	602a      	str	r2, [r5, #0]
 80082fe:	e7ee      	b.n	80082de <__swhatbuf_r+0x1e>
 8008300:	2340      	movs	r3, #64	; 0x40
 8008302:	2000      	movs	r0, #0
 8008304:	6023      	str	r3, [r4, #0]
 8008306:	b016      	add	sp, #88	; 0x58
 8008308:	bd70      	pop	{r4, r5, r6, pc}
	...

0800830c <__smakebuf_r>:
 800830c:	898b      	ldrh	r3, [r1, #12]
 800830e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008310:	079d      	lsls	r5, r3, #30
 8008312:	4606      	mov	r6, r0
 8008314:	460c      	mov	r4, r1
 8008316:	d507      	bpl.n	8008328 <__smakebuf_r+0x1c>
 8008318:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800831c:	6023      	str	r3, [r4, #0]
 800831e:	6123      	str	r3, [r4, #16]
 8008320:	2301      	movs	r3, #1
 8008322:	6163      	str	r3, [r4, #20]
 8008324:	b002      	add	sp, #8
 8008326:	bd70      	pop	{r4, r5, r6, pc}
 8008328:	ab01      	add	r3, sp, #4
 800832a:	466a      	mov	r2, sp
 800832c:	f7ff ffc8 	bl	80082c0 <__swhatbuf_r>
 8008330:	9900      	ldr	r1, [sp, #0]
 8008332:	4605      	mov	r5, r0
 8008334:	4630      	mov	r0, r6
 8008336:	f000 f895 	bl	8008464 <_malloc_r>
 800833a:	b948      	cbnz	r0, 8008350 <__smakebuf_r+0x44>
 800833c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008340:	059a      	lsls	r2, r3, #22
 8008342:	d4ef      	bmi.n	8008324 <__smakebuf_r+0x18>
 8008344:	f023 0303 	bic.w	r3, r3, #3
 8008348:	f043 0302 	orr.w	r3, r3, #2
 800834c:	81a3      	strh	r3, [r4, #12]
 800834e:	e7e3      	b.n	8008318 <__smakebuf_r+0xc>
 8008350:	4b0d      	ldr	r3, [pc, #52]	; (8008388 <__smakebuf_r+0x7c>)
 8008352:	62b3      	str	r3, [r6, #40]	; 0x28
 8008354:	89a3      	ldrh	r3, [r4, #12]
 8008356:	6020      	str	r0, [r4, #0]
 8008358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800835c:	81a3      	strh	r3, [r4, #12]
 800835e:	9b00      	ldr	r3, [sp, #0]
 8008360:	6163      	str	r3, [r4, #20]
 8008362:	9b01      	ldr	r3, [sp, #4]
 8008364:	6120      	str	r0, [r4, #16]
 8008366:	b15b      	cbz	r3, 8008380 <__smakebuf_r+0x74>
 8008368:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800836c:	4630      	mov	r0, r6
 800836e:	f000 fc63 	bl	8008c38 <_isatty_r>
 8008372:	b128      	cbz	r0, 8008380 <__smakebuf_r+0x74>
 8008374:	89a3      	ldrh	r3, [r4, #12]
 8008376:	f023 0303 	bic.w	r3, r3, #3
 800837a:	f043 0301 	orr.w	r3, r3, #1
 800837e:	81a3      	strh	r3, [r4, #12]
 8008380:	89a0      	ldrh	r0, [r4, #12]
 8008382:	4305      	orrs	r5, r0
 8008384:	81a5      	strh	r5, [r4, #12]
 8008386:	e7cd      	b.n	8008324 <__smakebuf_r+0x18>
 8008388:	08008119 	.word	0x08008119

0800838c <_free_r>:
 800838c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800838e:	2900      	cmp	r1, #0
 8008390:	d044      	beq.n	800841c <_free_r+0x90>
 8008392:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008396:	9001      	str	r0, [sp, #4]
 8008398:	2b00      	cmp	r3, #0
 800839a:	f1a1 0404 	sub.w	r4, r1, #4
 800839e:	bfb8      	it	lt
 80083a0:	18e4      	addlt	r4, r4, r3
 80083a2:	f000 fc6b 	bl	8008c7c <__malloc_lock>
 80083a6:	4a1e      	ldr	r2, [pc, #120]	; (8008420 <_free_r+0x94>)
 80083a8:	9801      	ldr	r0, [sp, #4]
 80083aa:	6813      	ldr	r3, [r2, #0]
 80083ac:	b933      	cbnz	r3, 80083bc <_free_r+0x30>
 80083ae:	6063      	str	r3, [r4, #4]
 80083b0:	6014      	str	r4, [r2, #0]
 80083b2:	b003      	add	sp, #12
 80083b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80083b8:	f000 bc66 	b.w	8008c88 <__malloc_unlock>
 80083bc:	42a3      	cmp	r3, r4
 80083be:	d908      	bls.n	80083d2 <_free_r+0x46>
 80083c0:	6825      	ldr	r5, [r4, #0]
 80083c2:	1961      	adds	r1, r4, r5
 80083c4:	428b      	cmp	r3, r1
 80083c6:	bf01      	itttt	eq
 80083c8:	6819      	ldreq	r1, [r3, #0]
 80083ca:	685b      	ldreq	r3, [r3, #4]
 80083cc:	1949      	addeq	r1, r1, r5
 80083ce:	6021      	streq	r1, [r4, #0]
 80083d0:	e7ed      	b.n	80083ae <_free_r+0x22>
 80083d2:	461a      	mov	r2, r3
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	b10b      	cbz	r3, 80083dc <_free_r+0x50>
 80083d8:	42a3      	cmp	r3, r4
 80083da:	d9fa      	bls.n	80083d2 <_free_r+0x46>
 80083dc:	6811      	ldr	r1, [r2, #0]
 80083de:	1855      	adds	r5, r2, r1
 80083e0:	42a5      	cmp	r5, r4
 80083e2:	d10b      	bne.n	80083fc <_free_r+0x70>
 80083e4:	6824      	ldr	r4, [r4, #0]
 80083e6:	4421      	add	r1, r4
 80083e8:	1854      	adds	r4, r2, r1
 80083ea:	42a3      	cmp	r3, r4
 80083ec:	6011      	str	r1, [r2, #0]
 80083ee:	d1e0      	bne.n	80083b2 <_free_r+0x26>
 80083f0:	681c      	ldr	r4, [r3, #0]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	6053      	str	r3, [r2, #4]
 80083f6:	4421      	add	r1, r4
 80083f8:	6011      	str	r1, [r2, #0]
 80083fa:	e7da      	b.n	80083b2 <_free_r+0x26>
 80083fc:	d902      	bls.n	8008404 <_free_r+0x78>
 80083fe:	230c      	movs	r3, #12
 8008400:	6003      	str	r3, [r0, #0]
 8008402:	e7d6      	b.n	80083b2 <_free_r+0x26>
 8008404:	6825      	ldr	r5, [r4, #0]
 8008406:	1961      	adds	r1, r4, r5
 8008408:	428b      	cmp	r3, r1
 800840a:	bf04      	itt	eq
 800840c:	6819      	ldreq	r1, [r3, #0]
 800840e:	685b      	ldreq	r3, [r3, #4]
 8008410:	6063      	str	r3, [r4, #4]
 8008412:	bf04      	itt	eq
 8008414:	1949      	addeq	r1, r1, r5
 8008416:	6021      	streq	r1, [r4, #0]
 8008418:	6054      	str	r4, [r2, #4]
 800841a:	e7ca      	b.n	80083b2 <_free_r+0x26>
 800841c:	b003      	add	sp, #12
 800841e:	bd30      	pop	{r4, r5, pc}
 8008420:	20004498 	.word	0x20004498

08008424 <sbrk_aligned>:
 8008424:	b570      	push	{r4, r5, r6, lr}
 8008426:	4e0e      	ldr	r6, [pc, #56]	; (8008460 <sbrk_aligned+0x3c>)
 8008428:	460c      	mov	r4, r1
 800842a:	6831      	ldr	r1, [r6, #0]
 800842c:	4605      	mov	r5, r0
 800842e:	b911      	cbnz	r1, 8008436 <sbrk_aligned+0x12>
 8008430:	f000 fb7a 	bl	8008b28 <_sbrk_r>
 8008434:	6030      	str	r0, [r6, #0]
 8008436:	4621      	mov	r1, r4
 8008438:	4628      	mov	r0, r5
 800843a:	f000 fb75 	bl	8008b28 <_sbrk_r>
 800843e:	1c43      	adds	r3, r0, #1
 8008440:	d00a      	beq.n	8008458 <sbrk_aligned+0x34>
 8008442:	1cc4      	adds	r4, r0, #3
 8008444:	f024 0403 	bic.w	r4, r4, #3
 8008448:	42a0      	cmp	r0, r4
 800844a:	d007      	beq.n	800845c <sbrk_aligned+0x38>
 800844c:	1a21      	subs	r1, r4, r0
 800844e:	4628      	mov	r0, r5
 8008450:	f000 fb6a 	bl	8008b28 <_sbrk_r>
 8008454:	3001      	adds	r0, #1
 8008456:	d101      	bne.n	800845c <sbrk_aligned+0x38>
 8008458:	f04f 34ff 	mov.w	r4, #4294967295
 800845c:	4620      	mov	r0, r4
 800845e:	bd70      	pop	{r4, r5, r6, pc}
 8008460:	2000449c 	.word	0x2000449c

08008464 <_malloc_r>:
 8008464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008468:	1ccd      	adds	r5, r1, #3
 800846a:	f025 0503 	bic.w	r5, r5, #3
 800846e:	3508      	adds	r5, #8
 8008470:	2d0c      	cmp	r5, #12
 8008472:	bf38      	it	cc
 8008474:	250c      	movcc	r5, #12
 8008476:	2d00      	cmp	r5, #0
 8008478:	4607      	mov	r7, r0
 800847a:	db01      	blt.n	8008480 <_malloc_r+0x1c>
 800847c:	42a9      	cmp	r1, r5
 800847e:	d905      	bls.n	800848c <_malloc_r+0x28>
 8008480:	230c      	movs	r3, #12
 8008482:	603b      	str	r3, [r7, #0]
 8008484:	2600      	movs	r6, #0
 8008486:	4630      	mov	r0, r6
 8008488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800848c:	4e2e      	ldr	r6, [pc, #184]	; (8008548 <_malloc_r+0xe4>)
 800848e:	f000 fbf5 	bl	8008c7c <__malloc_lock>
 8008492:	6833      	ldr	r3, [r6, #0]
 8008494:	461c      	mov	r4, r3
 8008496:	bb34      	cbnz	r4, 80084e6 <_malloc_r+0x82>
 8008498:	4629      	mov	r1, r5
 800849a:	4638      	mov	r0, r7
 800849c:	f7ff ffc2 	bl	8008424 <sbrk_aligned>
 80084a0:	1c43      	adds	r3, r0, #1
 80084a2:	4604      	mov	r4, r0
 80084a4:	d14d      	bne.n	8008542 <_malloc_r+0xde>
 80084a6:	6834      	ldr	r4, [r6, #0]
 80084a8:	4626      	mov	r6, r4
 80084aa:	2e00      	cmp	r6, #0
 80084ac:	d140      	bne.n	8008530 <_malloc_r+0xcc>
 80084ae:	6823      	ldr	r3, [r4, #0]
 80084b0:	4631      	mov	r1, r6
 80084b2:	4638      	mov	r0, r7
 80084b4:	eb04 0803 	add.w	r8, r4, r3
 80084b8:	f000 fb36 	bl	8008b28 <_sbrk_r>
 80084bc:	4580      	cmp	r8, r0
 80084be:	d13a      	bne.n	8008536 <_malloc_r+0xd2>
 80084c0:	6821      	ldr	r1, [r4, #0]
 80084c2:	3503      	adds	r5, #3
 80084c4:	1a6d      	subs	r5, r5, r1
 80084c6:	f025 0503 	bic.w	r5, r5, #3
 80084ca:	3508      	adds	r5, #8
 80084cc:	2d0c      	cmp	r5, #12
 80084ce:	bf38      	it	cc
 80084d0:	250c      	movcc	r5, #12
 80084d2:	4629      	mov	r1, r5
 80084d4:	4638      	mov	r0, r7
 80084d6:	f7ff ffa5 	bl	8008424 <sbrk_aligned>
 80084da:	3001      	adds	r0, #1
 80084dc:	d02b      	beq.n	8008536 <_malloc_r+0xd2>
 80084de:	6823      	ldr	r3, [r4, #0]
 80084e0:	442b      	add	r3, r5
 80084e2:	6023      	str	r3, [r4, #0]
 80084e4:	e00e      	b.n	8008504 <_malloc_r+0xa0>
 80084e6:	6822      	ldr	r2, [r4, #0]
 80084e8:	1b52      	subs	r2, r2, r5
 80084ea:	d41e      	bmi.n	800852a <_malloc_r+0xc6>
 80084ec:	2a0b      	cmp	r2, #11
 80084ee:	d916      	bls.n	800851e <_malloc_r+0xba>
 80084f0:	1961      	adds	r1, r4, r5
 80084f2:	42a3      	cmp	r3, r4
 80084f4:	6025      	str	r5, [r4, #0]
 80084f6:	bf18      	it	ne
 80084f8:	6059      	strne	r1, [r3, #4]
 80084fa:	6863      	ldr	r3, [r4, #4]
 80084fc:	bf08      	it	eq
 80084fe:	6031      	streq	r1, [r6, #0]
 8008500:	5162      	str	r2, [r4, r5]
 8008502:	604b      	str	r3, [r1, #4]
 8008504:	4638      	mov	r0, r7
 8008506:	f104 060b 	add.w	r6, r4, #11
 800850a:	f000 fbbd 	bl	8008c88 <__malloc_unlock>
 800850e:	f026 0607 	bic.w	r6, r6, #7
 8008512:	1d23      	adds	r3, r4, #4
 8008514:	1af2      	subs	r2, r6, r3
 8008516:	d0b6      	beq.n	8008486 <_malloc_r+0x22>
 8008518:	1b9b      	subs	r3, r3, r6
 800851a:	50a3      	str	r3, [r4, r2]
 800851c:	e7b3      	b.n	8008486 <_malloc_r+0x22>
 800851e:	6862      	ldr	r2, [r4, #4]
 8008520:	42a3      	cmp	r3, r4
 8008522:	bf0c      	ite	eq
 8008524:	6032      	streq	r2, [r6, #0]
 8008526:	605a      	strne	r2, [r3, #4]
 8008528:	e7ec      	b.n	8008504 <_malloc_r+0xa0>
 800852a:	4623      	mov	r3, r4
 800852c:	6864      	ldr	r4, [r4, #4]
 800852e:	e7b2      	b.n	8008496 <_malloc_r+0x32>
 8008530:	4634      	mov	r4, r6
 8008532:	6876      	ldr	r6, [r6, #4]
 8008534:	e7b9      	b.n	80084aa <_malloc_r+0x46>
 8008536:	230c      	movs	r3, #12
 8008538:	603b      	str	r3, [r7, #0]
 800853a:	4638      	mov	r0, r7
 800853c:	f000 fba4 	bl	8008c88 <__malloc_unlock>
 8008540:	e7a1      	b.n	8008486 <_malloc_r+0x22>
 8008542:	6025      	str	r5, [r4, #0]
 8008544:	e7de      	b.n	8008504 <_malloc_r+0xa0>
 8008546:	bf00      	nop
 8008548:	20004498 	.word	0x20004498

0800854c <__sfputc_r>:
 800854c:	6893      	ldr	r3, [r2, #8]
 800854e:	3b01      	subs	r3, #1
 8008550:	2b00      	cmp	r3, #0
 8008552:	b410      	push	{r4}
 8008554:	6093      	str	r3, [r2, #8]
 8008556:	da08      	bge.n	800856a <__sfputc_r+0x1e>
 8008558:	6994      	ldr	r4, [r2, #24]
 800855a:	42a3      	cmp	r3, r4
 800855c:	db01      	blt.n	8008562 <__sfputc_r+0x16>
 800855e:	290a      	cmp	r1, #10
 8008560:	d103      	bne.n	800856a <__sfputc_r+0x1e>
 8008562:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008566:	f7ff bc31 	b.w	8007dcc <__swbuf_r>
 800856a:	6813      	ldr	r3, [r2, #0]
 800856c:	1c58      	adds	r0, r3, #1
 800856e:	6010      	str	r0, [r2, #0]
 8008570:	7019      	strb	r1, [r3, #0]
 8008572:	4608      	mov	r0, r1
 8008574:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008578:	4770      	bx	lr

0800857a <__sfputs_r>:
 800857a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800857c:	4606      	mov	r6, r0
 800857e:	460f      	mov	r7, r1
 8008580:	4614      	mov	r4, r2
 8008582:	18d5      	adds	r5, r2, r3
 8008584:	42ac      	cmp	r4, r5
 8008586:	d101      	bne.n	800858c <__sfputs_r+0x12>
 8008588:	2000      	movs	r0, #0
 800858a:	e007      	b.n	800859c <__sfputs_r+0x22>
 800858c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008590:	463a      	mov	r2, r7
 8008592:	4630      	mov	r0, r6
 8008594:	f7ff ffda 	bl	800854c <__sfputc_r>
 8008598:	1c43      	adds	r3, r0, #1
 800859a:	d1f3      	bne.n	8008584 <__sfputs_r+0xa>
 800859c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080085a0 <_vfiprintf_r>:
 80085a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a4:	460d      	mov	r5, r1
 80085a6:	b09d      	sub	sp, #116	; 0x74
 80085a8:	4614      	mov	r4, r2
 80085aa:	4698      	mov	r8, r3
 80085ac:	4606      	mov	r6, r0
 80085ae:	b118      	cbz	r0, 80085b8 <_vfiprintf_r+0x18>
 80085b0:	6983      	ldr	r3, [r0, #24]
 80085b2:	b90b      	cbnz	r3, 80085b8 <_vfiprintf_r+0x18>
 80085b4:	f7ff fde4 	bl	8008180 <__sinit>
 80085b8:	4b89      	ldr	r3, [pc, #548]	; (80087e0 <_vfiprintf_r+0x240>)
 80085ba:	429d      	cmp	r5, r3
 80085bc:	d11b      	bne.n	80085f6 <_vfiprintf_r+0x56>
 80085be:	6875      	ldr	r5, [r6, #4]
 80085c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085c2:	07d9      	lsls	r1, r3, #31
 80085c4:	d405      	bmi.n	80085d2 <_vfiprintf_r+0x32>
 80085c6:	89ab      	ldrh	r3, [r5, #12]
 80085c8:	059a      	lsls	r2, r3, #22
 80085ca:	d402      	bmi.n	80085d2 <_vfiprintf_r+0x32>
 80085cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085ce:	f7ff fe75 	bl	80082bc <__retarget_lock_acquire_recursive>
 80085d2:	89ab      	ldrh	r3, [r5, #12]
 80085d4:	071b      	lsls	r3, r3, #28
 80085d6:	d501      	bpl.n	80085dc <_vfiprintf_r+0x3c>
 80085d8:	692b      	ldr	r3, [r5, #16]
 80085da:	b9eb      	cbnz	r3, 8008618 <_vfiprintf_r+0x78>
 80085dc:	4629      	mov	r1, r5
 80085de:	4630      	mov	r0, r6
 80085e0:	f7ff fc46 	bl	8007e70 <__swsetup_r>
 80085e4:	b1c0      	cbz	r0, 8008618 <_vfiprintf_r+0x78>
 80085e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085e8:	07dc      	lsls	r4, r3, #31
 80085ea:	d50e      	bpl.n	800860a <_vfiprintf_r+0x6a>
 80085ec:	f04f 30ff 	mov.w	r0, #4294967295
 80085f0:	b01d      	add	sp, #116	; 0x74
 80085f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085f6:	4b7b      	ldr	r3, [pc, #492]	; (80087e4 <_vfiprintf_r+0x244>)
 80085f8:	429d      	cmp	r5, r3
 80085fa:	d101      	bne.n	8008600 <_vfiprintf_r+0x60>
 80085fc:	68b5      	ldr	r5, [r6, #8]
 80085fe:	e7df      	b.n	80085c0 <_vfiprintf_r+0x20>
 8008600:	4b79      	ldr	r3, [pc, #484]	; (80087e8 <_vfiprintf_r+0x248>)
 8008602:	429d      	cmp	r5, r3
 8008604:	bf08      	it	eq
 8008606:	68f5      	ldreq	r5, [r6, #12]
 8008608:	e7da      	b.n	80085c0 <_vfiprintf_r+0x20>
 800860a:	89ab      	ldrh	r3, [r5, #12]
 800860c:	0598      	lsls	r0, r3, #22
 800860e:	d4ed      	bmi.n	80085ec <_vfiprintf_r+0x4c>
 8008610:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008612:	f7ff fe54 	bl	80082be <__retarget_lock_release_recursive>
 8008616:	e7e9      	b.n	80085ec <_vfiprintf_r+0x4c>
 8008618:	2300      	movs	r3, #0
 800861a:	9309      	str	r3, [sp, #36]	; 0x24
 800861c:	2320      	movs	r3, #32
 800861e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008622:	f8cd 800c 	str.w	r8, [sp, #12]
 8008626:	2330      	movs	r3, #48	; 0x30
 8008628:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80087ec <_vfiprintf_r+0x24c>
 800862c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008630:	f04f 0901 	mov.w	r9, #1
 8008634:	4623      	mov	r3, r4
 8008636:	469a      	mov	sl, r3
 8008638:	f813 2b01 	ldrb.w	r2, [r3], #1
 800863c:	b10a      	cbz	r2, 8008642 <_vfiprintf_r+0xa2>
 800863e:	2a25      	cmp	r2, #37	; 0x25
 8008640:	d1f9      	bne.n	8008636 <_vfiprintf_r+0x96>
 8008642:	ebba 0b04 	subs.w	fp, sl, r4
 8008646:	d00b      	beq.n	8008660 <_vfiprintf_r+0xc0>
 8008648:	465b      	mov	r3, fp
 800864a:	4622      	mov	r2, r4
 800864c:	4629      	mov	r1, r5
 800864e:	4630      	mov	r0, r6
 8008650:	f7ff ff93 	bl	800857a <__sfputs_r>
 8008654:	3001      	adds	r0, #1
 8008656:	f000 80aa 	beq.w	80087ae <_vfiprintf_r+0x20e>
 800865a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800865c:	445a      	add	r2, fp
 800865e:	9209      	str	r2, [sp, #36]	; 0x24
 8008660:	f89a 3000 	ldrb.w	r3, [sl]
 8008664:	2b00      	cmp	r3, #0
 8008666:	f000 80a2 	beq.w	80087ae <_vfiprintf_r+0x20e>
 800866a:	2300      	movs	r3, #0
 800866c:	f04f 32ff 	mov.w	r2, #4294967295
 8008670:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008674:	f10a 0a01 	add.w	sl, sl, #1
 8008678:	9304      	str	r3, [sp, #16]
 800867a:	9307      	str	r3, [sp, #28]
 800867c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008680:	931a      	str	r3, [sp, #104]	; 0x68
 8008682:	4654      	mov	r4, sl
 8008684:	2205      	movs	r2, #5
 8008686:	f814 1b01 	ldrb.w	r1, [r4], #1
 800868a:	4858      	ldr	r0, [pc, #352]	; (80087ec <_vfiprintf_r+0x24c>)
 800868c:	f7f7 fda8 	bl	80001e0 <memchr>
 8008690:	9a04      	ldr	r2, [sp, #16]
 8008692:	b9d8      	cbnz	r0, 80086cc <_vfiprintf_r+0x12c>
 8008694:	06d1      	lsls	r1, r2, #27
 8008696:	bf44      	itt	mi
 8008698:	2320      	movmi	r3, #32
 800869a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800869e:	0713      	lsls	r3, r2, #28
 80086a0:	bf44      	itt	mi
 80086a2:	232b      	movmi	r3, #43	; 0x2b
 80086a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086a8:	f89a 3000 	ldrb.w	r3, [sl]
 80086ac:	2b2a      	cmp	r3, #42	; 0x2a
 80086ae:	d015      	beq.n	80086dc <_vfiprintf_r+0x13c>
 80086b0:	9a07      	ldr	r2, [sp, #28]
 80086b2:	4654      	mov	r4, sl
 80086b4:	2000      	movs	r0, #0
 80086b6:	f04f 0c0a 	mov.w	ip, #10
 80086ba:	4621      	mov	r1, r4
 80086bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086c0:	3b30      	subs	r3, #48	; 0x30
 80086c2:	2b09      	cmp	r3, #9
 80086c4:	d94e      	bls.n	8008764 <_vfiprintf_r+0x1c4>
 80086c6:	b1b0      	cbz	r0, 80086f6 <_vfiprintf_r+0x156>
 80086c8:	9207      	str	r2, [sp, #28]
 80086ca:	e014      	b.n	80086f6 <_vfiprintf_r+0x156>
 80086cc:	eba0 0308 	sub.w	r3, r0, r8
 80086d0:	fa09 f303 	lsl.w	r3, r9, r3
 80086d4:	4313      	orrs	r3, r2
 80086d6:	9304      	str	r3, [sp, #16]
 80086d8:	46a2      	mov	sl, r4
 80086da:	e7d2      	b.n	8008682 <_vfiprintf_r+0xe2>
 80086dc:	9b03      	ldr	r3, [sp, #12]
 80086de:	1d19      	adds	r1, r3, #4
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	9103      	str	r1, [sp, #12]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	bfbb      	ittet	lt
 80086e8:	425b      	neglt	r3, r3
 80086ea:	f042 0202 	orrlt.w	r2, r2, #2
 80086ee:	9307      	strge	r3, [sp, #28]
 80086f0:	9307      	strlt	r3, [sp, #28]
 80086f2:	bfb8      	it	lt
 80086f4:	9204      	strlt	r2, [sp, #16]
 80086f6:	7823      	ldrb	r3, [r4, #0]
 80086f8:	2b2e      	cmp	r3, #46	; 0x2e
 80086fa:	d10c      	bne.n	8008716 <_vfiprintf_r+0x176>
 80086fc:	7863      	ldrb	r3, [r4, #1]
 80086fe:	2b2a      	cmp	r3, #42	; 0x2a
 8008700:	d135      	bne.n	800876e <_vfiprintf_r+0x1ce>
 8008702:	9b03      	ldr	r3, [sp, #12]
 8008704:	1d1a      	adds	r2, r3, #4
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	9203      	str	r2, [sp, #12]
 800870a:	2b00      	cmp	r3, #0
 800870c:	bfb8      	it	lt
 800870e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008712:	3402      	adds	r4, #2
 8008714:	9305      	str	r3, [sp, #20]
 8008716:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80087fc <_vfiprintf_r+0x25c>
 800871a:	7821      	ldrb	r1, [r4, #0]
 800871c:	2203      	movs	r2, #3
 800871e:	4650      	mov	r0, sl
 8008720:	f7f7 fd5e 	bl	80001e0 <memchr>
 8008724:	b140      	cbz	r0, 8008738 <_vfiprintf_r+0x198>
 8008726:	2340      	movs	r3, #64	; 0x40
 8008728:	eba0 000a 	sub.w	r0, r0, sl
 800872c:	fa03 f000 	lsl.w	r0, r3, r0
 8008730:	9b04      	ldr	r3, [sp, #16]
 8008732:	4303      	orrs	r3, r0
 8008734:	3401      	adds	r4, #1
 8008736:	9304      	str	r3, [sp, #16]
 8008738:	f814 1b01 	ldrb.w	r1, [r4], #1
 800873c:	482c      	ldr	r0, [pc, #176]	; (80087f0 <_vfiprintf_r+0x250>)
 800873e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008742:	2206      	movs	r2, #6
 8008744:	f7f7 fd4c 	bl	80001e0 <memchr>
 8008748:	2800      	cmp	r0, #0
 800874a:	d03f      	beq.n	80087cc <_vfiprintf_r+0x22c>
 800874c:	4b29      	ldr	r3, [pc, #164]	; (80087f4 <_vfiprintf_r+0x254>)
 800874e:	bb1b      	cbnz	r3, 8008798 <_vfiprintf_r+0x1f8>
 8008750:	9b03      	ldr	r3, [sp, #12]
 8008752:	3307      	adds	r3, #7
 8008754:	f023 0307 	bic.w	r3, r3, #7
 8008758:	3308      	adds	r3, #8
 800875a:	9303      	str	r3, [sp, #12]
 800875c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800875e:	443b      	add	r3, r7
 8008760:	9309      	str	r3, [sp, #36]	; 0x24
 8008762:	e767      	b.n	8008634 <_vfiprintf_r+0x94>
 8008764:	fb0c 3202 	mla	r2, ip, r2, r3
 8008768:	460c      	mov	r4, r1
 800876a:	2001      	movs	r0, #1
 800876c:	e7a5      	b.n	80086ba <_vfiprintf_r+0x11a>
 800876e:	2300      	movs	r3, #0
 8008770:	3401      	adds	r4, #1
 8008772:	9305      	str	r3, [sp, #20]
 8008774:	4619      	mov	r1, r3
 8008776:	f04f 0c0a 	mov.w	ip, #10
 800877a:	4620      	mov	r0, r4
 800877c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008780:	3a30      	subs	r2, #48	; 0x30
 8008782:	2a09      	cmp	r2, #9
 8008784:	d903      	bls.n	800878e <_vfiprintf_r+0x1ee>
 8008786:	2b00      	cmp	r3, #0
 8008788:	d0c5      	beq.n	8008716 <_vfiprintf_r+0x176>
 800878a:	9105      	str	r1, [sp, #20]
 800878c:	e7c3      	b.n	8008716 <_vfiprintf_r+0x176>
 800878e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008792:	4604      	mov	r4, r0
 8008794:	2301      	movs	r3, #1
 8008796:	e7f0      	b.n	800877a <_vfiprintf_r+0x1da>
 8008798:	ab03      	add	r3, sp, #12
 800879a:	9300      	str	r3, [sp, #0]
 800879c:	462a      	mov	r2, r5
 800879e:	4b16      	ldr	r3, [pc, #88]	; (80087f8 <_vfiprintf_r+0x258>)
 80087a0:	a904      	add	r1, sp, #16
 80087a2:	4630      	mov	r0, r6
 80087a4:	f3af 8000 	nop.w
 80087a8:	4607      	mov	r7, r0
 80087aa:	1c78      	adds	r0, r7, #1
 80087ac:	d1d6      	bne.n	800875c <_vfiprintf_r+0x1bc>
 80087ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087b0:	07d9      	lsls	r1, r3, #31
 80087b2:	d405      	bmi.n	80087c0 <_vfiprintf_r+0x220>
 80087b4:	89ab      	ldrh	r3, [r5, #12]
 80087b6:	059a      	lsls	r2, r3, #22
 80087b8:	d402      	bmi.n	80087c0 <_vfiprintf_r+0x220>
 80087ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087bc:	f7ff fd7f 	bl	80082be <__retarget_lock_release_recursive>
 80087c0:	89ab      	ldrh	r3, [r5, #12]
 80087c2:	065b      	lsls	r3, r3, #25
 80087c4:	f53f af12 	bmi.w	80085ec <_vfiprintf_r+0x4c>
 80087c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087ca:	e711      	b.n	80085f0 <_vfiprintf_r+0x50>
 80087cc:	ab03      	add	r3, sp, #12
 80087ce:	9300      	str	r3, [sp, #0]
 80087d0:	462a      	mov	r2, r5
 80087d2:	4b09      	ldr	r3, [pc, #36]	; (80087f8 <_vfiprintf_r+0x258>)
 80087d4:	a904      	add	r1, sp, #16
 80087d6:	4630      	mov	r0, r6
 80087d8:	f000 f880 	bl	80088dc <_printf_i>
 80087dc:	e7e4      	b.n	80087a8 <_vfiprintf_r+0x208>
 80087de:	bf00      	nop
 80087e0:	08009590 	.word	0x08009590
 80087e4:	080095b0 	.word	0x080095b0
 80087e8:	08009570 	.word	0x08009570
 80087ec:	080095d0 	.word	0x080095d0
 80087f0:	080095da 	.word	0x080095da
 80087f4:	00000000 	.word	0x00000000
 80087f8:	0800857b 	.word	0x0800857b
 80087fc:	080095d6 	.word	0x080095d6

08008800 <_printf_common>:
 8008800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008804:	4616      	mov	r6, r2
 8008806:	4699      	mov	r9, r3
 8008808:	688a      	ldr	r2, [r1, #8]
 800880a:	690b      	ldr	r3, [r1, #16]
 800880c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008810:	4293      	cmp	r3, r2
 8008812:	bfb8      	it	lt
 8008814:	4613      	movlt	r3, r2
 8008816:	6033      	str	r3, [r6, #0]
 8008818:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800881c:	4607      	mov	r7, r0
 800881e:	460c      	mov	r4, r1
 8008820:	b10a      	cbz	r2, 8008826 <_printf_common+0x26>
 8008822:	3301      	adds	r3, #1
 8008824:	6033      	str	r3, [r6, #0]
 8008826:	6823      	ldr	r3, [r4, #0]
 8008828:	0699      	lsls	r1, r3, #26
 800882a:	bf42      	ittt	mi
 800882c:	6833      	ldrmi	r3, [r6, #0]
 800882e:	3302      	addmi	r3, #2
 8008830:	6033      	strmi	r3, [r6, #0]
 8008832:	6825      	ldr	r5, [r4, #0]
 8008834:	f015 0506 	ands.w	r5, r5, #6
 8008838:	d106      	bne.n	8008848 <_printf_common+0x48>
 800883a:	f104 0a19 	add.w	sl, r4, #25
 800883e:	68e3      	ldr	r3, [r4, #12]
 8008840:	6832      	ldr	r2, [r6, #0]
 8008842:	1a9b      	subs	r3, r3, r2
 8008844:	42ab      	cmp	r3, r5
 8008846:	dc26      	bgt.n	8008896 <_printf_common+0x96>
 8008848:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800884c:	1e13      	subs	r3, r2, #0
 800884e:	6822      	ldr	r2, [r4, #0]
 8008850:	bf18      	it	ne
 8008852:	2301      	movne	r3, #1
 8008854:	0692      	lsls	r2, r2, #26
 8008856:	d42b      	bmi.n	80088b0 <_printf_common+0xb0>
 8008858:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800885c:	4649      	mov	r1, r9
 800885e:	4638      	mov	r0, r7
 8008860:	47c0      	blx	r8
 8008862:	3001      	adds	r0, #1
 8008864:	d01e      	beq.n	80088a4 <_printf_common+0xa4>
 8008866:	6823      	ldr	r3, [r4, #0]
 8008868:	68e5      	ldr	r5, [r4, #12]
 800886a:	6832      	ldr	r2, [r6, #0]
 800886c:	f003 0306 	and.w	r3, r3, #6
 8008870:	2b04      	cmp	r3, #4
 8008872:	bf08      	it	eq
 8008874:	1aad      	subeq	r5, r5, r2
 8008876:	68a3      	ldr	r3, [r4, #8]
 8008878:	6922      	ldr	r2, [r4, #16]
 800887a:	bf0c      	ite	eq
 800887c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008880:	2500      	movne	r5, #0
 8008882:	4293      	cmp	r3, r2
 8008884:	bfc4      	itt	gt
 8008886:	1a9b      	subgt	r3, r3, r2
 8008888:	18ed      	addgt	r5, r5, r3
 800888a:	2600      	movs	r6, #0
 800888c:	341a      	adds	r4, #26
 800888e:	42b5      	cmp	r5, r6
 8008890:	d11a      	bne.n	80088c8 <_printf_common+0xc8>
 8008892:	2000      	movs	r0, #0
 8008894:	e008      	b.n	80088a8 <_printf_common+0xa8>
 8008896:	2301      	movs	r3, #1
 8008898:	4652      	mov	r2, sl
 800889a:	4649      	mov	r1, r9
 800889c:	4638      	mov	r0, r7
 800889e:	47c0      	blx	r8
 80088a0:	3001      	adds	r0, #1
 80088a2:	d103      	bne.n	80088ac <_printf_common+0xac>
 80088a4:	f04f 30ff 	mov.w	r0, #4294967295
 80088a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088ac:	3501      	adds	r5, #1
 80088ae:	e7c6      	b.n	800883e <_printf_common+0x3e>
 80088b0:	18e1      	adds	r1, r4, r3
 80088b2:	1c5a      	adds	r2, r3, #1
 80088b4:	2030      	movs	r0, #48	; 0x30
 80088b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80088ba:	4422      	add	r2, r4
 80088bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80088c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80088c4:	3302      	adds	r3, #2
 80088c6:	e7c7      	b.n	8008858 <_printf_common+0x58>
 80088c8:	2301      	movs	r3, #1
 80088ca:	4622      	mov	r2, r4
 80088cc:	4649      	mov	r1, r9
 80088ce:	4638      	mov	r0, r7
 80088d0:	47c0      	blx	r8
 80088d2:	3001      	adds	r0, #1
 80088d4:	d0e6      	beq.n	80088a4 <_printf_common+0xa4>
 80088d6:	3601      	adds	r6, #1
 80088d8:	e7d9      	b.n	800888e <_printf_common+0x8e>
	...

080088dc <_printf_i>:
 80088dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088e0:	7e0f      	ldrb	r7, [r1, #24]
 80088e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80088e4:	2f78      	cmp	r7, #120	; 0x78
 80088e6:	4691      	mov	r9, r2
 80088e8:	4680      	mov	r8, r0
 80088ea:	460c      	mov	r4, r1
 80088ec:	469a      	mov	sl, r3
 80088ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80088f2:	d807      	bhi.n	8008904 <_printf_i+0x28>
 80088f4:	2f62      	cmp	r7, #98	; 0x62
 80088f6:	d80a      	bhi.n	800890e <_printf_i+0x32>
 80088f8:	2f00      	cmp	r7, #0
 80088fa:	f000 80d8 	beq.w	8008aae <_printf_i+0x1d2>
 80088fe:	2f58      	cmp	r7, #88	; 0x58
 8008900:	f000 80a3 	beq.w	8008a4a <_printf_i+0x16e>
 8008904:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008908:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800890c:	e03a      	b.n	8008984 <_printf_i+0xa8>
 800890e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008912:	2b15      	cmp	r3, #21
 8008914:	d8f6      	bhi.n	8008904 <_printf_i+0x28>
 8008916:	a101      	add	r1, pc, #4	; (adr r1, 800891c <_printf_i+0x40>)
 8008918:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800891c:	08008975 	.word	0x08008975
 8008920:	08008989 	.word	0x08008989
 8008924:	08008905 	.word	0x08008905
 8008928:	08008905 	.word	0x08008905
 800892c:	08008905 	.word	0x08008905
 8008930:	08008905 	.word	0x08008905
 8008934:	08008989 	.word	0x08008989
 8008938:	08008905 	.word	0x08008905
 800893c:	08008905 	.word	0x08008905
 8008940:	08008905 	.word	0x08008905
 8008944:	08008905 	.word	0x08008905
 8008948:	08008a95 	.word	0x08008a95
 800894c:	080089b9 	.word	0x080089b9
 8008950:	08008a77 	.word	0x08008a77
 8008954:	08008905 	.word	0x08008905
 8008958:	08008905 	.word	0x08008905
 800895c:	08008ab7 	.word	0x08008ab7
 8008960:	08008905 	.word	0x08008905
 8008964:	080089b9 	.word	0x080089b9
 8008968:	08008905 	.word	0x08008905
 800896c:	08008905 	.word	0x08008905
 8008970:	08008a7f 	.word	0x08008a7f
 8008974:	682b      	ldr	r3, [r5, #0]
 8008976:	1d1a      	adds	r2, r3, #4
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	602a      	str	r2, [r5, #0]
 800897c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008980:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008984:	2301      	movs	r3, #1
 8008986:	e0a3      	b.n	8008ad0 <_printf_i+0x1f4>
 8008988:	6820      	ldr	r0, [r4, #0]
 800898a:	6829      	ldr	r1, [r5, #0]
 800898c:	0606      	lsls	r6, r0, #24
 800898e:	f101 0304 	add.w	r3, r1, #4
 8008992:	d50a      	bpl.n	80089aa <_printf_i+0xce>
 8008994:	680e      	ldr	r6, [r1, #0]
 8008996:	602b      	str	r3, [r5, #0]
 8008998:	2e00      	cmp	r6, #0
 800899a:	da03      	bge.n	80089a4 <_printf_i+0xc8>
 800899c:	232d      	movs	r3, #45	; 0x2d
 800899e:	4276      	negs	r6, r6
 80089a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089a4:	485e      	ldr	r0, [pc, #376]	; (8008b20 <_printf_i+0x244>)
 80089a6:	230a      	movs	r3, #10
 80089a8:	e019      	b.n	80089de <_printf_i+0x102>
 80089aa:	680e      	ldr	r6, [r1, #0]
 80089ac:	602b      	str	r3, [r5, #0]
 80089ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80089b2:	bf18      	it	ne
 80089b4:	b236      	sxthne	r6, r6
 80089b6:	e7ef      	b.n	8008998 <_printf_i+0xbc>
 80089b8:	682b      	ldr	r3, [r5, #0]
 80089ba:	6820      	ldr	r0, [r4, #0]
 80089bc:	1d19      	adds	r1, r3, #4
 80089be:	6029      	str	r1, [r5, #0]
 80089c0:	0601      	lsls	r1, r0, #24
 80089c2:	d501      	bpl.n	80089c8 <_printf_i+0xec>
 80089c4:	681e      	ldr	r6, [r3, #0]
 80089c6:	e002      	b.n	80089ce <_printf_i+0xf2>
 80089c8:	0646      	lsls	r6, r0, #25
 80089ca:	d5fb      	bpl.n	80089c4 <_printf_i+0xe8>
 80089cc:	881e      	ldrh	r6, [r3, #0]
 80089ce:	4854      	ldr	r0, [pc, #336]	; (8008b20 <_printf_i+0x244>)
 80089d0:	2f6f      	cmp	r7, #111	; 0x6f
 80089d2:	bf0c      	ite	eq
 80089d4:	2308      	moveq	r3, #8
 80089d6:	230a      	movne	r3, #10
 80089d8:	2100      	movs	r1, #0
 80089da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80089de:	6865      	ldr	r5, [r4, #4]
 80089e0:	60a5      	str	r5, [r4, #8]
 80089e2:	2d00      	cmp	r5, #0
 80089e4:	bfa2      	ittt	ge
 80089e6:	6821      	ldrge	r1, [r4, #0]
 80089e8:	f021 0104 	bicge.w	r1, r1, #4
 80089ec:	6021      	strge	r1, [r4, #0]
 80089ee:	b90e      	cbnz	r6, 80089f4 <_printf_i+0x118>
 80089f0:	2d00      	cmp	r5, #0
 80089f2:	d04d      	beq.n	8008a90 <_printf_i+0x1b4>
 80089f4:	4615      	mov	r5, r2
 80089f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80089fa:	fb03 6711 	mls	r7, r3, r1, r6
 80089fe:	5dc7      	ldrb	r7, [r0, r7]
 8008a00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008a04:	4637      	mov	r7, r6
 8008a06:	42bb      	cmp	r3, r7
 8008a08:	460e      	mov	r6, r1
 8008a0a:	d9f4      	bls.n	80089f6 <_printf_i+0x11a>
 8008a0c:	2b08      	cmp	r3, #8
 8008a0e:	d10b      	bne.n	8008a28 <_printf_i+0x14c>
 8008a10:	6823      	ldr	r3, [r4, #0]
 8008a12:	07de      	lsls	r6, r3, #31
 8008a14:	d508      	bpl.n	8008a28 <_printf_i+0x14c>
 8008a16:	6923      	ldr	r3, [r4, #16]
 8008a18:	6861      	ldr	r1, [r4, #4]
 8008a1a:	4299      	cmp	r1, r3
 8008a1c:	bfde      	ittt	le
 8008a1e:	2330      	movle	r3, #48	; 0x30
 8008a20:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008a24:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008a28:	1b52      	subs	r2, r2, r5
 8008a2a:	6122      	str	r2, [r4, #16]
 8008a2c:	f8cd a000 	str.w	sl, [sp]
 8008a30:	464b      	mov	r3, r9
 8008a32:	aa03      	add	r2, sp, #12
 8008a34:	4621      	mov	r1, r4
 8008a36:	4640      	mov	r0, r8
 8008a38:	f7ff fee2 	bl	8008800 <_printf_common>
 8008a3c:	3001      	adds	r0, #1
 8008a3e:	d14c      	bne.n	8008ada <_printf_i+0x1fe>
 8008a40:	f04f 30ff 	mov.w	r0, #4294967295
 8008a44:	b004      	add	sp, #16
 8008a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a4a:	4835      	ldr	r0, [pc, #212]	; (8008b20 <_printf_i+0x244>)
 8008a4c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008a50:	6829      	ldr	r1, [r5, #0]
 8008a52:	6823      	ldr	r3, [r4, #0]
 8008a54:	f851 6b04 	ldr.w	r6, [r1], #4
 8008a58:	6029      	str	r1, [r5, #0]
 8008a5a:	061d      	lsls	r5, r3, #24
 8008a5c:	d514      	bpl.n	8008a88 <_printf_i+0x1ac>
 8008a5e:	07df      	lsls	r7, r3, #31
 8008a60:	bf44      	itt	mi
 8008a62:	f043 0320 	orrmi.w	r3, r3, #32
 8008a66:	6023      	strmi	r3, [r4, #0]
 8008a68:	b91e      	cbnz	r6, 8008a72 <_printf_i+0x196>
 8008a6a:	6823      	ldr	r3, [r4, #0]
 8008a6c:	f023 0320 	bic.w	r3, r3, #32
 8008a70:	6023      	str	r3, [r4, #0]
 8008a72:	2310      	movs	r3, #16
 8008a74:	e7b0      	b.n	80089d8 <_printf_i+0xfc>
 8008a76:	6823      	ldr	r3, [r4, #0]
 8008a78:	f043 0320 	orr.w	r3, r3, #32
 8008a7c:	6023      	str	r3, [r4, #0]
 8008a7e:	2378      	movs	r3, #120	; 0x78
 8008a80:	4828      	ldr	r0, [pc, #160]	; (8008b24 <_printf_i+0x248>)
 8008a82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a86:	e7e3      	b.n	8008a50 <_printf_i+0x174>
 8008a88:	0659      	lsls	r1, r3, #25
 8008a8a:	bf48      	it	mi
 8008a8c:	b2b6      	uxthmi	r6, r6
 8008a8e:	e7e6      	b.n	8008a5e <_printf_i+0x182>
 8008a90:	4615      	mov	r5, r2
 8008a92:	e7bb      	b.n	8008a0c <_printf_i+0x130>
 8008a94:	682b      	ldr	r3, [r5, #0]
 8008a96:	6826      	ldr	r6, [r4, #0]
 8008a98:	6961      	ldr	r1, [r4, #20]
 8008a9a:	1d18      	adds	r0, r3, #4
 8008a9c:	6028      	str	r0, [r5, #0]
 8008a9e:	0635      	lsls	r5, r6, #24
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	d501      	bpl.n	8008aa8 <_printf_i+0x1cc>
 8008aa4:	6019      	str	r1, [r3, #0]
 8008aa6:	e002      	b.n	8008aae <_printf_i+0x1d2>
 8008aa8:	0670      	lsls	r0, r6, #25
 8008aaa:	d5fb      	bpl.n	8008aa4 <_printf_i+0x1c8>
 8008aac:	8019      	strh	r1, [r3, #0]
 8008aae:	2300      	movs	r3, #0
 8008ab0:	6123      	str	r3, [r4, #16]
 8008ab2:	4615      	mov	r5, r2
 8008ab4:	e7ba      	b.n	8008a2c <_printf_i+0x150>
 8008ab6:	682b      	ldr	r3, [r5, #0]
 8008ab8:	1d1a      	adds	r2, r3, #4
 8008aba:	602a      	str	r2, [r5, #0]
 8008abc:	681d      	ldr	r5, [r3, #0]
 8008abe:	6862      	ldr	r2, [r4, #4]
 8008ac0:	2100      	movs	r1, #0
 8008ac2:	4628      	mov	r0, r5
 8008ac4:	f7f7 fb8c 	bl	80001e0 <memchr>
 8008ac8:	b108      	cbz	r0, 8008ace <_printf_i+0x1f2>
 8008aca:	1b40      	subs	r0, r0, r5
 8008acc:	6060      	str	r0, [r4, #4]
 8008ace:	6863      	ldr	r3, [r4, #4]
 8008ad0:	6123      	str	r3, [r4, #16]
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ad8:	e7a8      	b.n	8008a2c <_printf_i+0x150>
 8008ada:	6923      	ldr	r3, [r4, #16]
 8008adc:	462a      	mov	r2, r5
 8008ade:	4649      	mov	r1, r9
 8008ae0:	4640      	mov	r0, r8
 8008ae2:	47d0      	blx	sl
 8008ae4:	3001      	adds	r0, #1
 8008ae6:	d0ab      	beq.n	8008a40 <_printf_i+0x164>
 8008ae8:	6823      	ldr	r3, [r4, #0]
 8008aea:	079b      	lsls	r3, r3, #30
 8008aec:	d413      	bmi.n	8008b16 <_printf_i+0x23a>
 8008aee:	68e0      	ldr	r0, [r4, #12]
 8008af0:	9b03      	ldr	r3, [sp, #12]
 8008af2:	4298      	cmp	r0, r3
 8008af4:	bfb8      	it	lt
 8008af6:	4618      	movlt	r0, r3
 8008af8:	e7a4      	b.n	8008a44 <_printf_i+0x168>
 8008afa:	2301      	movs	r3, #1
 8008afc:	4632      	mov	r2, r6
 8008afe:	4649      	mov	r1, r9
 8008b00:	4640      	mov	r0, r8
 8008b02:	47d0      	blx	sl
 8008b04:	3001      	adds	r0, #1
 8008b06:	d09b      	beq.n	8008a40 <_printf_i+0x164>
 8008b08:	3501      	adds	r5, #1
 8008b0a:	68e3      	ldr	r3, [r4, #12]
 8008b0c:	9903      	ldr	r1, [sp, #12]
 8008b0e:	1a5b      	subs	r3, r3, r1
 8008b10:	42ab      	cmp	r3, r5
 8008b12:	dcf2      	bgt.n	8008afa <_printf_i+0x21e>
 8008b14:	e7eb      	b.n	8008aee <_printf_i+0x212>
 8008b16:	2500      	movs	r5, #0
 8008b18:	f104 0619 	add.w	r6, r4, #25
 8008b1c:	e7f5      	b.n	8008b0a <_printf_i+0x22e>
 8008b1e:	bf00      	nop
 8008b20:	080095e1 	.word	0x080095e1
 8008b24:	080095f2 	.word	0x080095f2

08008b28 <_sbrk_r>:
 8008b28:	b538      	push	{r3, r4, r5, lr}
 8008b2a:	4d06      	ldr	r5, [pc, #24]	; (8008b44 <_sbrk_r+0x1c>)
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	4604      	mov	r4, r0
 8008b30:	4608      	mov	r0, r1
 8008b32:	602b      	str	r3, [r5, #0]
 8008b34:	f7f9 f8ee 	bl	8001d14 <_sbrk>
 8008b38:	1c43      	adds	r3, r0, #1
 8008b3a:	d102      	bne.n	8008b42 <_sbrk_r+0x1a>
 8008b3c:	682b      	ldr	r3, [r5, #0]
 8008b3e:	b103      	cbz	r3, 8008b42 <_sbrk_r+0x1a>
 8008b40:	6023      	str	r3, [r4, #0]
 8008b42:	bd38      	pop	{r3, r4, r5, pc}
 8008b44:	200044a0 	.word	0x200044a0

08008b48 <__sread>:
 8008b48:	b510      	push	{r4, lr}
 8008b4a:	460c      	mov	r4, r1
 8008b4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b50:	f000 f8a0 	bl	8008c94 <_read_r>
 8008b54:	2800      	cmp	r0, #0
 8008b56:	bfab      	itete	ge
 8008b58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008b5a:	89a3      	ldrhlt	r3, [r4, #12]
 8008b5c:	181b      	addge	r3, r3, r0
 8008b5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008b62:	bfac      	ite	ge
 8008b64:	6563      	strge	r3, [r4, #84]	; 0x54
 8008b66:	81a3      	strhlt	r3, [r4, #12]
 8008b68:	bd10      	pop	{r4, pc}

08008b6a <__swrite>:
 8008b6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b6e:	461f      	mov	r7, r3
 8008b70:	898b      	ldrh	r3, [r1, #12]
 8008b72:	05db      	lsls	r3, r3, #23
 8008b74:	4605      	mov	r5, r0
 8008b76:	460c      	mov	r4, r1
 8008b78:	4616      	mov	r6, r2
 8008b7a:	d505      	bpl.n	8008b88 <__swrite+0x1e>
 8008b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b80:	2302      	movs	r3, #2
 8008b82:	2200      	movs	r2, #0
 8008b84:	f000 f868 	bl	8008c58 <_lseek_r>
 8008b88:	89a3      	ldrh	r3, [r4, #12]
 8008b8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b92:	81a3      	strh	r3, [r4, #12]
 8008b94:	4632      	mov	r2, r6
 8008b96:	463b      	mov	r3, r7
 8008b98:	4628      	mov	r0, r5
 8008b9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b9e:	f000 b817 	b.w	8008bd0 <_write_r>

08008ba2 <__sseek>:
 8008ba2:	b510      	push	{r4, lr}
 8008ba4:	460c      	mov	r4, r1
 8008ba6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008baa:	f000 f855 	bl	8008c58 <_lseek_r>
 8008bae:	1c43      	adds	r3, r0, #1
 8008bb0:	89a3      	ldrh	r3, [r4, #12]
 8008bb2:	bf15      	itete	ne
 8008bb4:	6560      	strne	r0, [r4, #84]	; 0x54
 8008bb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008bba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008bbe:	81a3      	strheq	r3, [r4, #12]
 8008bc0:	bf18      	it	ne
 8008bc2:	81a3      	strhne	r3, [r4, #12]
 8008bc4:	bd10      	pop	{r4, pc}

08008bc6 <__sclose>:
 8008bc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bca:	f000 b813 	b.w	8008bf4 <_close_r>
	...

08008bd0 <_write_r>:
 8008bd0:	b538      	push	{r3, r4, r5, lr}
 8008bd2:	4d07      	ldr	r5, [pc, #28]	; (8008bf0 <_write_r+0x20>)
 8008bd4:	4604      	mov	r4, r0
 8008bd6:	4608      	mov	r0, r1
 8008bd8:	4611      	mov	r1, r2
 8008bda:	2200      	movs	r2, #0
 8008bdc:	602a      	str	r2, [r5, #0]
 8008bde:	461a      	mov	r2, r3
 8008be0:	f7f9 f847 	bl	8001c72 <_write>
 8008be4:	1c43      	adds	r3, r0, #1
 8008be6:	d102      	bne.n	8008bee <_write_r+0x1e>
 8008be8:	682b      	ldr	r3, [r5, #0]
 8008bea:	b103      	cbz	r3, 8008bee <_write_r+0x1e>
 8008bec:	6023      	str	r3, [r4, #0]
 8008bee:	bd38      	pop	{r3, r4, r5, pc}
 8008bf0:	200044a0 	.word	0x200044a0

08008bf4 <_close_r>:
 8008bf4:	b538      	push	{r3, r4, r5, lr}
 8008bf6:	4d06      	ldr	r5, [pc, #24]	; (8008c10 <_close_r+0x1c>)
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	4604      	mov	r4, r0
 8008bfc:	4608      	mov	r0, r1
 8008bfe:	602b      	str	r3, [r5, #0]
 8008c00:	f7f9 f853 	bl	8001caa <_close>
 8008c04:	1c43      	adds	r3, r0, #1
 8008c06:	d102      	bne.n	8008c0e <_close_r+0x1a>
 8008c08:	682b      	ldr	r3, [r5, #0]
 8008c0a:	b103      	cbz	r3, 8008c0e <_close_r+0x1a>
 8008c0c:	6023      	str	r3, [r4, #0]
 8008c0e:	bd38      	pop	{r3, r4, r5, pc}
 8008c10:	200044a0 	.word	0x200044a0

08008c14 <_fstat_r>:
 8008c14:	b538      	push	{r3, r4, r5, lr}
 8008c16:	4d07      	ldr	r5, [pc, #28]	; (8008c34 <_fstat_r+0x20>)
 8008c18:	2300      	movs	r3, #0
 8008c1a:	4604      	mov	r4, r0
 8008c1c:	4608      	mov	r0, r1
 8008c1e:	4611      	mov	r1, r2
 8008c20:	602b      	str	r3, [r5, #0]
 8008c22:	f7f9 f84e 	bl	8001cc2 <_fstat>
 8008c26:	1c43      	adds	r3, r0, #1
 8008c28:	d102      	bne.n	8008c30 <_fstat_r+0x1c>
 8008c2a:	682b      	ldr	r3, [r5, #0]
 8008c2c:	b103      	cbz	r3, 8008c30 <_fstat_r+0x1c>
 8008c2e:	6023      	str	r3, [r4, #0]
 8008c30:	bd38      	pop	{r3, r4, r5, pc}
 8008c32:	bf00      	nop
 8008c34:	200044a0 	.word	0x200044a0

08008c38 <_isatty_r>:
 8008c38:	b538      	push	{r3, r4, r5, lr}
 8008c3a:	4d06      	ldr	r5, [pc, #24]	; (8008c54 <_isatty_r+0x1c>)
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	4604      	mov	r4, r0
 8008c40:	4608      	mov	r0, r1
 8008c42:	602b      	str	r3, [r5, #0]
 8008c44:	f7f9 f84d 	bl	8001ce2 <_isatty>
 8008c48:	1c43      	adds	r3, r0, #1
 8008c4a:	d102      	bne.n	8008c52 <_isatty_r+0x1a>
 8008c4c:	682b      	ldr	r3, [r5, #0]
 8008c4e:	b103      	cbz	r3, 8008c52 <_isatty_r+0x1a>
 8008c50:	6023      	str	r3, [r4, #0]
 8008c52:	bd38      	pop	{r3, r4, r5, pc}
 8008c54:	200044a0 	.word	0x200044a0

08008c58 <_lseek_r>:
 8008c58:	b538      	push	{r3, r4, r5, lr}
 8008c5a:	4d07      	ldr	r5, [pc, #28]	; (8008c78 <_lseek_r+0x20>)
 8008c5c:	4604      	mov	r4, r0
 8008c5e:	4608      	mov	r0, r1
 8008c60:	4611      	mov	r1, r2
 8008c62:	2200      	movs	r2, #0
 8008c64:	602a      	str	r2, [r5, #0]
 8008c66:	461a      	mov	r2, r3
 8008c68:	f7f9 f846 	bl	8001cf8 <_lseek>
 8008c6c:	1c43      	adds	r3, r0, #1
 8008c6e:	d102      	bne.n	8008c76 <_lseek_r+0x1e>
 8008c70:	682b      	ldr	r3, [r5, #0]
 8008c72:	b103      	cbz	r3, 8008c76 <_lseek_r+0x1e>
 8008c74:	6023      	str	r3, [r4, #0]
 8008c76:	bd38      	pop	{r3, r4, r5, pc}
 8008c78:	200044a0 	.word	0x200044a0

08008c7c <__malloc_lock>:
 8008c7c:	4801      	ldr	r0, [pc, #4]	; (8008c84 <__malloc_lock+0x8>)
 8008c7e:	f7ff bb1d 	b.w	80082bc <__retarget_lock_acquire_recursive>
 8008c82:	bf00      	nop
 8008c84:	20004494 	.word	0x20004494

08008c88 <__malloc_unlock>:
 8008c88:	4801      	ldr	r0, [pc, #4]	; (8008c90 <__malloc_unlock+0x8>)
 8008c8a:	f7ff bb18 	b.w	80082be <__retarget_lock_release_recursive>
 8008c8e:	bf00      	nop
 8008c90:	20004494 	.word	0x20004494

08008c94 <_read_r>:
 8008c94:	b538      	push	{r3, r4, r5, lr}
 8008c96:	4d07      	ldr	r5, [pc, #28]	; (8008cb4 <_read_r+0x20>)
 8008c98:	4604      	mov	r4, r0
 8008c9a:	4608      	mov	r0, r1
 8008c9c:	4611      	mov	r1, r2
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	602a      	str	r2, [r5, #0]
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	f7f8 ffc8 	bl	8001c38 <_read>
 8008ca8:	1c43      	adds	r3, r0, #1
 8008caa:	d102      	bne.n	8008cb2 <_read_r+0x1e>
 8008cac:	682b      	ldr	r3, [r5, #0]
 8008cae:	b103      	cbz	r3, 8008cb2 <_read_r+0x1e>
 8008cb0:	6023      	str	r3, [r4, #0]
 8008cb2:	bd38      	pop	{r3, r4, r5, pc}
 8008cb4:	200044a0 	.word	0x200044a0

08008cb8 <_init>:
 8008cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cba:	bf00      	nop
 8008cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cbe:	bc08      	pop	{r3}
 8008cc0:	469e      	mov	lr, r3
 8008cc2:	4770      	bx	lr

08008cc4 <_fini>:
 8008cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cc6:	bf00      	nop
 8008cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cca:	bc08      	pop	{r3}
 8008ccc:	469e      	mov	lr, r3
 8008cce:	4770      	bx	lr
