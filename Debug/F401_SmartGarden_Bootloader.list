
F401_SmartGarden_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b98  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000954  08008d38  08008d38  00018d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800968c  0800968c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800968c  0800968c  0001968c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009694  08009694  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009694  08009694  00019694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009698  08009698  00019698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800969c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000033e8  2000008c  08009728  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003474  08009728  00023474  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011e95  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003499  00000000  00000000  00031f51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb8  00000000  00000000  000353f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e20  00000000  00000000  000363a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000194aa  00000000  00000000  000371c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000167c0  00000000  00000000  00050672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ac9d  00000000  00000000  00066e32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f1acf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004580  00000000  00000000  000f1b20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000008c 	.word	0x2000008c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008d20 	.word	0x08008d20

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000090 	.word	0x20000090
 80001dc:	08008d20 	.word	0x08008d20

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <FLASH_If_Init>:

static uint32_t GetSector(uint32_t Address);

/* Clear flags */
void FLASH_If_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 8000588:	f001 ff54 	bl	8002434 <HAL_FLASH_Unlock>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 800058c:	4b03      	ldr	r3, [pc, #12]	; (800059c <FLASH_If_Init+0x18>)
 800058e:	22f3      	movs	r2, #243	; 0xf3
 8000590:	60da      	str	r2, [r3, #12]
                           FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
    HAL_FLASH_Lock();
 8000592:	f001 ff71 	bl	8002478 <HAL_FLASH_Lock>
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40023c00 	.word	0x40023c00

080005a0 <FLASH_If_Erase>:

/* Erase flash memory */
uint32_t FLASH_If_Erase(uint32_t start)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08c      	sub	sp, #48	; 0x30
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
    uint32_t FirstSector, NbOfSectors, SectorError;
    FLASH_EraseInitTypeDef pEraseInit;
    HAL_StatusTypeDef status = HAL_OK;
 80005a8:	2300      	movs	r3, #0
 80005aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    HAL_FLASH_Unlock();
 80005ae:	f001 ff41 	bl	8002434 <HAL_FLASH_Unlock>

    /* Erase from SECTOR 2~5 */
    FirstSector = GetSector(USER_START_ADDRESS);
 80005b2:	4815      	ldr	r0, [pc, #84]	; (8000608 <FLASH_If_Erase+0x68>)
 80005b4:	f000 f8b8 	bl	8000728 <GetSector>
 80005b8:	62b8      	str	r0, [r7, #40]	; 0x28
    NbOfSectors = GetSector(USER_END_ADDRESS) - FirstSector;
 80005ba:	4814      	ldr	r0, [pc, #80]	; (800060c <FLASH_If_Erase+0x6c>)
 80005bc:	f000 f8b4 	bl	8000728 <GetSector>
 80005c0:	4602      	mov	r2, r0
 80005c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005c4:	1ad3      	subs	r3, r2, r3
 80005c6:	627b      	str	r3, [r7, #36]	; 0x24

    pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60fb      	str	r3, [r7, #12]
    pEraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80005cc:	2302      	movs	r3, #2
 80005ce:	61fb      	str	r3, [r7, #28]
    pEraseInit.Sector = FirstSector;
 80005d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005d2:	617b      	str	r3, [r7, #20]
    pEraseInit.NbSectors = NbOfSectors;
 80005d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005d6:	61bb      	str	r3, [r7, #24]
    status = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80005d8:	f107 0220 	add.w	r2, r7, #32
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	4611      	mov	r1, r2
 80005e2:	4618      	mov	r0, r3
 80005e4:	f002 f8d8 	bl	8002798 <HAL_FLASHEx_Erase>
 80005e8:	4603      	mov	r3, r0
 80005ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    HAL_FLASH_Lock();
 80005ee:	f001 ff43 	bl	8002478 <HAL_FLASH_Lock>

    if (status != HAL_OK)
 80005f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <FLASH_If_Erase+0x5e>
    {
        return FLASHIF_ERASEKO;
 80005fa:	2301      	movs	r3, #1
 80005fc:	e000      	b.n	8000600 <FLASH_If_Erase+0x60>
    }

    return FLASHIF_OK;
 80005fe:	2300      	movs	r3, #0
}
 8000600:	4618      	mov	r0, r3
 8000602:	3730      	adds	r7, #48	; 0x30
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	08040000 	.word	0x08040000
 800060c:	08060000 	.word	0x08060000

08000610 <FLASH_If_FlashBegin>:

static uint32_t flash_ptr = USER_START_ADDRESS;

uint32_t FLASH_If_FlashBegin(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
    flash_ptr = USER_START_ADDRESS;
 8000614:	4b03      	ldr	r3, [pc, #12]	; (8000624 <FLASH_If_FlashBegin+0x14>)
 8000616:	4a04      	ldr	r2, [pc, #16]	; (8000628 <FLASH_If_FlashBegin+0x18>)
 8000618:	601a      	str	r2, [r3, #0]
    HAL_FLASH_Unlock();
 800061a:	f001 ff0b 	bl	8002434 <HAL_FLASH_Unlock>
    return FLASHIF_OK;
 800061e:	2300      	movs	r3, #0
}
 8000620:	4618      	mov	r0, r3
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000000 	.word	0x20000000
 8000628:	08040000 	.word	0x08040000

0800062c <FLASH_If_Write>:

/* Write flash memory */
uint32_t FLASH_If_Write(uint32_t data)
{
 800062c:	b590      	push	{r4, r7, lr}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flash_ptr, data) == HAL_OK)
 8000634:	4911      	ldr	r1, [pc, #68]	; (800067c <FLASH_If_Write+0x50>)
 8000636:	6809      	ldr	r1, [r1, #0]
 8000638:	6878      	ldr	r0, [r7, #4]
 800063a:	2400      	movs	r4, #0
 800063c:	4602      	mov	r2, r0
 800063e:	4623      	mov	r3, r4
 8000640:	2002      	movs	r0, #2
 8000642:	f001 fea3 	bl	800238c <HAL_FLASH_Program>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d110      	bne.n	800066e <FLASH_If_Write+0x42>
    {
        /* Validate the written value */
        if (*(uint32_t *)flash_ptr != data)
 800064c:	4b0b      	ldr	r3, [pc, #44]	; (800067c <FLASH_If_Write+0x50>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	687a      	ldr	r2, [r7, #4]
 8000654:	429a      	cmp	r2, r3
 8000656:	d003      	beq.n	8000660 <FLASH_If_Write+0x34>
        {
            HAL_FLASH_Lock();
 8000658:	f001 ff0e 	bl	8002478 <HAL_FLASH_Lock>
            return FLASHIF_WRITINGCTRL_ERROR;
 800065c:	2302      	movs	r3, #2
 800065e:	e009      	b.n	8000674 <FLASH_If_Write+0x48>
        }

        /* Increase WORD length */
        flash_ptr += 4;
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <FLASH_If_Write+0x50>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	3304      	adds	r3, #4
 8000666:	4a05      	ldr	r2, [pc, #20]	; (800067c <FLASH_If_Write+0x50>)
 8000668:	6013      	str	r3, [r2, #0]
    {
        HAL_FLASH_Lock();
        return FLASHIF_WRITING_ERROR;
    }

    return FLASHIF_OK;
 800066a:	2300      	movs	r3, #0
 800066c:	e002      	b.n	8000674 <FLASH_If_Write+0x48>
        HAL_FLASH_Lock();
 800066e:	f001 ff03 	bl	8002478 <HAL_FLASH_Lock>
        return FLASHIF_WRITING_ERROR;
 8000672:	2303      	movs	r3, #3
}
 8000674:	4618      	mov	r0, r3
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	bd90      	pop	{r4, r7, pc}
 800067c:	20000000 	.word	0x20000000

08000680 <FLASH_If_FlashEnd>:

uint8_t FLASH_If_FlashEnd(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
    /* Lock flash */
    HAL_FLASH_Lock();
 8000684:	f001 fef8 	bl	8002478 <HAL_FLASH_Lock>

    return FLASHIF_OK;
 8000688:	2300      	movs	r3, #0
}
 800068a:	4618      	mov	r0, r3
 800068c:	bd80      	pop	{r7, pc}

0800068e <FLASH_If_GetWriteProtectionStatus>:

/* Check write protection */
uint32_t FLASH_If_GetWriteProtectionStatus(void)
{
 800068e:	b580      	push	{r7, lr}
 8000690:	b088      	sub	sp, #32
 8000692:	af00      	add	r7, sp, #0
    uint32_t ProtectedSector = FLASHIF_PROTECTION_NONE;
 8000694:	2300      	movs	r3, #0
 8000696:	61fb      	str	r3, [r7, #28]
    FLASH_OBProgramInitTypeDef OptionsBytesStruct;

    HAL_FLASH_Unlock();
 8000698:	f001 fecc 	bl	8002434 <HAL_FLASH_Unlock>
    HAL_FLASHEx_OBGetConfig(&OptionsBytesStruct);
 800069c:	463b      	mov	r3, r7
 800069e:	4618      	mov	r0, r3
 80006a0:	f002 f958 	bl	8002954 <HAL_FLASHEx_OBGetConfig>
    HAL_FLASH_Lock();
 80006a4:	f001 fee8 	bl	8002478 <HAL_FLASH_Lock>

    /* If sectors are protected, WRPSector bits are zero, so it needs to be inverted */
    ProtectedSector = ~(OptionsBytesStruct.WRPSector) & USER_WRP_SECTORS;
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	43db      	mvns	r3, r3
 80006ac:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80006b0:	61fb      	str	r3, [r7, #28]

    if (ProtectedSector != 0)
 80006b2:	69fb      	ldr	r3, [r7, #28]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <FLASH_If_GetWriteProtectionStatus+0x2e>
    {
        return FLASHIF_PROTECTION_WRPENABLED;
 80006b8:	2302      	movs	r3, #2
 80006ba:	e000      	b.n	80006be <FLASH_If_GetWriteProtectionStatus+0x30>
    }

    return FLASHIF_PROTECTION_NONE;
 80006bc:	2300      	movs	r3, #0
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3720      	adds	r7, #32
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <FLASH_If_WriteProtectionConfig>:

/* Configure write protection */
uint32_t FLASH_If_WriteProtectionConfig(uint32_t protectionstate)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b08a      	sub	sp, #40	; 0x28
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
    FLASH_OBProgramInitTypeDef OBInit;
    HAL_StatusTypeDef status = HAL_OK;
 80006ce:	2300      	movs	r3, #0
 80006d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    HAL_FLASH_OB_Unlock();
 80006d4:	f001 fee0 	bl	8002498 <HAL_FLASH_OB_Unlock>
    HAL_FLASH_Unlock();
 80006d8:	f001 feac 	bl	8002434 <HAL_FLASH_Unlock>

    /* Configure sector write protection */
    OBInit.OptionType = OPTIONBYTE_WRP;
 80006dc:	2301      	movs	r3, #1
 80006de:	60bb      	str	r3, [r7, #8]
    OBInit.Banks = FLASH_BANK_1;
 80006e0:	2301      	movs	r3, #1
 80006e2:	617b      	str	r3, [r7, #20]
    OBInit.WRPState = (protectionstate == FLASHIF_WRP_ENABLE ? OB_WRPSTATE_ENABLE : OB_WRPSTATE_DISABLE);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d101      	bne.n	80006ee <FLASH_If_WriteProtectionConfig+0x28>
 80006ea:	2301      	movs	r3, #1
 80006ec:	e000      	b.n	80006f0 <FLASH_If_WriteProtectionConfig+0x2a>
 80006ee:	2300      	movs	r3, #0
 80006f0:	60fb      	str	r3, [r7, #12]
    OBInit.WRPSector = USER_WRP_SECTORS;
 80006f2:	233c      	movs	r3, #60	; 0x3c
 80006f4:	613b      	str	r3, [r7, #16]

    HAL_FLASHEx_OBProgram(&OBInit);
 80006f6:	f107 0308 	add.w	r3, r7, #8
 80006fa:	4618      	mov	r0, r3
 80006fc:	f002 f8bc 	bl	8002878 <HAL_FLASHEx_OBProgram>
    status = HAL_FLASH_OB_Launch();
 8000700:	f001 fef6 	bl	80024f0 <HAL_FLASH_OB_Launch>
 8000704:	4603      	mov	r3, r0
 8000706:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    HAL_FLASH_OB_Lock();
 800070a:	f001 fee1 	bl	80024d0 <HAL_FLASH_OB_Lock>
    HAL_FLASH_Lock();
 800070e:	f001 feb3 	bl	8002478 <HAL_FLASH_Lock>

    if (status != HAL_OK)
 8000712:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <FLASH_If_WriteProtectionConfig+0x58>
    {
        return FLASHIF_PROTECTION_ERRROR;
 800071a:	2304      	movs	r3, #4
 800071c:	e000      	b.n	8000720 <FLASH_If_WriteProtectionConfig+0x5a>
    }
    else
    {
        return FLASHIF_OK;
 800071e:	2300      	movs	r3, #0
    }
}
 8000720:	4618      	mov	r0, r3
 8000722:	3728      	adds	r7, #40	; 0x28
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <GetSector>:

/* Get sector number by address */
static uint32_t GetSector(uint32_t Address)
{
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
    uint32_t sector = 0;
 8000730:	2300      	movs	r3, #0
 8000732:	60fb      	str	r3, [r7, #12]

    if ((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	4a2a      	ldr	r2, [pc, #168]	; (80007e0 <GetSector+0xb8>)
 8000738:	4293      	cmp	r3, r2
 800073a:	d206      	bcs.n	800074a <GetSector+0x22>
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000742:	d302      	bcc.n	800074a <GetSector+0x22>
    {
        sector = FLASH_SECTOR_0;
 8000744:	2300      	movs	r3, #0
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	e043      	b.n	80007d2 <GetSector+0xaa>
    }
    else if ((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4a25      	ldr	r2, [pc, #148]	; (80007e4 <GetSector+0xbc>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d206      	bcs.n	8000760 <GetSector+0x38>
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4a22      	ldr	r2, [pc, #136]	; (80007e0 <GetSector+0xb8>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d302      	bcc.n	8000760 <GetSector+0x38>
    {
        sector = FLASH_SECTOR_1;
 800075a:	2301      	movs	r3, #1
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	e038      	b.n	80007d2 <GetSector+0xaa>
    }
    else if ((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4a21      	ldr	r2, [pc, #132]	; (80007e8 <GetSector+0xc0>)
 8000764:	4293      	cmp	r3, r2
 8000766:	d206      	bcs.n	8000776 <GetSector+0x4e>
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	4a1e      	ldr	r2, [pc, #120]	; (80007e4 <GetSector+0xbc>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d302      	bcc.n	8000776 <GetSector+0x4e>
    {
        sector = FLASH_SECTOR_2;
 8000770:	2302      	movs	r3, #2
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	e02d      	b.n	80007d2 <GetSector+0xaa>
    }
    else if ((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	4a1c      	ldr	r2, [pc, #112]	; (80007ec <GetSector+0xc4>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d806      	bhi.n	800078c <GetSector+0x64>
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4a19      	ldr	r2, [pc, #100]	; (80007e8 <GetSector+0xc0>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d302      	bcc.n	800078c <GetSector+0x64>
    {
        sector = FLASH_SECTOR_3;
 8000786:	2303      	movs	r3, #3
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	e022      	b.n	80007d2 <GetSector+0xaa>
    }
    else if ((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4a18      	ldr	r2, [pc, #96]	; (80007f0 <GetSector+0xc8>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d806      	bhi.n	80007a2 <GetSector+0x7a>
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	4a15      	ldr	r2, [pc, #84]	; (80007ec <GetSector+0xc4>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d902      	bls.n	80007a2 <GetSector+0x7a>
    {
        sector = FLASH_SECTOR_4;
 800079c:	2304      	movs	r3, #4
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	e017      	b.n	80007d2 <GetSector+0xaa>
    }
    else if ((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4a13      	ldr	r2, [pc, #76]	; (80007f4 <GetSector+0xcc>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d806      	bhi.n	80007b8 <GetSector+0x90>
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4a10      	ldr	r2, [pc, #64]	; (80007f0 <GetSector+0xc8>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d902      	bls.n	80007b8 <GetSector+0x90>
    {
        sector = FLASH_SECTOR_5;
 80007b2:	2305      	movs	r3, #5
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	e00c      	b.n	80007d2 <GetSector+0xaa>
    }
    else if ((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	4a0f      	ldr	r2, [pc, #60]	; (80007f8 <GetSector+0xd0>)
 80007bc:	4293      	cmp	r3, r2
 80007be:	d806      	bhi.n	80007ce <GetSector+0xa6>
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	4a0c      	ldr	r2, [pc, #48]	; (80007f4 <GetSector+0xcc>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d902      	bls.n	80007ce <GetSector+0xa6>
    {
        sector = FLASH_SECTOR_6;
 80007c8:	2306      	movs	r3, #6
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	e001      	b.n	80007d2 <GetSector+0xaa>
    }
    else
    {
    	sector = FLASH_SECTOR_7;
 80007ce:	2307      	movs	r3, #7
 80007d0:	60fb      	str	r3, [r7, #12]
    }

    return sector;
 80007d2:	68fb      	ldr	r3, [r7, #12]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3714      	adds	r7, #20
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	08004000 	.word	0x08004000
 80007e4:	08008000 	.word	0x08008000
 80007e8:	0800c000 	.word	0x0800c000
 80007ec:	0800ffff 	.word	0x0800ffff
 80007f0:	0801ffff 	.word	0x0801ffff
 80007f4:	0803ffff 	.word	0x0803ffff
 80007f8:	0805ffff 	.word	0x0805ffff

080007fc <Bootloader_JumpToApplication>:

typedef void (*pFunction)(void); /*!< Function pointer definition */

void Bootloader_JumpToApplication(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
    uint32_t JumpAddress = *(__IO uint32_t *)(USER_START_ADDRESS + 4);
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <Bootloader_JumpToApplication+0x4c>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	60fb      	str	r3, [r7, #12]
    pFunction Jump = (pFunction)JumpAddress;
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	60bb      	str	r3, [r7, #8]

    HAL_RCC_DeInit();
 800080c:	f003 f9a2 	bl	8003b54 <HAL_RCC_DeInit>
    HAL_DeInit();
 8000810:	f001 fbb0 	bl	8001f74 <HAL_DeInit>

    SysTick->CTRL = 0;
 8000814:	4b0d      	ldr	r3, [pc, #52]	; (800084c <Bootloader_JumpToApplication+0x50>)
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
    SysTick->LOAD = 0;
 800081a:	4b0c      	ldr	r3, [pc, #48]	; (800084c <Bootloader_JumpToApplication+0x50>)
 800081c:	2200      	movs	r2, #0
 800081e:	605a      	str	r2, [r3, #4]
    SysTick->VAL = 0;
 8000820:	4b0a      	ldr	r3, [pc, #40]	; (800084c <Bootloader_JumpToApplication+0x50>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]

#if (SET_VECTOR_TABLE)
    SCB->VTOR = USER_START_ADDRESS;
 8000826:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <Bootloader_JumpToApplication+0x54>)
 8000828:	4a0a      	ldr	r2, [pc, #40]	; (8000854 <Bootloader_JumpToApplication+0x58>)
 800082a:	609a      	str	r2, [r3, #8]
#endif

    __set_MSP(*(__IO uint32_t *)USER_START_ADDRESS);
 800082c:	4b09      	ldr	r3, [pc, #36]	; (8000854 <Bootloader_JumpToApplication+0x58>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	f383 8808 	msr	MSP, r3
}
 8000838:	bf00      	nop
    Jump();
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	4798      	blx	r3
}
 800083e:	bf00      	nop
 8000840:	3710      	adds	r7, #16
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	08040004 	.word	0x08040004
 800084c:	e000e010 	.word	0xe000e010
 8000850:	e000ed00 	.word	0xe000ed00
 8000854:	08040000 	.word	0x08040000

08000858 <Bootloader_VerifyChecksum>:

uint8_t Bootloader_VerifyChecksum(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af02      	add	r7, sp, #8
    uint32_t calculated_crc;
    calculated_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)ROM_START, (uint32_t)ROM_LEN_WORD);
 800085e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000862:	4925      	ldr	r1, [pc, #148]	; (80008f8 <Bootloader_VerifyChecksum+0xa0>)
 8000864:	4825      	ldr	r0, [pc, #148]	; (80008fc <Bootloader_VerifyChecksum+0xa4>)
 8000866:	f001 fd5e 	bl	8002326 <HAL_CRC_Calculate>
 800086a:	60f8      	str	r0, [r7, #12]

    uint8_t crc_array[4];
    crc_array[0] = calculated_crc >> 24;
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	0e1b      	lsrs	r3, r3, #24
 8000870:	b2db      	uxtb	r3, r3
 8000872:	713b      	strb	r3, [r7, #4]
    crc_array[1] = calculated_crc >> 16;
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	0c1b      	lsrs	r3, r3, #16
 8000878:	b2db      	uxtb	r3, r3
 800087a:	717b      	strb	r3, [r7, #5]
    crc_array[2] = calculated_crc >> 8;
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	0a1b      	lsrs	r3, r3, #8
 8000880:	b2db      	uxtb	r3, r3
 8000882:	71bb      	strb	r3, [r7, #6]
    crc_array[3] = calculated_crc;
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	b2db      	uxtb	r3, r3
 8000888:	71fb      	strb	r3, [r7, #7]
    printf("Calculated CRC: %X:%X:%X:%X\r\n", crc_array[3], crc_array[2], crc_array[1], crc_array[0]);
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	4619      	mov	r1, r3
 800088e:	79bb      	ldrb	r3, [r7, #6]
 8000890:	461a      	mov	r2, r3
 8000892:	797b      	ldrb	r3, [r7, #5]
 8000894:	4618      	mov	r0, r3
 8000896:	793b      	ldrb	r3, [r7, #4]
 8000898:	9300      	str	r3, [sp, #0]
 800089a:	4603      	mov	r3, r0
 800089c:	4818      	ldr	r0, [pc, #96]	; (8000900 <Bootloader_VerifyChecksum+0xa8>)
 800089e:	f007 fa3b 	bl	8007d18 <iprintf>

    uint32_t crc;
    crc = *(uint32_t *)CHECKSUM_ADDR;
 80008a2:	4b18      	ldr	r3, [pc, #96]	; (8000904 <Bootloader_VerifyChecksum+0xac>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	60bb      	str	r3, [r7, #8]
    crc_array[0] = crc >> 24;
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	0e1b      	lsrs	r3, r3, #24
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	713b      	strb	r3, [r7, #4]
    crc_array[1] = crc >> 16;
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	0c1b      	lsrs	r3, r3, #16
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	717b      	strb	r3, [r7, #5]
    crc_array[2] = crc >> 8;
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	0a1b      	lsrs	r3, r3, #8
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	71bb      	strb	r3, [r7, #6]
    crc_array[3] = crc;
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	71fb      	strb	r3, [r7, #7]
    printf("CRC appended application.bin: %X:%X:%X:%X\r\n", crc_array[3], crc_array[2], crc_array[1], crc_array[0]);
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	4619      	mov	r1, r3
 80008ca:	79bb      	ldrb	r3, [r7, #6]
 80008cc:	461a      	mov	r2, r3
 80008ce:	797b      	ldrb	r3, [r7, #5]
 80008d0:	4618      	mov	r0, r3
 80008d2:	793b      	ldrb	r3, [r7, #4]
 80008d4:	9300      	str	r3, [sp, #0]
 80008d6:	4603      	mov	r3, r0
 80008d8:	480b      	ldr	r0, [pc, #44]	; (8000908 <Bootloader_VerifyChecksum+0xb0>)
 80008da:	f007 fa1d 	bl	8007d18 <iprintf>

    if ((*(uint32_t *)CHECKSUM_ADDR) == calculated_crc)
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <Bootloader_VerifyChecksum+0xac>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	68fa      	ldr	r2, [r7, #12]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d101      	bne.n	80008ec <Bootloader_VerifyChecksum+0x94>
    {
        return 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	e000      	b.n	80008ee <Bootloader_VerifyChecksum+0x96>
    }
    return BL_CHKS_ERROR;
 80008ec:	2305      	movs	r3, #5
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3710      	adds	r7, #16
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	08040000 	.word	0x08040000
 80008fc:	200000a8 	.word	0x200000a8
 8000900:	08008d38 	.word	0x08008d38
 8000904:	0805fffc 	.word	0x0805fffc
 8000908:	08008d58 	.word	0x08008d58

0800090c <readWord>:

uint32_t readWord(uint32_t address)
{
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
    uint32_t read_data;
    read_data = *(uint32_t *)(address);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	60fb      	str	r3, [r7, #12]
    return read_data;
 800091a:	68fb      	ldr	r3, [r7, #12]
}
 800091c:	4618      	mov	r0, r3
 800091e:	3714      	adds	r7, #20
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <Bootloader_CheckForApplication>:

uint8_t Bootloader_CheckForApplication(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
    // Check if the application is there
    uint8_t emptyCellCount = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 10; i++)
 8000932:	2300      	movs	r3, #0
 8000934:	71bb      	strb	r3, [r7, #6]
 8000936:	e018      	b.n	800096a <Bootloader_CheckForApplication+0x42>
    {
        uint32_t word = readWord(ROM_START + (i * 4));
 8000938:	79bb      	ldrb	r3, [r7, #6]
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000940:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff ffe1 	bl	800090c <readWord>
 800094a:	6038      	str	r0, [r7, #0]

        printf("Word: %d\r\n", word);
 800094c:	6839      	ldr	r1, [r7, #0]
 800094e:	480d      	ldr	r0, [pc, #52]	; (8000984 <Bootloader_CheckForApplication+0x5c>)
 8000950:	f007 f9e2 	bl	8007d18 <iprintf>

        if (word == 0xFFFF)
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800095a:	4293      	cmp	r3, r2
 800095c:	d102      	bne.n	8000964 <Bootloader_CheckForApplication+0x3c>
        {
            emptyCellCount++;
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	3301      	adds	r3, #1
 8000962:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 10; i++)
 8000964:	79bb      	ldrb	r3, [r7, #6]
 8000966:	3301      	adds	r3, #1
 8000968:	71bb      	strb	r3, [r7, #6]
 800096a:	79bb      	ldrb	r3, [r7, #6]
 800096c:	2b09      	cmp	r3, #9
 800096e:	d9e3      	bls.n	8000938 <Bootloader_CheckForApplication+0x10>
        }
    }

    if (emptyCellCount != 10)
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	2b0a      	cmp	r3, #10
 8000974:	d001      	beq.n	800097a <Bootloader_CheckForApplication+0x52>
    {
        return 0;
 8000976:	2300      	movs	r3, #0
 8000978:	e000      	b.n	800097c <Bootloader_CheckForApplication+0x54>
    }
    else
    {
        return -100;
 800097a:	239c      	movs	r3, #156	; 0x9c
    }
}
 800097c:	4618      	mov	r0, r3
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	08008d84 	.word	0x08008d84

08000988 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_CRC_Init+0x20>)
 800098e:	4a07      	ldr	r2, [pc, #28]	; (80009ac <MX_CRC_Init+0x24>)
 8000990:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_CRC_Init+0x20>)
 8000994:	f001 fc7b 	bl	800228e <HAL_CRC_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800099e:	f001 f82b 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200000a8 	.word	0x200000a8
 80009ac:	40023000 	.word	0x40023000

080009b0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a0b      	ldr	r2, [pc, #44]	; (80009ec <HAL_CRC_MspInit+0x3c>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d10d      	bne.n	80009de <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <HAL_CRC_MspInit+0x40>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a09      	ldr	r2, [pc, #36]	; (80009f0 <HAL_CRC_MspInit+0x40>)
 80009cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <HAL_CRC_MspInit+0x40>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80009de:	bf00      	nop
 80009e0:	3714      	adds	r7, #20
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	40023000 	.word	0x40023000
 80009f0:	40023800 	.word	0x40023800

080009f4 <HAL_CRC_MspDeInit>:

void HAL_CRC_MspDeInit(CRC_HandleTypeDef* crcHandle)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a07      	ldr	r2, [pc, #28]	; (8000a20 <HAL_CRC_MspDeInit+0x2c>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d105      	bne.n	8000a12 <HAL_CRC_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN CRC_MspDeInit 0 */

  /* USER CODE END CRC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CRC_CLK_DISABLE();
 8000a06:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <HAL_CRC_MspDeInit+0x30>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a06      	ldr	r2, [pc, #24]	; (8000a24 <HAL_CRC_MspDeInit+0x30>)
 8000a0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
  /* USER CODE BEGIN CRC_MspDeInit 1 */

  /* USER CODE END CRC_MspDeInit 1 */
  }
}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	40023000 	.word	0x40023000
 8000a24:	40023800 	.word	0x40023800

08000a28 <SELECT>:
static uint8_t CardType;                   /* SD type 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0;              /* Power condition Flag */

/* SPI Chip Select */
static void SELECT(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2110      	movs	r1, #16
 8000a30:	4802      	ldr	r0, [pc, #8]	; (8000a3c <SELECT+0x14>)
 8000a32:	f002 fbc3 	bl	80031bc <HAL_GPIO_WritePin>
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40020000 	.word	0x40020000

08000a40 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000a44:	2201      	movs	r2, #1
 8000a46:	2110      	movs	r1, #16
 8000a48:	4802      	ldr	r0, [pc, #8]	; (8000a54 <DESELECT+0x14>)
 8000a4a:	f002 fbb7 	bl	80031bc <HAL_GPIO_WritePin>
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40020000 	.word	0x40020000

08000a58 <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	71fb      	strb	r3, [r7, #7]
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY)
 8000a62:	bf00      	nop
 8000a64:	4808      	ldr	r0, [pc, #32]	; (8000a88 <SPI_TxByte+0x30>)
 8000a66:	f003 fcd2 	bl	800440e <HAL_SPI_GetState>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d1f9      	bne.n	8000a64 <SPI_TxByte+0xc>
        ;
    HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8000a70:	1df9      	adds	r1, r7, #7
 8000a72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a76:	2201      	movs	r2, #1
 8000a78:	4803      	ldr	r0, [pc, #12]	; (8000a88 <SPI_TxByte+0x30>)
 8000a7a:	f003 f9ea 	bl	8003e52 <HAL_SPI_Transmit>
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20003160 	.word	0x20003160

08000a8c <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af02      	add	r7, sp, #8
    uint8_t dummy, data;
    dummy = 0xFF;
 8000a92:	23ff      	movs	r3, #255	; 0xff
 8000a94:	71fb      	strb	r3, [r7, #7]
    data = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	71bb      	strb	r3, [r7, #6]

    while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY))
 8000a9a:	bf00      	nop
 8000a9c:	4809      	ldr	r0, [pc, #36]	; (8000ac4 <SPI_RxByte+0x38>)
 8000a9e:	f003 fcb6 	bl	800440e <HAL_SPI_GetState>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d1f9      	bne.n	8000a9c <SPI_RxByte+0x10>
        ;
    HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8000aa8:	1dba      	adds	r2, r7, #6
 8000aaa:	1df9      	adds	r1, r7, #7
 8000aac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ab0:	9300      	str	r3, [sp, #0]
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	4803      	ldr	r0, [pc, #12]	; (8000ac4 <SPI_RxByte+0x38>)
 8000ab6:	f003 fb08 	bl	80040ca <HAL_SPI_TransmitReceive>

    return data;
 8000aba:	79bb      	ldrb	r3, [r7, #6]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20003160 	.word	0x20003160

08000ac8 <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
    *buff = SPI_RxByte();
 8000ad0:	f7ff ffdc 	bl	8000a8c <SPI_RxByte>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	701a      	strb	r2, [r3, #0]
}
 8000adc:	bf00      	nop
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
    uint8_t res;

    /* 500ms Counter preparation*/
    Timer2 = 50;
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <SD_ReadyWait+0x34>)
 8000aec:	2232      	movs	r2, #50	; 0x32
 8000aee:	801a      	strh	r2, [r3, #0]

    SPI_RxByte();
 8000af0:	f7ff ffcc 	bl	8000a8c <SPI_RxByte>

    do
    {
        /* 0xFF SPI communication until a value is received */
        res = SPI_RxByte();
 8000af4:	f7ff ffca 	bl	8000a8c <SPI_RxByte>
 8000af8:	4603      	mov	r3, r0
 8000afa:	71fb      	strb	r3, [r7, #7]
    } while ((res != 0xFF) && Timer2);
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	2bff      	cmp	r3, #255	; 0xff
 8000b00:	d004      	beq.n	8000b0c <SD_ReadyWait+0x28>
 8000b02:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <SD_ReadyWait+0x34>)
 8000b04:	881b      	ldrh	r3, [r3, #0]
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d1f3      	bne.n	8000af4 <SD_ReadyWait+0x10>

    return res;
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200031ba 	.word	0x200031ba

08000b1c <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
    uint8_t cmd_arg[6];
    uint32_t Count = 0x1FFF;
 8000b22:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000b26:	617b      	str	r3, [r7, #20]

    DESELECT();
 8000b28:	f7ff ff8a 	bl	8000a40 <DESELECT>

    for (int i = 0; i < 10; i++)
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	e005      	b.n	8000b3e <SD_PowerOn+0x22>
    {
        SPI_TxByte(0xFF);
 8000b32:	20ff      	movs	r0, #255	; 0xff
 8000b34:	f7ff ff90 	bl	8000a58 <SPI_TxByte>
    for (int i = 0; i < 10; i++)
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	2b09      	cmp	r3, #9
 8000b42:	ddf6      	ble.n	8000b32 <SD_PowerOn+0x16>
    }

    /* SPI Chips Select */
    SELECT();
 8000b44:	f7ff ff70 	bl	8000a28 <SELECT>

    /*  GO_IDLE_STATE State transitions*/
    cmd_arg[0] = (CMD0 | 0x40);
 8000b48:	2340      	movs	r3, #64	; 0x40
 8000b4a:	713b      	strb	r3, [r7, #4]
    cmd_arg[1] = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	717b      	strb	r3, [r7, #5]
    cmd_arg[2] = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	71bb      	strb	r3, [r7, #6]
    cmd_arg[3] = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	71fb      	strb	r3, [r7, #7]
    cmd_arg[4] = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	723b      	strb	r3, [r7, #8]
    cmd_arg[5] = 0x95;
 8000b5c:	2395      	movs	r3, #149	; 0x95
 8000b5e:	727b      	strb	r3, [r7, #9]

    /* Command transmission*/
    for (int i = 0; i < 6; i++)
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	e009      	b.n	8000b7a <SD_PowerOn+0x5e>
    {
        SPI_TxByte(cmd_arg[i]);
 8000b66:	1d3a      	adds	r2, r7, #4
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff ff72 	bl	8000a58 <SPI_TxByte>
    for (int i = 0; i < 6; i++)
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	3301      	adds	r3, #1
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	2b05      	cmp	r3, #5
 8000b7e:	ddf2      	ble.n	8000b66 <SD_PowerOn+0x4a>
    }

    /* Answer waiting*/
    while ((SPI_RxByte() != 0x01) && Count)
 8000b80:	e002      	b.n	8000b88 <SD_PowerOn+0x6c>
    {
        Count--;
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	3b01      	subs	r3, #1
 8000b86:	617b      	str	r3, [r7, #20]
    while ((SPI_RxByte() != 0x01) && Count)
 8000b88:	f7ff ff80 	bl	8000a8c <SPI_RxByte>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d002      	beq.n	8000b98 <SD_PowerOn+0x7c>
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d1f4      	bne.n	8000b82 <SD_PowerOn+0x66>
    }

    DESELECT();
 8000b98:	f7ff ff52 	bl	8000a40 <DESELECT>
    SPI_TxByte(0XFF);
 8000b9c:	20ff      	movs	r0, #255	; 0xff
 8000b9e:	f7ff ff5b 	bl	8000a58 <SPI_TxByte>

    PowerFlag = 1;
 8000ba2:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <SD_PowerOn+0x94>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	701a      	strb	r2, [r3, #0]
}
 8000ba8:	bf00      	nop
 8000baa:	3718      	adds	r7, #24
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	200000b1 	.word	0x200000b1

08000bb4 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
    PowerFlag = 0;
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <SD_PowerOff+0x14>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	200000b1 	.word	0x200000b1

08000bcc <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
    /*  0=off, 1=on */
    return PowerFlag;
 8000bd0:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <SD_CheckPower+0x14>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	200000b1 	.word	0x200000b1

08000be4 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
    uint8_t token;

    /* 100ms 타이머 */
    Timer1 = 10;
 8000bee:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <SD_RxDataBlock+0x68>)
 8000bf0:	220a      	movs	r2, #10
 8000bf2:	801a      	strh	r2, [r3, #0]

    /* 응답 대기 */
    do
    {
        token = SPI_RxByte();
 8000bf4:	f7ff ff4a 	bl	8000a8c <SPI_RxByte>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	73fb      	strb	r3, [r7, #15]
    } while ((token == 0xFF) && Timer1);
 8000bfc:	7bfb      	ldrb	r3, [r7, #15]
 8000bfe:	2bff      	cmp	r3, #255	; 0xff
 8000c00:	d104      	bne.n	8000c0c <SD_RxDataBlock+0x28>
 8000c02:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <SD_RxDataBlock+0x68>)
 8000c04:	881b      	ldrh	r3, [r3, #0]
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d1f3      	bne.n	8000bf4 <SD_RxDataBlock+0x10>

    /* 0xFE 이외 Token 수신 시 에러 처리 */
    if (token != 0xFE)
 8000c0c:	7bfb      	ldrb	r3, [r7, #15]
 8000c0e:	2bfe      	cmp	r3, #254	; 0xfe
 8000c10:	d001      	beq.n	8000c16 <SD_RxDataBlock+0x32>
        return FALSE;
 8000c12:	2300      	movs	r3, #0
 8000c14:	e016      	b.n	8000c44 <SD_RxDataBlock+0x60>

    /* 버퍼에 데이터 수신 */
    do
    {
        SPI_RxBytePtr(buff++);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	1c5a      	adds	r2, r3, #1
 8000c1a:	607a      	str	r2, [r7, #4]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff ff53 	bl	8000ac8 <SPI_RxBytePtr>
        SPI_RxBytePtr(buff++);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	1c5a      	adds	r2, r3, #1
 8000c26:	607a      	str	r2, [r7, #4]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff ff4d 	bl	8000ac8 <SPI_RxBytePtr>
    } while (btr -= 2);
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	3b02      	subs	r3, #2
 8000c32:	603b      	str	r3, [r7, #0]
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d1ed      	bne.n	8000c16 <SD_RxDataBlock+0x32>

    SPI_RxByte(); /* CRC 무시 */
 8000c3a:	f7ff ff27 	bl	8000a8c <SPI_RxByte>
    SPI_RxByte();
 8000c3e:	f7ff ff25 	bl	8000a8c <SPI_RxByte>

    return TRUE;
 8000c42:	2301      	movs	r3, #1
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	200031b9 	.word	0x200031b9

08000c50 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	460b      	mov	r3, r1
 8000c5a:	70fb      	strb	r3, [r7, #3]
    uint8_t resp, wc;
    uint8_t i = 0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	737b      	strb	r3, [r7, #13]

    /* SD카드 준비 대기 */
    if (SD_ReadyWait() != 0xFF)
 8000c60:	f7ff ff40 	bl	8000ae4 <SD_ReadyWait>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2bff      	cmp	r3, #255	; 0xff
 8000c68:	d001      	beq.n	8000c6e <SD_TxDataBlock+0x1e>
        return FALSE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e040      	b.n	8000cf0 <SD_TxDataBlock+0xa0>

    /* 토큰 전송 */
    SPI_TxByte(token);
 8000c6e:	78fb      	ldrb	r3, [r7, #3]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fef1 	bl	8000a58 <SPI_TxByte>

    /* 데이터 토큰인 경우 */
    if (token != 0xFD)
 8000c76:	78fb      	ldrb	r3, [r7, #3]
 8000c78:	2bfd      	cmp	r3, #253	; 0xfd
 8000c7a:	d031      	beq.n	8000ce0 <SD_TxDataBlock+0x90>
    {
        wc = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	73bb      	strb	r3, [r7, #14]

        /* 512 바이트 데이터 전송 */
        do
        {
            SPI_TxByte(*buff++);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	1c5a      	adds	r2, r3, #1
 8000c84:	607a      	str	r2, [r7, #4]
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fee5 	bl	8000a58 <SPI_TxByte>
            SPI_TxByte(*buff++);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	1c5a      	adds	r2, r3, #1
 8000c92:	607a      	str	r2, [r7, #4]
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fede 	bl	8000a58 <SPI_TxByte>
        } while (--wc);
 8000c9c:	7bbb      	ldrb	r3, [r7, #14]
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	73bb      	strb	r3, [r7, #14]
 8000ca2:	7bbb      	ldrb	r3, [r7, #14]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d1eb      	bne.n	8000c80 <SD_TxDataBlock+0x30>

        SPI_RxByte(); /* CRC 무시 */
 8000ca8:	f7ff fef0 	bl	8000a8c <SPI_RxByte>
        SPI_RxByte();
 8000cac:	f7ff feee 	bl	8000a8c <SPI_RxByte>

        /* 데이트 응답 수신 */
        while (i <= 64)
 8000cb0:	e00b      	b.n	8000cca <SD_TxDataBlock+0x7a>
        {
            resp = SPI_RxByte();
 8000cb2:	f7ff feeb 	bl	8000a8c <SPI_RxByte>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	73fb      	strb	r3, [r7, #15]

            /* 에러 응답 처리 */
            if ((resp & 0x1F) == 0x05)
 8000cba:	7bfb      	ldrb	r3, [r7, #15]
 8000cbc:	f003 031f 	and.w	r3, r3, #31
 8000cc0:	2b05      	cmp	r3, #5
 8000cc2:	d006      	beq.n	8000cd2 <SD_TxDataBlock+0x82>
                break;

            i++;
 8000cc4:	7b7b      	ldrb	r3, [r7, #13]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	737b      	strb	r3, [r7, #13]
        while (i <= 64)
 8000cca:	7b7b      	ldrb	r3, [r7, #13]
 8000ccc:	2b40      	cmp	r3, #64	; 0x40
 8000cce:	d9f0      	bls.n	8000cb2 <SD_TxDataBlock+0x62>
 8000cd0:	e000      	b.n	8000cd4 <SD_TxDataBlock+0x84>
                break;
 8000cd2:	bf00      	nop
        }

        /* SPI 수신 버퍼 Clear */
        while (SPI_RxByte() == 0)
 8000cd4:	bf00      	nop
 8000cd6:	f7ff fed9 	bl	8000a8c <SPI_RxByte>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d0fa      	beq.n	8000cd6 <SD_TxDataBlock+0x86>
            ;
    }

    if ((resp & 0x1F) == 0x05)
 8000ce0:	7bfb      	ldrb	r3, [r7, #15]
 8000ce2:	f003 031f 	and.w	r3, r3, #31
 8000ce6:	2b05      	cmp	r3, #5
 8000ce8:	d101      	bne.n	8000cee <SD_TxDataBlock+0x9e>
        return TRUE;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e000      	b.n	8000cf0 <SD_TxDataBlock+0xa0>
    else
        return FALSE;
 8000cee:	2300      	movs	r3, #0
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	6039      	str	r1, [r7, #0]
 8000d02:	71fb      	strb	r3, [r7, #7]
    uint8_t crc, res;

    /* SD카드 대기 */
    if (SD_ReadyWait() != 0xFF)
 8000d04:	f7ff feee 	bl	8000ae4 <SD_ReadyWait>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2bff      	cmp	r3, #255	; 0xff
 8000d0c:	d001      	beq.n	8000d12 <SD_SendCmd+0x1a>
        return 0xFF;
 8000d0e:	23ff      	movs	r3, #255	; 0xff
 8000d10:	e040      	b.n	8000d94 <SD_SendCmd+0x9c>

    /* 명령 패킷 전송 */
    SPI_TxByte(cmd);               /* Command */
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fe9f 	bl	8000a58 <SPI_TxByte>
    SPI_TxByte((BYTE)(arg >> 24)); /* Argument[31..24] */
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	0e1b      	lsrs	r3, r3, #24
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fe99 	bl	8000a58 <SPI_TxByte>
    SPI_TxByte((BYTE)(arg >> 16)); /* Argument[23..16] */
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	0c1b      	lsrs	r3, r3, #16
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fe93 	bl	8000a58 <SPI_TxByte>
    SPI_TxByte((BYTE)(arg >> 8));  /* Argument[15..8] */
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	0a1b      	lsrs	r3, r3, #8
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fe8d 	bl	8000a58 <SPI_TxByte>
    SPI_TxByte((BYTE)arg);         /* Argument[7..0] */
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fe88 	bl	8000a58 <SPI_TxByte>

    /* 명령별 CRC 준비 */
    crc = 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	73fb      	strb	r3, [r7, #15]
    if (cmd == CMD0)
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	2b40      	cmp	r3, #64	; 0x40
 8000d50:	d101      	bne.n	8000d56 <SD_SendCmd+0x5e>
        crc = 0x95; /* CRC for CMD0(0) */
 8000d52:	2395      	movs	r3, #149	; 0x95
 8000d54:	73fb      	strb	r3, [r7, #15]

    if (cmd == CMD8)
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	2b48      	cmp	r3, #72	; 0x48
 8000d5a:	d101      	bne.n	8000d60 <SD_SendCmd+0x68>
        crc = 0x87; /* CRC for CMD8(0x1AA) */
 8000d5c:	2387      	movs	r3, #135	; 0x87
 8000d5e:	73fb      	strb	r3, [r7, #15]

    /* CRC 전송 */
    SPI_TxByte(crc);
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff fe78 	bl	8000a58 <SPI_TxByte>

    /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
    if (cmd == CMD12)
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	2b4c      	cmp	r3, #76	; 0x4c
 8000d6c:	d101      	bne.n	8000d72 <SD_SendCmd+0x7a>
        SPI_RxByte();
 8000d6e:	f7ff fe8d 	bl	8000a8c <SPI_RxByte>

    /* 10회 내에 정상 데이터를 수신한다. */
    uint8_t n = 10;
 8000d72:	230a      	movs	r3, #10
 8000d74:	73bb      	strb	r3, [r7, #14]
    do
    {
        res = SPI_RxByte();
 8000d76:	f7ff fe89 	bl	8000a8c <SPI_RxByte>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	737b      	strb	r3, [r7, #13]
    } while ((res & 0x80) && --n);
 8000d7e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	da05      	bge.n	8000d92 <SD_SendCmd+0x9a>
 8000d86:	7bbb      	ldrb	r3, [r7, #14]
 8000d88:	3b01      	subs	r3, #1
 8000d8a:	73bb      	strb	r3, [r7, #14]
 8000d8c:	7bbb      	ldrb	r3, [r7, #14]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d1f1      	bne.n	8000d76 <SD_SendCmd+0x7e>

    return res;
 8000d92:	7b7b      	ldrb	r3, [r7, #13]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000d9c:	b590      	push	{r4, r7, lr}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
    uint8_t n, type, ocr[4];

    /* 한종류의 드라이브만 지원 */
    if (drv)
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <SD_disk_initialize+0x14>
        return STA_NOINIT;
 8000dac:	2301      	movs	r3, #1
 8000dae:	e0d5      	b.n	8000f5c <SD_disk_initialize+0x1c0>

    /* SD카드 미삽입 */
    if (Stat & STA_NODISK)
 8000db0:	4b6c      	ldr	r3, [pc, #432]	; (8000f64 <SD_disk_initialize+0x1c8>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d003      	beq.n	8000dc6 <SD_disk_initialize+0x2a>
        return Stat;
 8000dbe:	4b69      	ldr	r3, [pc, #420]	; (8000f64 <SD_disk_initialize+0x1c8>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	e0ca      	b.n	8000f5c <SD_disk_initialize+0x1c0>

    /* SD카드 Power On */
    SD_PowerOn();
 8000dc6:	f7ff fea9 	bl	8000b1c <SD_PowerOn>

    /* SPI 통신을 위해 Chip Select */
    SELECT();
 8000dca:	f7ff fe2d 	bl	8000a28 <SELECT>

    /* SD카드 타입변수 초기화 */
    type = 0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	73bb      	strb	r3, [r7, #14]

    /* Idle 상태 진입 */
    if (SD_SendCmd(CMD0, 0) == 1)
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	2040      	movs	r0, #64	; 0x40
 8000dd6:	f7ff ff8f 	bl	8000cf8 <SD_SendCmd>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	f040 80a5 	bne.w	8000f2c <SD_disk_initialize+0x190>
    {
        /* 타이머 1초 설정 */
        Timer1 = 100;
 8000de2:	4b61      	ldr	r3, [pc, #388]	; (8000f68 <SD_disk_initialize+0x1cc>)
 8000de4:	2264      	movs	r2, #100	; 0x64
 8000de6:	801a      	strh	r2, [r3, #0]

        /* SD 인터페이스 동작 조건 확인 */
        if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000de8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000dec:	2048      	movs	r0, #72	; 0x48
 8000dee:	f7ff ff83 	bl	8000cf8 <SD_SendCmd>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d158      	bne.n	8000eaa <SD_disk_initialize+0x10e>
        {
            /* SDC Ver2+ */
            for (n = 0; n < 4; n++)
 8000df8:	2300      	movs	r3, #0
 8000dfa:	73fb      	strb	r3, [r7, #15]
 8000dfc:	e00c      	b.n	8000e18 <SD_disk_initialize+0x7c>
            {
                ocr[n] = SPI_RxByte();
 8000dfe:	7bfc      	ldrb	r4, [r7, #15]
 8000e00:	f7ff fe44 	bl	8000a8c <SPI_RxByte>
 8000e04:	4603      	mov	r3, r0
 8000e06:	461a      	mov	r2, r3
 8000e08:	f104 0310 	add.w	r3, r4, #16
 8000e0c:	443b      	add	r3, r7
 8000e0e:	f803 2c08 	strb.w	r2, [r3, #-8]
            for (n = 0; n < 4; n++)
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
 8000e14:	3301      	adds	r3, #1
 8000e16:	73fb      	strb	r3, [r7, #15]
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
 8000e1a:	2b03      	cmp	r3, #3
 8000e1c:	d9ef      	bls.n	8000dfe <SD_disk_initialize+0x62>
            }

            if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000e1e:	7abb      	ldrb	r3, [r7, #10]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	f040 8083 	bne.w	8000f2c <SD_disk_initialize+0x190>
 8000e26:	7afb      	ldrb	r3, [r7, #11]
 8000e28:	2baa      	cmp	r3, #170	; 0xaa
 8000e2a:	d17f      	bne.n	8000f2c <SD_disk_initialize+0x190>
            {
                /* 2.7-3.6V 전압범위 동작 */
                do
                {
                    if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	2077      	movs	r0, #119	; 0x77
 8000e30:	f7ff ff62 	bl	8000cf8 <SD_SendCmd>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d807      	bhi.n	8000e4a <SD_disk_initialize+0xae>
 8000e3a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000e3e:	2069      	movs	r0, #105	; 0x69
 8000e40:	f7ff ff5a 	bl	8000cf8 <SD_SendCmd>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d005      	beq.n	8000e56 <SD_disk_initialize+0xba>
                        break; /* ACMD41 with HCS bit */
                } while (Timer1);
 8000e4a:	4b47      	ldr	r3, [pc, #284]	; (8000f68 <SD_disk_initialize+0x1cc>)
 8000e4c:	881b      	ldrh	r3, [r3, #0]
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d1eb      	bne.n	8000e2c <SD_disk_initialize+0x90>
 8000e54:	e000      	b.n	8000e58 <SD_disk_initialize+0xbc>
                        break; /* ACMD41 with HCS bit */
 8000e56:	bf00      	nop

                if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000e58:	4b43      	ldr	r3, [pc, #268]	; (8000f68 <SD_disk_initialize+0x1cc>)
 8000e5a:	881b      	ldrh	r3, [r3, #0]
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d064      	beq.n	8000f2c <SD_disk_initialize+0x190>
 8000e62:	2100      	movs	r1, #0
 8000e64:	207a      	movs	r0, #122	; 0x7a
 8000e66:	f7ff ff47 	bl	8000cf8 <SD_SendCmd>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d15d      	bne.n	8000f2c <SD_disk_initialize+0x190>
                {
                    /* Check CCS bit */
                    for (n = 0; n < 4; n++)
 8000e70:	2300      	movs	r3, #0
 8000e72:	73fb      	strb	r3, [r7, #15]
 8000e74:	e00c      	b.n	8000e90 <SD_disk_initialize+0xf4>
                    {
                        ocr[n] = SPI_RxByte();
 8000e76:	7bfc      	ldrb	r4, [r7, #15]
 8000e78:	f7ff fe08 	bl	8000a8c <SPI_RxByte>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	461a      	mov	r2, r3
 8000e80:	f104 0310 	add.w	r3, r4, #16
 8000e84:	443b      	add	r3, r7
 8000e86:	f803 2c08 	strb.w	r2, [r3, #-8]
                    for (n = 0; n < 4; n++)
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	73fb      	strb	r3, [r7, #15]
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	2b03      	cmp	r3, #3
 8000e94:	d9ef      	bls.n	8000e76 <SD_disk_initialize+0xda>
                    }

                    type = (ocr[0] & 0x40) ? 6 : 2;
 8000e96:	7a3b      	ldrb	r3, [r7, #8]
 8000e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <SD_disk_initialize+0x108>
 8000ea0:	2306      	movs	r3, #6
 8000ea2:	e000      	b.n	8000ea6 <SD_disk_initialize+0x10a>
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	73bb      	strb	r3, [r7, #14]
 8000ea8:	e040      	b.n	8000f2c <SD_disk_initialize+0x190>
            }
        }
        else
        {
            /* SDC Ver1 or MMC */
            type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8000eaa:	2100      	movs	r1, #0
 8000eac:	2077      	movs	r0, #119	; 0x77
 8000eae:	f7ff ff23 	bl	8000cf8 <SD_SendCmd>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d808      	bhi.n	8000eca <SD_disk_initialize+0x12e>
 8000eb8:	2100      	movs	r1, #0
 8000eba:	2069      	movs	r0, #105	; 0x69
 8000ebc:	f7ff ff1c 	bl	8000cf8 <SD_SendCmd>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d801      	bhi.n	8000eca <SD_disk_initialize+0x12e>
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	e000      	b.n	8000ecc <SD_disk_initialize+0x130>
 8000eca:	2301      	movs	r3, #1
 8000ecc:	73bb      	strb	r3, [r7, #14]

            do
            {
                if (type == 2)
 8000ece:	7bbb      	ldrb	r3, [r7, #14]
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d10e      	bne.n	8000ef2 <SD_disk_initialize+0x156>
                {
                    if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	2077      	movs	r0, #119	; 0x77
 8000ed8:	f7ff ff0e 	bl	8000cf8 <SD_SendCmd>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d80e      	bhi.n	8000f00 <SD_disk_initialize+0x164>
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	2069      	movs	r0, #105	; 0x69
 8000ee6:	f7ff ff07 	bl	8000cf8 <SD_SendCmd>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d107      	bne.n	8000f00 <SD_disk_initialize+0x164>
                        break; /* ACMD41 */
 8000ef0:	e00d      	b.n	8000f0e <SD_disk_initialize+0x172>
                }
                else
                {
                    if (SD_SendCmd(CMD1, 0) == 0)
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	2041      	movs	r0, #65	; 0x41
 8000ef6:	f7ff feff 	bl	8000cf8 <SD_SendCmd>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d005      	beq.n	8000f0c <SD_disk_initialize+0x170>
                        break; /* CMD1 */
                }
            } while (Timer1);
 8000f00:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <SD_disk_initialize+0x1cc>)
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d1e1      	bne.n	8000ece <SD_disk_initialize+0x132>
 8000f0a:	e000      	b.n	8000f0e <SD_disk_initialize+0x172>
                        break; /* CMD1 */
 8000f0c:	bf00      	nop

            if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8000f0e:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <SD_disk_initialize+0x1cc>)
 8000f10:	881b      	ldrh	r3, [r3, #0]
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d007      	beq.n	8000f28 <SD_disk_initialize+0x18c>
 8000f18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f1c:	2050      	movs	r0, #80	; 0x50
 8000f1e:	f7ff feeb 	bl	8000cf8 <SD_SendCmd>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <SD_disk_initialize+0x190>
            {
                /* 블럭 길이 선택 */
                type = 0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	73bb      	strb	r3, [r7, #14]
            }
        }
    }

    CardType = type;
 8000f2c:	4a0f      	ldr	r2, [pc, #60]	; (8000f6c <SD_disk_initialize+0x1d0>)
 8000f2e:	7bbb      	ldrb	r3, [r7, #14]
 8000f30:	7013      	strb	r3, [r2, #0]

    DESELECT();
 8000f32:	f7ff fd85 	bl	8000a40 <DESELECT>

    SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8000f36:	f7ff fda9 	bl	8000a8c <SPI_RxByte>

    if (type)
 8000f3a:	7bbb      	ldrb	r3, [r7, #14]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d008      	beq.n	8000f52 <SD_disk_initialize+0x1b6>
    {
        /* Clear STA_NOINIT */
        Stat &= ~STA_NOINIT;
 8000f40:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <SD_disk_initialize+0x1c8>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	f023 0301 	bic.w	r3, r3, #1
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <SD_disk_initialize+0x1c8>)
 8000f4e:	701a      	strb	r2, [r3, #0]
 8000f50:	e001      	b.n	8000f56 <SD_disk_initialize+0x1ba>
    }
    else
    {
        /* Initialization failed */
        SD_PowerOff();
 8000f52:	f7ff fe2f 	bl	8000bb4 <SD_PowerOff>
    }

    return Stat;
 8000f56:	4b03      	ldr	r3, [pc, #12]	; (8000f64 <SD_disk_initialize+0x1c8>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	b2db      	uxtb	r3, r3
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3714      	adds	r7, #20
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd90      	pop	{r4, r7, pc}
 8000f64:	20000004 	.word	0x20000004
 8000f68:	200031b9 	.word	0x200031b9
 8000f6c:	200000b0 	.word	0x200000b0

08000f70 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
    if (drv)
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <SD_disk_status+0x14>
        return STA_NOINIT;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e002      	b.n	8000f8a <SD_disk_status+0x1a>

    return Stat;
 8000f84:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <SD_disk_status+0x28>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	b2db      	uxtb	r3, r3
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	20000004 	.word	0x20000004

08000f9c <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE *buff, DWORD sector, UINT count)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60b9      	str	r1, [r7, #8]
 8000fa4:	607a      	str	r2, [r7, #4]
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	4603      	mov	r3, r0
 8000faa:	73fb      	strb	r3, [r7, #15]
    if (pdrv || !count)
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d102      	bne.n	8000fb8 <SD_disk_read+0x1c>
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d101      	bne.n	8000fbc <SD_disk_read+0x20>
        return RES_PARERR;
 8000fb8:	2304      	movs	r3, #4
 8000fba:	e051      	b.n	8001060 <SD_disk_read+0xc4>

    if (Stat & STA_NOINIT)
 8000fbc:	4b2a      	ldr	r3, [pc, #168]	; (8001068 <SD_disk_read+0xcc>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <SD_disk_read+0x32>
        return RES_NOTRDY;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	e048      	b.n	8001060 <SD_disk_read+0xc4>

    if (!(CardType & 4))
 8000fce:	4b27      	ldr	r3, [pc, #156]	; (800106c <SD_disk_read+0xd0>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	f003 0304 	and.w	r3, r3, #4
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d102      	bne.n	8000fe0 <SD_disk_read+0x44>
        sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	025b      	lsls	r3, r3, #9
 8000fde:	607b      	str	r3, [r7, #4]

    SELECT();
 8000fe0:	f7ff fd22 	bl	8000a28 <SELECT>

    if (count == 1)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d111      	bne.n	800100e <SD_disk_read+0x72>
    {
        /* 싱글 블록 읽기 */
        if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8000fea:	6879      	ldr	r1, [r7, #4]
 8000fec:	2051      	movs	r0, #81	; 0x51
 8000fee:	f7ff fe83 	bl	8000cf8 <SD_SendCmd>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d129      	bne.n	800104c <SD_disk_read+0xb0>
 8000ff8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ffc:	68b8      	ldr	r0, [r7, #8]
 8000ffe:	f7ff fdf1 	bl	8000be4 <SD_RxDataBlock>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d021      	beq.n	800104c <SD_disk_read+0xb0>
            count = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	603b      	str	r3, [r7, #0]
 800100c:	e01e      	b.n	800104c <SD_disk_read+0xb0>
    }
    else
    {
        /* 다중 블록 읽기 */
        if (SD_SendCmd(CMD18, sector) == 0)
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	2052      	movs	r0, #82	; 0x52
 8001012:	f7ff fe71 	bl	8000cf8 <SD_SendCmd>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d117      	bne.n	800104c <SD_disk_read+0xb0>
        {
            do
            {
                if (!SD_RxDataBlock(buff, 512))
 800101c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001020:	68b8      	ldr	r0, [r7, #8]
 8001022:	f7ff fddf 	bl	8000be4 <SD_RxDataBlock>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d00a      	beq.n	8001042 <SD_disk_read+0xa6>
                    break;

                buff += 512;
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001032:	60bb      	str	r3, [r7, #8]
            } while (--count);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	3b01      	subs	r3, #1
 8001038:	603b      	str	r3, [r7, #0]
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d1ed      	bne.n	800101c <SD_disk_read+0x80>
 8001040:	e000      	b.n	8001044 <SD_disk_read+0xa8>
                    break;
 8001042:	bf00      	nop

            /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
            SD_SendCmd(CMD12, 0);
 8001044:	2100      	movs	r1, #0
 8001046:	204c      	movs	r0, #76	; 0x4c
 8001048:	f7ff fe56 	bl	8000cf8 <SD_SendCmd>
        }
    }

    DESELECT();
 800104c:	f7ff fcf8 	bl	8000a40 <DESELECT>
    SPI_RxByte(); /* Idle 상태(Release DO) */
 8001050:	f7ff fd1c 	bl	8000a8c <SPI_RxByte>

    return count ? RES_ERROR : RES_OK;
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	2b00      	cmp	r3, #0
 8001058:	bf14      	ite	ne
 800105a:	2301      	movne	r3, #1
 800105c:	2300      	moveq	r3, #0
 800105e:	b2db      	uxtb	r3, r3
}
 8001060:	4618      	mov	r0, r3
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000004 	.word	0x20000004
 800106c:	200000b0 	.word	0x200000b0

08001070 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE *buff, DWORD sector, UINT count)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	60b9      	str	r1, [r7, #8]
 8001078:	607a      	str	r2, [r7, #4]
 800107a:	603b      	str	r3, [r7, #0]
 800107c:	4603      	mov	r3, r0
 800107e:	73fb      	strb	r3, [r7, #15]
    if (pdrv || !count)
 8001080:	7bfb      	ldrb	r3, [r7, #15]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d102      	bne.n	800108c <SD_disk_write+0x1c>
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d101      	bne.n	8001090 <SD_disk_write+0x20>
        return RES_PARERR;
 800108c:	2304      	movs	r3, #4
 800108e:	e06b      	b.n	8001168 <SD_disk_write+0xf8>

    if (Stat & STA_NOINIT)
 8001090:	4b37      	ldr	r3, [pc, #220]	; (8001170 <SD_disk_write+0x100>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b2db      	uxtb	r3, r3
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <SD_disk_write+0x32>
        return RES_NOTRDY;
 800109e:	2303      	movs	r3, #3
 80010a0:	e062      	b.n	8001168 <SD_disk_write+0xf8>

    if (Stat & STA_PROTECT)
 80010a2:	4b33      	ldr	r3, [pc, #204]	; (8001170 <SD_disk_write+0x100>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	f003 0304 	and.w	r3, r3, #4
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <SD_disk_write+0x44>
        return RES_WRPRT;
 80010b0:	2302      	movs	r3, #2
 80010b2:	e059      	b.n	8001168 <SD_disk_write+0xf8>

    if (!(CardType & 4))
 80010b4:	4b2f      	ldr	r3, [pc, #188]	; (8001174 <SD_disk_write+0x104>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	f003 0304 	and.w	r3, r3, #4
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d102      	bne.n	80010c6 <SD_disk_write+0x56>
        sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	025b      	lsls	r3, r3, #9
 80010c4:	607b      	str	r3, [r7, #4]

    SELECT();
 80010c6:	f7ff fcaf 	bl	8000a28 <SELECT>

    if (count == 1)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d110      	bne.n	80010f2 <SD_disk_write+0x82>
    {
        /* 싱글 블록 쓰기 */
        if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80010d0:	6879      	ldr	r1, [r7, #4]
 80010d2:	2058      	movs	r0, #88	; 0x58
 80010d4:	f7ff fe10 	bl	8000cf8 <SD_SendCmd>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d13a      	bne.n	8001154 <SD_disk_write+0xe4>
 80010de:	21fe      	movs	r1, #254	; 0xfe
 80010e0:	68b8      	ldr	r0, [r7, #8]
 80010e2:	f7ff fdb5 	bl	8000c50 <SD_TxDataBlock>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d033      	beq.n	8001154 <SD_disk_write+0xe4>
            count = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	603b      	str	r3, [r7, #0]
 80010f0:	e030      	b.n	8001154 <SD_disk_write+0xe4>
    }
    else
    {
        /* 다중 블록 쓰기 */
        if (CardType & 2)
 80010f2:	4b20      	ldr	r3, [pc, #128]	; (8001174 <SD_disk_write+0x104>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d007      	beq.n	800110e <SD_disk_write+0x9e>
        {
            SD_SendCmd(CMD55, 0);
 80010fe:	2100      	movs	r1, #0
 8001100:	2077      	movs	r0, #119	; 0x77
 8001102:	f7ff fdf9 	bl	8000cf8 <SD_SendCmd>
            SD_SendCmd(CMD23, count); /* ACMD23 */
 8001106:	6839      	ldr	r1, [r7, #0]
 8001108:	2057      	movs	r0, #87	; 0x57
 800110a:	f7ff fdf5 	bl	8000cf8 <SD_SendCmd>
        }

        if (SD_SendCmd(CMD25, sector) == 0)
 800110e:	6879      	ldr	r1, [r7, #4]
 8001110:	2059      	movs	r0, #89	; 0x59
 8001112:	f7ff fdf1 	bl	8000cf8 <SD_SendCmd>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d11b      	bne.n	8001154 <SD_disk_write+0xe4>
        {
            do
            {
                if (!SD_TxDataBlock(buff, 0xFC))
 800111c:	21fc      	movs	r1, #252	; 0xfc
 800111e:	68b8      	ldr	r0, [r7, #8]
 8001120:	f7ff fd96 	bl	8000c50 <SD_TxDataBlock>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d00a      	beq.n	8001140 <SD_disk_write+0xd0>
                    break;

                buff += 512;
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001130:	60bb      	str	r3, [r7, #8]
            } while (--count);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	3b01      	subs	r3, #1
 8001136:	603b      	str	r3, [r7, #0]
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1ee      	bne.n	800111c <SD_disk_write+0xac>
 800113e:	e000      	b.n	8001142 <SD_disk_write+0xd2>
                    break;
 8001140:	bf00      	nop

            if (!SD_TxDataBlock(0, 0xFD))
 8001142:	21fd      	movs	r1, #253	; 0xfd
 8001144:	2000      	movs	r0, #0
 8001146:	f7ff fd83 	bl	8000c50 <SD_TxDataBlock>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d101      	bne.n	8001154 <SD_disk_write+0xe4>
            {
                count = 1;
 8001150:	2301      	movs	r3, #1
 8001152:	603b      	str	r3, [r7, #0]
            }
        }
    }

    DESELECT();
 8001154:	f7ff fc74 	bl	8000a40 <DESELECT>
    SPI_RxByte();
 8001158:	f7ff fc98 	bl	8000a8c <SPI_RxByte>

    return count ? RES_ERROR : RES_OK;
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	bf14      	ite	ne
 8001162:	2301      	movne	r3, #1
 8001164:	2300      	moveq	r3, #0
 8001166:	b2db      	uxtb	r3, r3
}
 8001168:	4618      	mov	r0, r3
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000004 	.word	0x20000004
 8001174:	200000b0 	.word	0x200000b0

08001178 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b08b      	sub	sp, #44	; 0x2c
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	603a      	str	r2, [r7, #0]
 8001182:	71fb      	strb	r3, [r7, #7]
 8001184:	460b      	mov	r3, r1
 8001186:	71bb      	strb	r3, [r7, #6]
    DRESULT res;
    BYTE n, csd[16], *ptr = buff;
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	623b      	str	r3, [r7, #32]
    WORD csize;

    if (drv)
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <SD_disk_ioctl+0x1e>
        return RES_PARERR;
 8001192:	2304      	movs	r3, #4
 8001194:	e11b      	b.n	80013ce <SD_disk_ioctl+0x256>

    res = RES_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (ctrl == CTRL_POWER)
 800119c:	79bb      	ldrb	r3, [r7, #6]
 800119e:	2b05      	cmp	r3, #5
 80011a0:	d129      	bne.n	80011f6 <SD_disk_ioctl+0x7e>
    {
        switch (*ptr)
 80011a2:	6a3b      	ldr	r3, [r7, #32]
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d017      	beq.n	80011da <SD_disk_ioctl+0x62>
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	dc1f      	bgt.n	80011ee <SD_disk_ioctl+0x76>
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d002      	beq.n	80011b8 <SD_disk_ioctl+0x40>
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d00b      	beq.n	80011ce <SD_disk_ioctl+0x56>
 80011b6:	e01a      	b.n	80011ee <SD_disk_ioctl+0x76>
        {
        case 0:
            if (SD_CheckPower())
 80011b8:	f7ff fd08 	bl	8000bcc <SD_CheckPower>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <SD_disk_ioctl+0x4e>
                SD_PowerOff(); /* Power Off */
 80011c2:	f7ff fcf7 	bl	8000bb4 <SD_PowerOff>
            res = RES_OK;
 80011c6:	2300      	movs	r3, #0
 80011c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80011cc:	e0fd      	b.n	80013ca <SD_disk_ioctl+0x252>
        case 1:
            SD_PowerOn(); /* Power On */
 80011ce:	f7ff fca5 	bl	8000b1c <SD_PowerOn>
            res = RES_OK;
 80011d2:	2300      	movs	r3, #0
 80011d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80011d8:	e0f7      	b.n	80013ca <SD_disk_ioctl+0x252>
        case 2:
            *(ptr + 1) = (BYTE)SD_CheckPower();
 80011da:	6a3b      	ldr	r3, [r7, #32]
 80011dc:	1c5c      	adds	r4, r3, #1
 80011de:	f7ff fcf5 	bl	8000bcc <SD_CheckPower>
 80011e2:	4603      	mov	r3, r0
 80011e4:	7023      	strb	r3, [r4, #0]
            res = RES_OK; /* Power Check */
 80011e6:	2300      	movs	r3, #0
 80011e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80011ec:	e0ed      	b.n	80013ca <SD_disk_ioctl+0x252>
        default:
            res = RES_PARERR;
 80011ee:	2304      	movs	r3, #4
 80011f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80011f4:	e0e9      	b.n	80013ca <SD_disk_ioctl+0x252>
        }
    }
    else
    {
        if (Stat & STA_NOINIT)
 80011f6:	4b78      	ldr	r3, [pc, #480]	; (80013d8 <SD_disk_ioctl+0x260>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <SD_disk_ioctl+0x90>
            return RES_NOTRDY;
 8001204:	2303      	movs	r3, #3
 8001206:	e0e2      	b.n	80013ce <SD_disk_ioctl+0x256>

        SELECT();
 8001208:	f7ff fc0e 	bl	8000a28 <SELECT>

        switch (ctrl)
 800120c:	79bb      	ldrb	r3, [r7, #6]
 800120e:	2b0d      	cmp	r3, #13
 8001210:	f200 80cc 	bhi.w	80013ac <SD_disk_ioctl+0x234>
 8001214:	a201      	add	r2, pc, #4	; (adr r2, 800121c <SD_disk_ioctl+0xa4>)
 8001216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800121a:	bf00      	nop
 800121c:	08001317 	.word	0x08001317
 8001220:	08001255 	.word	0x08001255
 8001224:	08001307 	.word	0x08001307
 8001228:	080013ad 	.word	0x080013ad
 800122c:	080013ad 	.word	0x080013ad
 8001230:	080013ad 	.word	0x080013ad
 8001234:	080013ad 	.word	0x080013ad
 8001238:	080013ad 	.word	0x080013ad
 800123c:	080013ad 	.word	0x080013ad
 8001240:	080013ad 	.word	0x080013ad
 8001244:	080013ad 	.word	0x080013ad
 8001248:	08001329 	.word	0x08001329
 800124c:	0800134d 	.word	0x0800134d
 8001250:	08001371 	.word	0x08001371
        {
        case GET_SECTOR_COUNT:
            /* SD카드 내 Sector의 개수 (DWORD) */
            if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001254:	2100      	movs	r1, #0
 8001256:	2049      	movs	r0, #73	; 0x49
 8001258:	f7ff fd4e 	bl	8000cf8 <SD_SendCmd>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	f040 80a8 	bne.w	80013b4 <SD_disk_ioctl+0x23c>
 8001264:	f107 030c 	add.w	r3, r7, #12
 8001268:	2110      	movs	r1, #16
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff fcba 	bl	8000be4 <SD_RxDataBlock>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	f000 809e 	beq.w	80013b4 <SD_disk_ioctl+0x23c>
            {
                if ((csd[0] >> 6) == 1)
 8001278:	7b3b      	ldrb	r3, [r7, #12]
 800127a:	099b      	lsrs	r3, r3, #6
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b01      	cmp	r3, #1
 8001280:	d10e      	bne.n	80012a0 <SD_disk_ioctl+0x128>
                {
                    /* SDC ver 2.00 */
                    csize = csd[9] + ((WORD)csd[8] << 8) + 1;
 8001282:	7d7b      	ldrb	r3, [r7, #21]
 8001284:	b29a      	uxth	r2, r3
 8001286:	7d3b      	ldrb	r3, [r7, #20]
 8001288:	b29b      	uxth	r3, r3
 800128a:	021b      	lsls	r3, r3, #8
 800128c:	b29b      	uxth	r3, r3
 800128e:	4413      	add	r3, r2
 8001290:	b29b      	uxth	r3, r3
 8001292:	3301      	adds	r3, #1
 8001294:	83fb      	strh	r3, [r7, #30]
                    *(DWORD *)buff = (DWORD)csize << 10;
 8001296:	8bfb      	ldrh	r3, [r7, #30]
 8001298:	029a      	lsls	r2, r3, #10
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	e02e      	b.n	80012fe <SD_disk_ioctl+0x186>
                }
                else
                {
                    /* MMC or SDC ver 1.XX */
                    n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80012a0:	7c7b      	ldrb	r3, [r7, #17]
 80012a2:	f003 030f 	and.w	r3, r3, #15
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	7dbb      	ldrb	r3, [r7, #22]
 80012aa:	09db      	lsrs	r3, r3, #7
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	4413      	add	r3, r2
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	7d7b      	ldrb	r3, [r7, #21]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	f003 0306 	and.w	r3, r3, #6
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	4413      	add	r3, r2
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	3302      	adds	r3, #2
 80012c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80012c8:	7d3b      	ldrb	r3, [r7, #20]
 80012ca:	099b      	lsrs	r3, r3, #6
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	7cfb      	ldrb	r3, [r7, #19]
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	4413      	add	r3, r2
 80012da:	b29a      	uxth	r2, r3
 80012dc:	7cbb      	ldrb	r3, [r7, #18]
 80012de:	029b      	lsls	r3, r3, #10
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	4413      	add	r3, r2
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	3301      	adds	r3, #1
 80012ee:	83fb      	strh	r3, [r7, #30]
                    *(DWORD *)buff = (DWORD)csize << (n - 9);
 80012f0:	8bfa      	ldrh	r2, [r7, #30]
 80012f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012f6:	3b09      	subs	r3, #9
 80012f8:	409a      	lsls	r2, r3
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	601a      	str	r2, [r3, #0]
                }

                res = RES_OK;
 80012fe:	2300      	movs	r3, #0
 8001300:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 8001304:	e056      	b.n	80013b4 <SD_disk_ioctl+0x23c>

        case GET_SECTOR_SIZE:
            /* 섹터의 단위 크기 (WORD) */
            *(WORD *)buff = 512;
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	f44f 7200 	mov.w	r2, #512	; 0x200
 800130c:	801a      	strh	r2, [r3, #0]
            res = RES_OK;
 800130e:	2300      	movs	r3, #0
 8001310:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8001314:	e055      	b.n	80013c2 <SD_disk_ioctl+0x24a>

        case CTRL_SYNC:
            /* 쓰기 동기화 */
            if (SD_ReadyWait() == 0xFF)
 8001316:	f7ff fbe5 	bl	8000ae4 <SD_ReadyWait>
 800131a:	4603      	mov	r3, r0
 800131c:	2bff      	cmp	r3, #255	; 0xff
 800131e:	d14b      	bne.n	80013b8 <SD_disk_ioctl+0x240>
                res = RES_OK;
 8001320:	2300      	movs	r3, #0
 8001322:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8001326:	e047      	b.n	80013b8 <SD_disk_ioctl+0x240>

        case MMC_GET_CSD:
            /* CSD 정보 수신 (16 bytes) */
            if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001328:	2100      	movs	r1, #0
 800132a:	2049      	movs	r0, #73	; 0x49
 800132c:	f7ff fce4 	bl	8000cf8 <SD_SendCmd>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d142      	bne.n	80013bc <SD_disk_ioctl+0x244>
 8001336:	2110      	movs	r1, #16
 8001338:	6a38      	ldr	r0, [r7, #32]
 800133a:	f7ff fc53 	bl	8000be4 <SD_RxDataBlock>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d03b      	beq.n	80013bc <SD_disk_ioctl+0x244>
                res = RES_OK;
 8001344:	2300      	movs	r3, #0
 8001346:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800134a:	e037      	b.n	80013bc <SD_disk_ioctl+0x244>

        case MMC_GET_CID:
            /* CID 정보 수신 (16 bytes) */
            if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800134c:	2100      	movs	r1, #0
 800134e:	204a      	movs	r0, #74	; 0x4a
 8001350:	f7ff fcd2 	bl	8000cf8 <SD_SendCmd>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d132      	bne.n	80013c0 <SD_disk_ioctl+0x248>
 800135a:	2110      	movs	r1, #16
 800135c:	6a38      	ldr	r0, [r7, #32]
 800135e:	f7ff fc41 	bl	8000be4 <SD_RxDataBlock>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d02b      	beq.n	80013c0 <SD_disk_ioctl+0x248>
                res = RES_OK;
 8001368:	2300      	movs	r3, #0
 800136a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800136e:	e027      	b.n	80013c0 <SD_disk_ioctl+0x248>

        case MMC_GET_OCR:
            /* OCR 정보 수신 (4 bytes) */
            if (SD_SendCmd(CMD58, 0) == 0)
 8001370:	2100      	movs	r1, #0
 8001372:	207a      	movs	r0, #122	; 0x7a
 8001374:	f7ff fcc0 	bl	8000cf8 <SD_SendCmd>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d116      	bne.n	80013ac <SD_disk_ioctl+0x234>
            {
                for (n = 0; n < 4; n++)
 800137e:	2300      	movs	r3, #0
 8001380:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001384:	e00b      	b.n	800139e <SD_disk_ioctl+0x226>
                {
                    *ptr++ = SPI_RxByte();
 8001386:	6a3c      	ldr	r4, [r7, #32]
 8001388:	1c63      	adds	r3, r4, #1
 800138a:	623b      	str	r3, [r7, #32]
 800138c:	f7ff fb7e 	bl	8000a8c <SPI_RxByte>
 8001390:	4603      	mov	r3, r0
 8001392:	7023      	strb	r3, [r4, #0]
                for (n = 0; n < 4; n++)
 8001394:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001398:	3301      	adds	r3, #1
 800139a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800139e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013a2:	2b03      	cmp	r3, #3
 80013a4:	d9ef      	bls.n	8001386 <SD_disk_ioctl+0x20e>
                }

                res = RES_OK;
 80013a6:	2300      	movs	r3, #0
 80013a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }

        default:
            res = RES_PARERR;
 80013ac:	2304      	movs	r3, #4
 80013ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80013b2:	e006      	b.n	80013c2 <SD_disk_ioctl+0x24a>
            break;
 80013b4:	bf00      	nop
 80013b6:	e004      	b.n	80013c2 <SD_disk_ioctl+0x24a>
            break;
 80013b8:	bf00      	nop
 80013ba:	e002      	b.n	80013c2 <SD_disk_ioctl+0x24a>
            break;
 80013bc:	bf00      	nop
 80013be:	e000      	b.n	80013c2 <SD_disk_ioctl+0x24a>
            break;
 80013c0:	bf00      	nop
        }

        DESELECT();
 80013c2:	f7ff fb3d 	bl	8000a40 <DESELECT>
        SPI_RxByte();
 80013c6:	f7ff fb61 	bl	8000a8c <SPI_RxByte>
    }

    return res;
 80013ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	372c      	adds	r7, #44	; 0x2c
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd90      	pop	{r4, r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000004 	.word	0x20000004

080013dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	; 0x28
 80013e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
 80013f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	4b2d      	ldr	r3, [pc, #180]	; (80014ac <MX_GPIO_Init+0xd0>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a2c      	ldr	r2, [pc, #176]	; (80014ac <MX_GPIO_Init+0xd0>)
 80013fc:	f043 0304 	orr.w	r3, r3, #4
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b2a      	ldr	r3, [pc, #168]	; (80014ac <MX_GPIO_Init+0xd0>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0304 	and.w	r3, r3, #4
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	4b26      	ldr	r3, [pc, #152]	; (80014ac <MX_GPIO_Init+0xd0>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a25      	ldr	r2, [pc, #148]	; (80014ac <MX_GPIO_Init+0xd0>)
 8001418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b23      	ldr	r3, [pc, #140]	; (80014ac <MX_GPIO_Init+0xd0>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <MX_GPIO_Init+0xd0>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a1e      	ldr	r2, [pc, #120]	; (80014ac <MX_GPIO_Init+0xd0>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b1c      	ldr	r3, [pc, #112]	; (80014ac <MX_GPIO_Init+0xd0>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	4b18      	ldr	r3, [pc, #96]	; (80014ac <MX_GPIO_Init+0xd0>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a17      	ldr	r2, [pc, #92]	; (80014ac <MX_GPIO_Init+0xd0>)
 8001450:	f043 0302 	orr.w	r3, r3, #2
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b15      	ldr	r3, [pc, #84]	; (80014ac <MX_GPIO_Init+0xd0>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8001462:	2200      	movs	r2, #0
 8001464:	2120      	movs	r1, #32
 8001466:	4812      	ldr	r0, [pc, #72]	; (80014b0 <MX_GPIO_Init+0xd4>)
 8001468:	f001 fea8 	bl	80031bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800146c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001470:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001472:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001476:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	4619      	mov	r1, r3
 8001482:	480b      	ldr	r0, [pc, #44]	; (80014b0 <MX_GPIO_Init+0xd4>)
 8001484:	f001 fc32 	bl	8002cec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8001488:	2320      	movs	r3, #32
 800148a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148c:	2301      	movs	r3, #1
 800148e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001494:	2300      	movs	r3, #0
 8001496:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	4619      	mov	r1, r3
 800149e:	4804      	ldr	r0, [pc, #16]	; (80014b0 <MX_GPIO_Init+0xd4>)
 80014a0:	f001 fc24 	bl	8002cec <HAL_GPIO_Init>

}
 80014a4:	bf00      	nop
 80014a6:	3728      	adds	r7, #40	; 0x28
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40020800 	.word	0x40020800

080014b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014b8:	f000 fd3a 	bl	8001f30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014bc:	f000 f8e0 	bl	8001680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014c0:	f7ff ff8c 	bl	80013dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014c4:	f000 fc7a 	bl	8001dbc <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80014c8:	f000 fa9c 	bl	8001a04 <MX_SPI1_Init>
  MX_FATFS_Init();
 80014cc:	f003 fc68 	bl	8004da0 <MX_FATFS_Init>
  MX_CRC_Init();
 80014d0:	f7ff fa5a 	bl	8000988 <MX_CRC_Init>

	/* Close file */
	f_close(&fil);
#endif

	printf("\r\n************** BOOTLOADER **************\r\n");
 80014d4:	4856      	ldr	r0, [pc, #344]	; (8001630 <main+0x17c>)
 80014d6:	f006 fca5 	bl	8007e24 <puts>
	printf("****************************************\r\n");
 80014da:	4856      	ldr	r0, [pc, #344]	; (8001634 <main+0x180>)
 80014dc:	f006 fca2 	bl	8007e24 <puts>
	fresult = f_mount(&fs, "", 0);
 80014e0:	2200      	movs	r2, #0
 80014e2:	4955      	ldr	r1, [pc, #340]	; (8001638 <main+0x184>)
 80014e4:	4855      	ldr	r0, [pc, #340]	; (800163c <main+0x188>)
 80014e6:	f005 fea9 	bl	800723c <f_mount>
 80014ea:	4603      	mov	r3, r0
 80014ec:	461a      	mov	r2, r3
 80014ee:	4b54      	ldr	r3, [pc, #336]	; (8001640 <main+0x18c>)
 80014f0:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) {
 80014f2:	4b53      	ldr	r3, [pc, #332]	; (8001640 <main+0x18c>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d007      	beq.n	800150a <main+0x56>
		printf("Error when mounting SD card.\r\n");
 80014fa:	4852      	ldr	r0, [pc, #328]	; (8001644 <main+0x190>)
 80014fc:	f006 fc92 	bl	8007e24 <puts>
		error = -1;
 8001500:	4b51      	ldr	r3, [pc, #324]	; (8001648 <main+0x194>)
 8001502:	f04f 32ff 	mov.w	r2, #4294967295
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	e002      	b.n	8001510 <main+0x5c>
	} else {
		printf("SD card mounted successfully.\r\n");
 800150a:	4850      	ldr	r0, [pc, #320]	; (800164c <main+0x198>)
 800150c:	f006 fc8a 	bl	8007e24 <puts>
	}
	HAL_Delay(10);
 8001510:	200a      	movs	r0, #10
 8001512:	f000 fdb3 	bl	800207c <HAL_Delay>


	printf("****************************************\r\n");
 8001516:	4847      	ldr	r0, [pc, #284]	; (8001634 <main+0x180>)
 8001518:	f006 fc84 	bl	8007e24 <puts>
	printf("Entering Bootloader (flashing GREEN LED)...\r\n");
 800151c:	484c      	ldr	r0, [pc, #304]	; (8001650 <main+0x19c>)
 800151e:	f006 fc81 	bl	8007e24 <puts>
	HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8001522:	2120      	movs	r1, #32
 8001524:	484b      	ldr	r0, [pc, #300]	; (8001654 <main+0x1a0>)
 8001526:	f001 fe62 	bl	80031ee <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 800152a:	20fa      	movs	r0, #250	; 0xfa
 800152c:	f000 fda6 	bl	800207c <HAL_Delay>
	HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8001530:	2120      	movs	r1, #32
 8001532:	4848      	ldr	r0, [pc, #288]	; (8001654 <main+0x1a0>)
 8001534:	f001 fe5b 	bl	80031ee <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 8001538:	20fa      	movs	r0, #250	; 0xfa
 800153a:	f000 fd9f 	bl	800207c <HAL_Delay>
	HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 800153e:	2120      	movs	r1, #32
 8001540:	4844      	ldr	r0, [pc, #272]	; (8001654 <main+0x1a0>)
 8001542:	f001 fe54 	bl	80031ee <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 8001546:	20fa      	movs	r0, #250	; 0xfa
 8001548:	f000 fd98 	bl	800207c <HAL_Delay>
	HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 800154c:	2120      	movs	r1, #32
 800154e:	4841      	ldr	r0, [pc, #260]	; (8001654 <main+0x1a0>)
 8001550:	f001 fe4d 	bl	80031ee <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 8001554:	20fa      	movs	r0, #250	; 0xfa
 8001556:	f000 fd91 	bl	800207c <HAL_Delay>
	HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 800155a:	2120      	movs	r1, #32
 800155c:	483d      	ldr	r0, [pc, #244]	; (8001654 <main+0x1a0>)
 800155e:	f001 fe46 	bl	80031ee <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 8001562:	20fa      	movs	r0, #250	; 0xfa
 8001564:	f000 fd8a 	bl	800207c <HAL_Delay>
	HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8001568:	2120      	movs	r1, #32
 800156a:	483a      	ldr	r0, [pc, #232]	; (8001654 <main+0x1a0>)
 800156c:	f001 fe3f 	bl	80031ee <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 8001570:	20fa      	movs	r0, #250	; 0xfa
 8001572:	f000 fd83 	bl	800207c <HAL_Delay>
	HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8001576:	2120      	movs	r1, #32
 8001578:	4836      	ldr	r0, [pc, #216]	; (8001654 <main+0x1a0>)
 800157a:	f001 fe38 	bl	80031ee <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 800157e:	20fa      	movs	r0, #250	; 0xfa
 8001580:	f000 fd7c 	bl	800207c <HAL_Delay>
	HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8001584:	2120      	movs	r1, #32
 8001586:	4833      	ldr	r0, [pc, #204]	; (8001654 <main+0x1a0>)
 8001588:	f001 fe31 	bl	80031ee <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 800158c:	20fa      	movs	r0, #250	; 0xfa
 800158e:	f000 fd75 	bl	800207c <HAL_Delay>
	Enter_Bootloader();
 8001592:	f000 f8ff 	bl	8001794 <Enter_Bootloader>

	// CHECK FOR APPLICATION
	if (Bootloader_CheckForApplication() == 0) {
 8001596:	f7ff f9c7 	bl	8000928 <Bootloader_CheckForApplication>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d112      	bne.n	80015c6 <main+0x112>
		printf("Application found in FLASH.\r\n");
 80015a0:	482d      	ldr	r0, [pc, #180]	; (8001658 <main+0x1a4>)
 80015a2:	f006 fc3f 	bl	8007e24 <puts>
		// VERIFY CHECKSUM:
		if (Bootloader_VerifyChecksum() != 0) {
 80015a6:	f7ff f957 	bl	8000858 <Bootloader_VerifyChecksum>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d007      	beq.n	80015c0 <main+0x10c>
			printf("Checksum error.\r\n");
 80015b0:	482a      	ldr	r0, [pc, #168]	; (800165c <main+0x1a8>)
 80015b2:	f006 fc37 	bl	8007e24 <puts>
			error = -3;
 80015b6:	4b24      	ldr	r3, [pc, #144]	; (8001648 <main+0x194>)
 80015b8:	f06f 0202 	mvn.w	r2, #2
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	e002      	b.n	80015c6 <main+0x112>
		} else {
			printf("Checksum OK.\r\n");
 80015c0:	4827      	ldr	r0, [pc, #156]	; (8001660 <main+0x1ac>)
 80015c2:	f006 fc2f 	bl	8007e24 <puts>
	HAL_GPIO_DeInit(GPIOB, &GPIO_InitStruct);
	HAL_GPIO_DeInit(GPIOD, &GPIO_InitStruct);
*/


	HAL_SPI_DeInit(&hspi1);
 80015c6:	4827      	ldr	r0, [pc, #156]	; (8001664 <main+0x1b0>)
 80015c8:	f002 fc1b 	bl	8003e02 <HAL_SPI_DeInit>
	//	MX_FATFS_Init(); deinitje?
	HAL_CRC_DeInit(&hcrc);
 80015cc:	4826      	ldr	r0, [pc, #152]	; (8001668 <main+0x1b4>)
 80015ce:	f000 fe7a 	bl	80022c6 <HAL_CRC_DeInit>

	__HAL_RCC_GPIOC_CLK_DISABLE();
 80015d2:	4b26      	ldr	r3, [pc, #152]	; (800166c <main+0x1b8>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	4a25      	ldr	r2, [pc, #148]	; (800166c <main+0x1b8>)
 80015d8:	f023 0304 	bic.w	r3, r3, #4
 80015dc:	6313      	str	r3, [r2, #48]	; 0x30
	__HAL_RCC_GPIOH_CLK_DISABLE();
 80015de:	4b23      	ldr	r3, [pc, #140]	; (800166c <main+0x1b8>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	4a22      	ldr	r2, [pc, #136]	; (800166c <main+0x1b8>)
 80015e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
	__HAL_RCC_GPIOA_CLK_DISABLE();
 80015ea:	4b20      	ldr	r3, [pc, #128]	; (800166c <main+0x1b8>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a1f      	ldr	r2, [pc, #124]	; (800166c <main+0x1b8>)
 80015f0:	f023 0301 	bic.w	r3, r3, #1
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
	__HAL_RCC_GPIOB_CLK_DISABLE();
 80015f6:	4b1d      	ldr	r3, [pc, #116]	; (800166c <main+0x1b8>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	4a1c      	ldr	r2, [pc, #112]	; (800166c <main+0x1b8>)
 80015fc:	f023 0302 	bic.w	r3, r3, #2
 8001600:	6313      	str	r3, [r2, #48]	; 0x30

	if (error == 0) {
 8001602:	4b11      	ldr	r3, [pc, #68]	; (8001648 <main+0x194>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d108      	bne.n	800161c <main+0x168>
		printf("Launching application in 3 seconds...\r\n");
 800160a:	4819      	ldr	r0, [pc, #100]	; (8001670 <main+0x1bc>)
 800160c:	f006 fc0a 	bl	8007e24 <puts>
		HAL_Delay(3000);
 8001610:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001614:	f000 fd32 	bl	800207c <HAL_Delay>
		Bootloader_JumpToApplication();
 8001618:	f7ff f8f0 	bl	80007fc <Bootloader_JumpToApplication>
	}
	printf("\r\nWe should never get to here.\r\n");
 800161c:	4815      	ldr	r0, [pc, #84]	; (8001674 <main+0x1c0>)
 800161e:	f006 fc01 	bl	8007e24 <puts>
	printf("Some error must have happened.\r\n");
 8001622:	4815      	ldr	r0, [pc, #84]	; (8001678 <main+0x1c4>)
 8001624:	f006 fbfe 	bl	8007e24 <puts>
	HAL_UART_DeInit(&huart2);
 8001628:	4814      	ldr	r0, [pc, #80]	; (800167c <main+0x1c8>)
 800162a:	f003 f816 	bl	800465a <HAL_UART_DeInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800162e:	e7fe      	b.n	800162e <main+0x17a>
 8001630:	08008d90 	.word	0x08008d90
 8001634:	08008dbc 	.word	0x08008dbc
 8001638:	08008de8 	.word	0x08008de8
 800163c:	200000b4 	.word	0x200000b4
 8001640:	200010ec 	.word	0x200010ec
 8001644:	08008dec 	.word	0x08008dec
 8001648:	2000315c 	.word	0x2000315c
 800164c:	08008e0c 	.word	0x08008e0c
 8001650:	08008e2c 	.word	0x08008e2c
 8001654:	40020800 	.word	0x40020800
 8001658:	08008e5c 	.word	0x08008e5c
 800165c:	08008e7c 	.word	0x08008e7c
 8001660:	08008e90 	.word	0x08008e90
 8001664:	20003160 	.word	0x20003160
 8001668:	200000a8 	.word	0x200000a8
 800166c:	40023800 	.word	0x40023800
 8001670:	08008ea0 	.word	0x08008ea0
 8001674:	08008ec8 	.word	0x08008ec8
 8001678:	08008ee8 	.word	0x08008ee8
 800167c:	200031c0 	.word	0x200031c0

08001680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b094      	sub	sp, #80	; 0x50
 8001684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001686:	f107 0320 	add.w	r3, r7, #32
 800168a:	2230      	movs	r2, #48	; 0x30
 800168c:	2100      	movs	r1, #0
 800168e:	4618      	mov	r0, r3
 8001690:	f006 fb3a 	bl	8007d08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001694:	f107 030c 	add.w	r3, r7, #12
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a4:	2300      	movs	r3, #0
 80016a6:	60bb      	str	r3, [r7, #8]
 80016a8:	4b29      	ldr	r3, [pc, #164]	; (8001750 <SystemClock_Config+0xd0>)
 80016aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ac:	4a28      	ldr	r2, [pc, #160]	; (8001750 <SystemClock_Config+0xd0>)
 80016ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b2:	6413      	str	r3, [r2, #64]	; 0x40
 80016b4:	4b26      	ldr	r3, [pc, #152]	; (8001750 <SystemClock_Config+0xd0>)
 80016b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80016c0:	2300      	movs	r3, #0
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	4b23      	ldr	r3, [pc, #140]	; (8001754 <SystemClock_Config+0xd4>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80016cc:	4a21      	ldr	r2, [pc, #132]	; (8001754 <SystemClock_Config+0xd4>)
 80016ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016d2:	6013      	str	r3, [r2, #0]
 80016d4:	4b1f      	ldr	r3, [pc, #124]	; (8001754 <SystemClock_Config+0xd4>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016dc:	607b      	str	r3, [r7, #4]
 80016de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016e0:	2302      	movs	r3, #2
 80016e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016e4:	2301      	movs	r3, #1
 80016e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016e8:	2310      	movs	r3, #16
 80016ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ec:	2302      	movs	r3, #2
 80016ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016f0:	2300      	movs	r3, #0
 80016f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80016f4:	2310      	movs	r3, #16
 80016f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80016f8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80016fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80016fe:	2304      	movs	r3, #4
 8001700:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001702:	2307      	movs	r3, #7
 8001704:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001706:	f107 0320 	add.w	r3, r7, #32
 800170a:	4618      	mov	r0, r3
 800170c:	f001 fd8a 	bl	8003224 <HAL_RCC_OscConfig>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001716:	f000 f96f 	bl	80019f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800171a:	230f      	movs	r3, #15
 800171c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800171e:	2302      	movs	r3, #2
 8001720:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001726:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800172a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800172c:	2300      	movs	r3, #0
 800172e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001730:	f107 030c 	add.w	r3, r7, #12
 8001734:	2102      	movs	r1, #2
 8001736:	4618      	mov	r0, r3
 8001738:	f001 ffec 	bl	8003714 <HAL_RCC_ClockConfig>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001742:	f000 f959 	bl	80019f8 <Error_Handler>
  }
}
 8001746:	bf00      	nop
 8001748:	3750      	adds	r7, #80	; 0x50
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40023800 	.word	0x40023800
 8001754:	40007000 	.word	0x40007000

08001758 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch) {
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8001760:	1d39      	adds	r1, r7, #4
 8001762:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001766:	2201      	movs	r2, #1
 8001768:	4803      	ldr	r0, [pc, #12]	; (8001778 <__io_putchar+0x20>)
 800176a:	f002 ffa5 	bl	80046b8 <HAL_UART_Transmit>
	return ch;
 800176e:	687b      	ldr	r3, [r7, #4]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	200031c0 	.word	0x200031c0

0800177c <SD_Eject>:


/* USER CODE BEGIN 4 */
void SD_Eject(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
    f_mount(NULL, (TCHAR const *)SDPath, 0);
 8001780:	2200      	movs	r2, #0
 8001782:	4903      	ldr	r1, [pc, #12]	; (8001790 <SD_Eject+0x14>)
 8001784:	2000      	movs	r0, #0
 8001786:	f005 fd59 	bl	800723c <f_mount>
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	200010f0 	.word	0x200010f0

08001794 <Enter_Bootloader>:
    // SDCARD_OFF();
}

/*** Bootloader ***************************************************************/
void Enter_Bootloader(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b090      	sub	sp, #64	; 0x40
 8001798:	af00      	add	r7, sp, #0
    UINT num;
    uint8_t status;
    uint64_t data;
    uint32_t cntr;
    uint32_t addr;
    char msg[40] = {0x00};
 800179a:	2300      	movs	r3, #0
 800179c:	603b      	str	r3, [r7, #0]
 800179e:	1d3b      	adds	r3, r7, #4
 80017a0:	2224      	movs	r2, #36	; 0x24
 80017a2:	2100      	movs	r1, #0
 80017a4:	4618      	mov	r0, r3
 80017a6:	f006 faaf 	bl	8007d08 <memset>

    /* Check for flash write protection */
    if (FLASH_If_GetWriteProtectionStatus() & FLASHIF_PROTECTION_WRPENABLED)
 80017aa:	f7fe ff70 	bl	800068e <FLASH_If_GetWriteProtectionStatus>
 80017ae:	4603      	mov	r3, r0
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d005      	beq.n	80017c4 <Enter_Bootloader+0x30>
    {
        printf("Application space in flash is write protected. Disabling write protection and generating system reset...\r\n");
 80017b8:	487a      	ldr	r0, [pc, #488]	; (80019a4 <Enter_Bootloader+0x210>)
 80017ba:	f006 fb33 	bl	8007e24 <puts>
        FLASH_If_WriteProtectionConfig(FLASHIF_WRP_DISABLE);
 80017be:	2001      	movs	r0, #1
 80017c0:	f7fe ff81 	bl	80006c6 <FLASH_If_WriteProtectionConfig>
    }

    // Mount SD card
    fr = f_mount(&SDFatFs, (TCHAR const *)SDPath, 1);
 80017c4:	2201      	movs	r2, #1
 80017c6:	4978      	ldr	r1, [pc, #480]	; (80019a8 <Enter_Bootloader+0x214>)
 80017c8:	4878      	ldr	r0, [pc, #480]	; (80019ac <Enter_Bootloader+0x218>)
 80017ca:	f005 fd37 	bl	800723c <f_mount>
 80017ce:	4603      	mov	r3, r0
 80017d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (fr != FR_OK)
 80017d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d006      	beq.n	80017ea <Enter_Bootloader+0x56>
    {
        // f_mount failed
        printf("SD card cannot be mounted. FatFs error code: %u\r\n", fr);
 80017dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80017e0:	4619      	mov	r1, r3
 80017e2:	4873      	ldr	r0, [pc, #460]	; (80019b0 <Enter_Bootloader+0x21c>)
 80017e4:	f006 fa98 	bl	8007d18 <iprintf>
        return;
 80017e8:	e0d8      	b.n	800199c <Enter_Bootloader+0x208>
    }
    printf("SD mounted.\r\n");
 80017ea:	4872      	ldr	r0, [pc, #456]	; (80019b4 <Enter_Bootloader+0x220>)
 80017ec:	f006 fb1a 	bl	8007e24 <puts>

    // Open file for programming
    fr = f_open(&SDFile, "application.bin", FA_READ);
 80017f0:	2201      	movs	r2, #1
 80017f2:	4971      	ldr	r1, [pc, #452]	; (80019b8 <Enter_Bootloader+0x224>)
 80017f4:	4871      	ldr	r0, [pc, #452]	; (80019bc <Enter_Bootloader+0x228>)
 80017f6:	f005 fd67 	bl	80072c8 <f_open>
 80017fa:	4603      	mov	r3, r0
 80017fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (fr != FR_OK)
 8001800:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001804:	2b00      	cmp	r3, #0
 8001806:	d011      	beq.n	800182c <Enter_Bootloader+0x98>
    {
        // f_open failed
        //printf("File cannot be opened. FatFs error code: %u\r\n", fr);

		printf("Error when opening file.\r\n");
 8001808:	486d      	ldr	r0, [pc, #436]	; (80019c0 <Enter_Bootloader+0x22c>)
 800180a:	f006 fb0b 	bl	8007e24 <puts>

		printf("Maybe there is no file on SD card,\r\nas production.bin is flashed.\r\n");
 800180e:	486d      	ldr	r0, [pc, #436]	; (80019c4 <Enter_Bootloader+0x230>)
 8001810:	f006 fb08 	bl	8007e24 <puts>
		error = -2;
 8001814:	4b6c      	ldr	r3, [pc, #432]	; (80019c8 <Enter_Bootloader+0x234>)
 8001816:	f06f 0201 	mvn.w	r2, #1
 800181a:	601a      	str	r2, [r3, #0]


        SD_Eject();
 800181c:	f7ff ffae 	bl	800177c <SD_Eject>
        printf("SD ejected.\r\n");
 8001820:	486a      	ldr	r0, [pc, #424]	; (80019cc <Enter_Bootloader+0x238>)
 8001822:	f006 faff 	bl	8007e24 <puts>


        Bootloader_JumpToApplication();
 8001826:	f7fe ffe9 	bl	80007fc <Bootloader_JumpToApplication>

        return;
 800182a:	e0b7      	b.n	800199c <Enter_Bootloader+0x208>
    }
    printf("Software found on SD.\r\n");
 800182c:	4868      	ldr	r0, [pc, #416]	; (80019d0 <Enter_Bootloader+0x23c>)
 800182e:	f006 faf9 	bl	8007e24 <puts>
    }
    printf("App size OK.\r\n");
    */

    // Step 1: Init Bootloader and Flash
    FLASH_If_Init();
 8001832:	f7fe fea7 	bl	8000584 <FLASH_If_Init>

    // Step 2: Erase Flash
    printf("Erasing flash...\r\n");
 8001836:	4867      	ldr	r0, [pc, #412]	; (80019d4 <Enter_Bootloader+0x240>)
 8001838:	f006 faf4 	bl	8007e24 <puts>
    FLASH_If_Erase(USER_START_ADDRESS);
 800183c:	4866      	ldr	r0, [pc, #408]	; (80019d8 <Enter_Bootloader+0x244>)
 800183e:	f7fe feaf 	bl	80005a0 <FLASH_If_Erase>
    printf("Flash erase finished.\r\n");
 8001842:	4866      	ldr	r0, [pc, #408]	; (80019dc <Enter_Bootloader+0x248>)
 8001844:	f006 faee 	bl	8007e24 <puts>

    // Step 3: Programming
    printf("Starting programming...\r\n");
 8001848:	4865      	ldr	r0, [pc, #404]	; (80019e0 <Enter_Bootloader+0x24c>)
 800184a:	f006 faeb 	bl	8007e24 <puts>
    cntr = 0;
 800184e:	2300      	movs	r3, #0
 8001850:	63fb      	str	r3, [r7, #60]	; 0x3c

    FLASH_If_FlashBegin();
 8001852:	f7fe fedd 	bl	8000610 <FLASH_If_FlashBegin>
    do
    {
        data = 0xFFFFFFFFFFFFFFFF;
 8001856:	f04f 32ff 	mov.w	r2, #4294967295
 800185a:	f04f 33ff 	mov.w	r3, #4294967295
 800185e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        fr = f_read(&SDFile, &data, 4, &num);
 8001862:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001866:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800186a:	2204      	movs	r2, #4
 800186c:	4853      	ldr	r0, [pc, #332]	; (80019bc <Enter_Bootloader+0x228>)
 800186e:	f005 fef7 	bl	8007660 <f_read>
 8001872:	4603      	mov	r3, r0
 8001874:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if (num)
 8001878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800187a:	2b00      	cmp	r3, #0
 800187c:	d020      	beq.n	80018c0 <Enter_Bootloader+0x12c>
        {
            status = FLASH_If_Write(data);
 800187e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001882:	4613      	mov	r3, r2
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fed1 	bl	800062c <FLASH_If_Write>
 800188a:	4603      	mov	r3, r0
 800188c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
            if (status == FLASHIF_OK)
 8001890:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001894:	2b00      	cmp	r3, #0
 8001896:	d103      	bne.n	80018a0 <Enter_Bootloader+0x10c>
            {
                cntr++;
 8001898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800189a:	3301      	adds	r3, #1
 800189c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800189e:	e00f      	b.n	80018c0 <Enter_Bootloader+0x12c>
            }
            else
            {
                printf(msg, "Programming error at: %lu byte\r\n", (cntr * 8));
 80018a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018a2:	00da      	lsls	r2, r3, #3
 80018a4:	463b      	mov	r3, r7
 80018a6:	494f      	ldr	r1, [pc, #316]	; (80019e4 <Enter_Bootloader+0x250>)
 80018a8:	4618      	mov	r0, r3
 80018aa:	f006 fa35 	bl	8007d18 <iprintf>
                f_close(&SDFile);
 80018ae:	4843      	ldr	r0, [pc, #268]	; (80019bc <Enter_Bootloader+0x228>)
 80018b0:	f006 f8b3 	bl	8007a1a <f_close>
                SD_Eject();
 80018b4:	f7ff ff62 	bl	800177c <SD_Eject>
                printf("SD ejected.\r\n");
 80018b8:	4844      	ldr	r0, [pc, #272]	; (80019cc <Enter_Bootloader+0x238>)
 80018ba:	f006 fab3 	bl	8007e24 <puts>
                return;
 80018be:	e06d      	b.n	800199c <Enter_Bootloader+0x208>
            }
        }
    } while ((fr == FR_OK) && (num > 0));
 80018c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d102      	bne.n	80018ce <Enter_Bootloader+0x13a>
 80018c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1c3      	bne.n	8001856 <Enter_Bootloader+0xc2>

    // Step 4: Finalize Programming
    FLASH_If_FlashEnd();
 80018ce:	f7fe fed7 	bl	8000680 <FLASH_If_FlashEnd>

    f_close(&SDFile);
 80018d2:	483a      	ldr	r0, [pc, #232]	; (80019bc <Enter_Bootloader+0x228>)
 80018d4:	f006 f8a1 	bl	8007a1a <f_close>
    printf("Programming finished. Flashed: %lu bytes.\r\n", (cntr * 4));
 80018d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4619      	mov	r1, r3
 80018de:	4842      	ldr	r0, [pc, #264]	; (80019e8 <Enter_Bootloader+0x254>)
 80018e0:	f006 fa1a 	bl	8007d18 <iprintf>

    // Open file for verification
    fr = f_open(&SDFile, "application.bin", FA_READ);
 80018e4:	2201      	movs	r2, #1
 80018e6:	4934      	ldr	r1, [pc, #208]	; (80019b8 <Enter_Bootloader+0x224>)
 80018e8:	4834      	ldr	r0, [pc, #208]	; (80019bc <Enter_Bootloader+0x228>)
 80018ea:	f005 fced 	bl	80072c8 <f_open>
 80018ee:	4603      	mov	r3, r0
 80018f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (fr != FR_OK)
 80018f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d00b      	beq.n	8001914 <Enter_Bootloader+0x180>
    {
        // f_open failed
        printf("File cannot be opened. FatFs error code: %u\r\n", fr);
 80018fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001900:	4619      	mov	r1, r3
 8001902:	483a      	ldr	r0, [pc, #232]	; (80019ec <Enter_Bootloader+0x258>)
 8001904:	f006 fa08 	bl	8007d18 <iprintf>

        SD_Eject();
 8001908:	f7ff ff38 	bl	800177c <SD_Eject>
        printf("SD ejected.\r\n");
 800190c:	482f      	ldr	r0, [pc, #188]	; (80019cc <Enter_Bootloader+0x238>)
 800190e:	f006 fa89 	bl	8007e24 <puts>
        return;
 8001912:	e043      	b.n	800199c <Enter_Bootloader+0x208>
    }

    // Step 5: Verify Flash Content
    addr = USER_START_ADDRESS;
 8001914:	4b30      	ldr	r3, [pc, #192]	; (80019d8 <Enter_Bootloader+0x244>)
 8001916:	63bb      	str	r3, [r7, #56]	; 0x38
    cntr = 0;
 8001918:	2300      	movs	r3, #0
 800191a:	63fb      	str	r3, [r7, #60]	; 0x3c
    do
    {
        data = 0xFFFFFFFFFFFFFFFF;
 800191c:	f04f 32ff 	mov.w	r2, #4294967295
 8001920:	f04f 33ff 	mov.w	r3, #4294967295
 8001924:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        fr = f_read(&SDFile, &data, 4, &num);
 8001928:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800192c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001930:	2204      	movs	r2, #4
 8001932:	4822      	ldr	r0, [pc, #136]	; (80019bc <Enter_Bootloader+0x228>)
 8001934:	f005 fe94 	bl	8007660 <f_read>
 8001938:	4603      	mov	r3, r0
 800193a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if (num)
 800193e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001940:	2b00      	cmp	r3, #0
 8001942:	d01c      	beq.n	800197e <Enter_Bootloader+0x1ea>
        {
            if (*(uint32_t *)addr == (uint32_t)data)
 8001944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001946:	6819      	ldr	r1, [r3, #0]
 8001948:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800194c:	4613      	mov	r3, r2
 800194e:	4299      	cmp	r1, r3
 8001950:	d106      	bne.n	8001960 <Enter_Bootloader+0x1cc>
            {
                addr += 4;
 8001952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001954:	3304      	adds	r3, #4
 8001956:	63bb      	str	r3, [r7, #56]	; 0x38
                cntr++;
 8001958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800195a:	3301      	adds	r3, #1
 800195c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800195e:	e00e      	b.n	800197e <Enter_Bootloader+0x1ea>
            }
            else
            {
                printf("Verification error at: %lu byte.\r\n", (cntr * 4));
 8001960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	4619      	mov	r1, r3
 8001966:	4822      	ldr	r0, [pc, #136]	; (80019f0 <Enter_Bootloader+0x25c>)
 8001968:	f006 f9d6 	bl	8007d18 <iprintf>
                f_close(&SDFile);
 800196c:	4813      	ldr	r0, [pc, #76]	; (80019bc <Enter_Bootloader+0x228>)
 800196e:	f006 f854 	bl	8007a1a <f_close>
                SD_Eject();
 8001972:	f7ff ff03 	bl	800177c <SD_Eject>
                printf("SD ejected.\r\n");
 8001976:	4815      	ldr	r0, [pc, #84]	; (80019cc <Enter_Bootloader+0x238>)
 8001978:	f006 fa54 	bl	8007e24 <puts>
                return;
 800197c:	e00e      	b.n	800199c <Enter_Bootloader+0x208>
            }
        }
    } while ((fr == FR_OK) && (num > 0));
 800197e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001982:	2b00      	cmp	r3, #0
 8001984:	d102      	bne.n	800198c <Enter_Bootloader+0x1f8>
 8001986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1c7      	bne.n	800191c <Enter_Bootloader+0x188>
    printf("Verification passed.\r\n");
 800198c:	4819      	ldr	r0, [pc, #100]	; (80019f4 <Enter_Bootloader+0x260>)
 800198e:	f006 fa49 	bl	8007e24 <puts>

    // Eject SD card
    SD_Eject();
 8001992:	f7ff fef3 	bl	800177c <SD_Eject>
    printf("SD ejected.\r\n");
 8001996:	480d      	ldr	r0, [pc, #52]	; (80019cc <Enter_Bootloader+0x238>)
 8001998:	f006 fa44 	bl	8007e24 <puts>
    if (FLASH_If_WriteProtectionConfig(FLASHIF_WRP_ENABLE) != FLASHIF_OK)
    {
        printf("Failed to enable write protection. Exiting Bootloader.\r\n");
    }
    */
}
 800199c:	3740      	adds	r7, #64	; 0x40
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	08008f08 	.word	0x08008f08
 80019a8:	200010f0 	.word	0x200010f0
 80019ac:	200010f4 	.word	0x200010f4
 80019b0:	08008f74 	.word	0x08008f74
 80019b4:	08008fa8 	.word	0x08008fa8
 80019b8:	08008fb8 	.word	0x08008fb8
 80019bc:	2000212c 	.word	0x2000212c
 80019c0:	08008fc8 	.word	0x08008fc8
 80019c4:	08008fe4 	.word	0x08008fe4
 80019c8:	2000315c 	.word	0x2000315c
 80019cc:	08009028 	.word	0x08009028
 80019d0:	08009038 	.word	0x08009038
 80019d4:	08009050 	.word	0x08009050
 80019d8:	08040000 	.word	0x08040000
 80019dc:	08009064 	.word	0x08009064
 80019e0:	0800907c 	.word	0x0800907c
 80019e4:	08009098 	.word	0x08009098
 80019e8:	080090bc 	.word	0x080090bc
 80019ec:	080090e8 	.word	0x080090e8
 80019f0:	08009118 	.word	0x08009118
 80019f4:	0800913c 	.word	0x0800913c

080019f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80019fc:	b672      	cpsid	i
}
 80019fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001a00:	e7fe      	b.n	8001a00 <Error_Handler+0x8>
	...

08001a04 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001a08:	4b17      	ldr	r3, [pc, #92]	; (8001a68 <MX_SPI1_Init+0x64>)
 8001a0a:	4a18      	ldr	r2, [pc, #96]	; (8001a6c <MX_SPI1_Init+0x68>)
 8001a0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a0e:	4b16      	ldr	r3, [pc, #88]	; (8001a68 <MX_SPI1_Init+0x64>)
 8001a10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a16:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <MX_SPI1_Init+0x64>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a1c:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <MX_SPI1_Init+0x64>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a22:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <MX_SPI1_Init+0x64>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a28:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <MX_SPI1_Init+0x64>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <MX_SPI1_Init+0x64>)
 8001a30:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001a34:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001a36:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <MX_SPI1_Init+0x64>)
 8001a38:	2218      	movs	r2, #24
 8001a3a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a3c:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <MX_SPI1_Init+0x64>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a42:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <MX_SPI1_Init+0x64>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a48:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <MX_SPI1_Init+0x64>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a4e:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <MX_SPI1_Init+0x64>)
 8001a50:	220a      	movs	r2, #10
 8001a52:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a54:	4804      	ldr	r0, [pc, #16]	; (8001a68 <MX_SPI1_Init+0x64>)
 8001a56:	f002 f94b 	bl	8003cf0 <HAL_SPI_Init>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001a60:	f7ff ffca 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a64:	bf00      	nop
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20003160 	.word	0x20003160
 8001a6c:	40013000 	.word	0x40013000

08001a70 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08a      	sub	sp, #40	; 0x28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	f107 0314 	add.w	r3, r7, #20
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a19      	ldr	r2, [pc, #100]	; (8001af4 <HAL_SPI_MspInit+0x84>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d12b      	bne.n	8001aea <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	4b18      	ldr	r3, [pc, #96]	; (8001af8 <HAL_SPI_MspInit+0x88>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9a:	4a17      	ldr	r2, [pc, #92]	; (8001af8 <HAL_SPI_MspInit+0x88>)
 8001a9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8001aa2:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <HAL_SPI_MspInit+0x88>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aaa:	613b      	str	r3, [r7, #16]
 8001aac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <HAL_SPI_MspInit+0x88>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	4a10      	ldr	r2, [pc, #64]	; (8001af8 <HAL_SPI_MspInit+0x88>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	6313      	str	r3, [r2, #48]	; 0x30
 8001abe:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <HAL_SPI_MspInit+0x88>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001aca:	23f0      	movs	r3, #240	; 0xf0
 8001acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ada:	2305      	movs	r3, #5
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ade:	f107 0314 	add.w	r3, r7, #20
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4805      	ldr	r0, [pc, #20]	; (8001afc <HAL_SPI_MspInit+0x8c>)
 8001ae6:	f001 f901 	bl	8002cec <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001aea:	bf00      	nop
 8001aec:	3728      	adds	r7, #40	; 0x28
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40013000 	.word	0x40013000
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40020000 	.word	0x40020000

08001b00 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a08      	ldr	r2, [pc, #32]	; (8001b30 <HAL_SPI_MspDeInit+0x30>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d109      	bne.n	8001b26 <HAL_SPI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001b12:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <HAL_SPI_MspDeInit+0x34>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b16:	4a07      	ldr	r2, [pc, #28]	; (8001b34 <HAL_SPI_MspDeInit+0x34>)
 8001b18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b1c:	6453      	str	r3, [r2, #68]	; 0x44
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8001b1e:	21f0      	movs	r1, #240	; 0xf0
 8001b20:	4805      	ldr	r0, [pc, #20]	; (8001b38 <HAL_SPI_MspDeInit+0x38>)
 8001b22:	f001 fa67 	bl	8002ff4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40013000 	.word	0x40013000
 8001b34:	40023800 	.word	0x40023800
 8001b38:	40020000 	.word	0x40020000

08001b3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	607b      	str	r3, [r7, #4]
 8001b46:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <HAL_MspInit+0x4c>)
 8001b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4a:	4a0f      	ldr	r2, [pc, #60]	; (8001b88 <HAL_MspInit+0x4c>)
 8001b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b50:	6453      	str	r3, [r2, #68]	; 0x44
 8001b52:	4b0d      	ldr	r3, [pc, #52]	; (8001b88 <HAL_MspInit+0x4c>)
 8001b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b5a:	607b      	str	r3, [r7, #4]
 8001b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	603b      	str	r3, [r7, #0]
 8001b62:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <HAL_MspInit+0x4c>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	4a08      	ldr	r2, [pc, #32]	; (8001b88 <HAL_MspInit+0x4c>)
 8001b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b6e:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <HAL_MspInit+0x4c>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b76:	603b      	str	r3, [r7, #0]
 8001b78:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b7a:	2007      	movs	r0, #7
 8001b7c:	f000 fb54 	bl	8002228 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b80:	bf00      	nop
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40023800 	.word	0x40023800

08001b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001b90:	e7fe      	b.n	8001b90 <NMI_Handler+0x4>

08001b92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b96:	e7fe      	b.n	8001b96 <HardFault_Handler+0x4>

08001b98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b9c:	e7fe      	b.n	8001b9c <MemManage_Handler+0x4>

08001b9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ba2:	e7fe      	b.n	8001ba2 <BusFault_Handler+0x4>

08001ba4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ba8:	e7fe      	b.n	8001ba8 <UsageFault_Handler+0x4>

08001baa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	FatFsCnt++;
 8001bd8:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <SysTick_Handler+0x30>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	3301      	adds	r3, #1
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <SysTick_Handler+0x30>)
 8001be4:	701a      	strb	r2, [r3, #0]
	if (FatFsCnt >= 10) {
 8001be6:	4b07      	ldr	r3, [pc, #28]	; (8001c04 <SysTick_Handler+0x30>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b09      	cmp	r3, #9
 8001bee:	d904      	bls.n	8001bfa <SysTick_Handler+0x26>
		FatFsCnt = 0;
 8001bf0:	4b04      	ldr	r3, [pc, #16]	; (8001c04 <SysTick_Handler+0x30>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8001bf6:	f000 f807 	bl	8001c08 <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bfa:	f000 fa1f 	bl	800203c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	200031b8 	.word	0x200031b8

08001c08 <SDTimer_Handler>:
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */

void SDTimer_Handler(void) {
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
	if (Timer1 > 0)
 8001c0c:	4b0e      	ldr	r3, [pc, #56]	; (8001c48 <SDTimer_Handler+0x40>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d006      	beq.n	8001c24 <SDTimer_Handler+0x1c>
		Timer1--;
 8001c16:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <SDTimer_Handler+0x40>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <SDTimer_Handler+0x40>)
 8001c22:	701a      	strb	r2, [r3, #0]

	if (Timer2 > 0)
 8001c24:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <SDTimer_Handler+0x44>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d006      	beq.n	8001c3c <SDTimer_Handler+0x34>
		Timer2--;
 8001c2e:	4b07      	ldr	r3, [pc, #28]	; (8001c4c <SDTimer_Handler+0x44>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	3b01      	subs	r3, #1
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	4b04      	ldr	r3, [pc, #16]	; (8001c4c <SDTimer_Handler+0x44>)
 8001c3a:	701a      	strb	r2, [r3, #0]
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	200031b9 	.word	0x200031b9
 8001c4c:	200031ba 	.word	0x200031ba

08001c50 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	e00a      	b.n	8001c78 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c62:	f3af 8000 	nop.w
 8001c66:	4601      	mov	r1, r0
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	1c5a      	adds	r2, r3, #1
 8001c6c:	60ba      	str	r2, [r7, #8]
 8001c6e:	b2ca      	uxtb	r2, r1
 8001c70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	3301      	adds	r3, #1
 8001c76:	617b      	str	r3, [r7, #20]
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	dbf0      	blt.n	8001c62 <_read+0x12>
	}

return len;
 8001c80:	687b      	ldr	r3, [r7, #4]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3718      	adds	r7, #24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b086      	sub	sp, #24
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	60f8      	str	r0, [r7, #12]
 8001c92:	60b9      	str	r1, [r7, #8]
 8001c94:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	e009      	b.n	8001cb0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	1c5a      	adds	r2, r3, #1
 8001ca0:	60ba      	str	r2, [r7, #8]
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff fd57 	bl	8001758 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	3301      	adds	r3, #1
 8001cae:	617b      	str	r3, [r7, #20]
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	dbf1      	blt.n	8001c9c <_write+0x12>
	}
	return len;
 8001cb8:	687b      	ldr	r3, [r7, #4]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <_close>:

int _close(int file)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
	return -1;
 8001cca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cea:	605a      	str	r2, [r3, #4]
	return 0;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <_isatty>:

int _isatty(int file)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
	return 1;
 8001d02:	2301      	movs	r3, #1
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
	return 0;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d34:	4a14      	ldr	r2, [pc, #80]	; (8001d88 <_sbrk+0x5c>)
 8001d36:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <_sbrk+0x60>)
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d40:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <_sbrk+0x64>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d102      	bne.n	8001d4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d48:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <_sbrk+0x64>)
 8001d4a:	4a12      	ldr	r2, [pc, #72]	; (8001d94 <_sbrk+0x68>)
 8001d4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d4e:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <_sbrk+0x64>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4413      	add	r3, r2
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d207      	bcs.n	8001d6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d5c:	f005 ffaa 	bl	8007cb4 <__errno>
 8001d60:	4603      	mov	r3, r0
 8001d62:	220c      	movs	r2, #12
 8001d64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d66:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6a:	e009      	b.n	8001d80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d6c:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <_sbrk+0x64>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d72:	4b07      	ldr	r3, [pc, #28]	; (8001d90 <_sbrk+0x64>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4413      	add	r3, r2
 8001d7a:	4a05      	ldr	r2, [pc, #20]	; (8001d90 <_sbrk+0x64>)
 8001d7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20018000 	.word	0x20018000
 8001d8c:	00000400 	.word	0x00000400
 8001d90:	200031bc 	.word	0x200031bc
 8001d94:	20003478 	.word	0x20003478

08001d98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d9c:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <SystemInit+0x20>)
 8001d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001da2:	4a05      	ldr	r2, [pc, #20]	; (8001db8 <SystemInit+0x20>)
 8001da4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001da8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	e000ed00 	.word	0xe000ed00

08001dbc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001dc0:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <MX_USART2_UART_Init+0x4c>)
 8001dc2:	4a12      	ldr	r2, [pc, #72]	; (8001e0c <MX_USART2_UART_Init+0x50>)
 8001dc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dc6:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <MX_USART2_UART_Init+0x4c>)
 8001dc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dce:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <MX_USART2_UART_Init+0x4c>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <MX_USART2_UART_Init+0x4c>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dda:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <MX_USART2_UART_Init+0x4c>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001de0:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <MX_USART2_UART_Init+0x4c>)
 8001de2:	220c      	movs	r2, #12
 8001de4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001de6:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <MX_USART2_UART_Init+0x4c>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dec:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <MX_USART2_UART_Init+0x4c>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001df2:	4805      	ldr	r0, [pc, #20]	; (8001e08 <MX_USART2_UART_Init+0x4c>)
 8001df4:	f002 fbe4 	bl	80045c0 <HAL_UART_Init>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001dfe:	f7ff fdfb 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	200031c0 	.word	0x200031c0
 8001e0c:	40004400 	.word	0x40004400

08001e10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b08a      	sub	sp, #40	; 0x28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	60da      	str	r2, [r3, #12]
 8001e26:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a19      	ldr	r2, [pc, #100]	; (8001e94 <HAL_UART_MspInit+0x84>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d12b      	bne.n	8001e8a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	613b      	str	r3, [r7, #16]
 8001e36:	4b18      	ldr	r3, [pc, #96]	; (8001e98 <HAL_UART_MspInit+0x88>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	4a17      	ldr	r2, [pc, #92]	; (8001e98 <HAL_UART_MspInit+0x88>)
 8001e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e40:	6413      	str	r3, [r2, #64]	; 0x40
 8001e42:	4b15      	ldr	r3, [pc, #84]	; (8001e98 <HAL_UART_MspInit+0x88>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4a:	613b      	str	r3, [r7, #16]
 8001e4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	4b11      	ldr	r3, [pc, #68]	; (8001e98 <HAL_UART_MspInit+0x88>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	4a10      	ldr	r2, [pc, #64]	; (8001e98 <HAL_UART_MspInit+0x88>)
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5e:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <HAL_UART_MspInit+0x88>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e6a:	230c      	movs	r3, #12
 8001e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e76:	2300      	movs	r3, #0
 8001e78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e7a:	2307      	movs	r3, #7
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7e:	f107 0314 	add.w	r3, r7, #20
 8001e82:	4619      	mov	r1, r3
 8001e84:	4805      	ldr	r0, [pc, #20]	; (8001e9c <HAL_UART_MspInit+0x8c>)
 8001e86:	f000 ff31 	bl	8002cec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e8a:	bf00      	nop
 8001e8c:	3728      	adds	r7, #40	; 0x28
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40004400 	.word	0x40004400
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	40020000 	.word	0x40020000

08001ea0 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART2)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a08      	ldr	r2, [pc, #32]	; (8001ed0 <HAL_UART_MspDeInit+0x30>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d109      	bne.n	8001ec6 <HAL_UART_MspDeInit+0x26>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8001eb2:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <HAL_UART_MspDeInit+0x34>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	4a07      	ldr	r2, [pc, #28]	; (8001ed4 <HAL_UART_MspDeInit+0x34>)
 8001eb8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001ebc:	6413      	str	r3, [r2, #64]	; 0x40

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, USART_TX_Pin|USART_RX_Pin);
 8001ebe:	210c      	movs	r1, #12
 8001ec0:	4805      	ldr	r0, [pc, #20]	; (8001ed8 <HAL_UART_MspDeInit+0x38>)
 8001ec2:	f001 f897 	bl	8002ff4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40004400 	.word	0x40004400
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	40020000 	.word	0x40020000

08001edc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001edc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ee0:	480d      	ldr	r0, [pc, #52]	; (8001f18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ee2:	490e      	ldr	r1, [pc, #56]	; (8001f1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ee4:	4a0e      	ldr	r2, [pc, #56]	; (8001f20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ee6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ee8:	e002      	b.n	8001ef0 <LoopCopyDataInit>

08001eea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eee:	3304      	adds	r3, #4

08001ef0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ef0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ef2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ef4:	d3f9      	bcc.n	8001eea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ef6:	4a0b      	ldr	r2, [pc, #44]	; (8001f24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ef8:	4c0b      	ldr	r4, [pc, #44]	; (8001f28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001efa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001efc:	e001      	b.n	8001f02 <LoopFillZerobss>

08001efe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001efe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f00:	3204      	adds	r2, #4

08001f02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f04:	d3fb      	bcc.n	8001efe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f06:	f7ff ff47 	bl	8001d98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f0a:	f005 fed9 	bl	8007cc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f0e:	f7ff fad1 	bl	80014b4 <main>
  bx  lr    
 8001f12:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f14:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f1c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001f20:	0800969c 	.word	0x0800969c
  ldr r2, =_sbss
 8001f24:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001f28:	20003474 	.word	0x20003474

08001f2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f2c:	e7fe      	b.n	8001f2c <ADC_IRQHandler>
	...

08001f30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f34:	4b0e      	ldr	r3, [pc, #56]	; (8001f70 <HAL_Init+0x40>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a0d      	ldr	r2, [pc, #52]	; (8001f70 <HAL_Init+0x40>)
 8001f3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f40:	4b0b      	ldr	r3, [pc, #44]	; (8001f70 <HAL_Init+0x40>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a0a      	ldr	r2, [pc, #40]	; (8001f70 <HAL_Init+0x40>)
 8001f46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f4c:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <HAL_Init+0x40>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a07      	ldr	r2, [pc, #28]	; (8001f70 <HAL_Init+0x40>)
 8001f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f58:	2003      	movs	r0, #3
 8001f5a:	f000 f965 	bl	8002228 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f5e:	2000      	movs	r0, #0
 8001f60:	f000 f83c 	bl	8001fdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f64:	f7ff fdea 	bl	8001b3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40023c00 	.word	0x40023c00

08001f74 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8001f78:	4b13      	ldr	r3, [pc, #76]	; (8001fc8 <HAL_DeInit+0x54>)
 8001f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8001f7e:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8001f80:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <HAL_DeInit+0x54>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8001f86:	4b10      	ldr	r3, [pc, #64]	; (8001fc8 <HAL_DeInit+0x54>)
 8001f88:	f04f 32ff 	mov.w	r2, #4294967295
 8001f8c:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8001f8e:	4b0e      	ldr	r3, [pc, #56]	; (8001fc8 <HAL_DeInit+0x54>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8001f94:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <HAL_DeInit+0x54>)
 8001f96:	f04f 32ff 	mov.w	r2, #4294967295
 8001f9a:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8001f9c:	4b0a      	ldr	r3, [pc, #40]	; (8001fc8 <HAL_DeInit+0x54>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8001fa2:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <HAL_DeInit+0x54>)
 8001fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa8:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8001faa:	4b07      	ldr	r3, [pc, #28]	; (8001fc8 <HAL_DeInit+0x54>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8001fb0:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <HAL_DeInit+0x54>)
 8001fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb6:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8001fb8:	4b03      	ldr	r3, [pc, #12]	; (8001fc8 <HAL_DeInit+0x54>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8001fbe:	f000 f805 	bl	8001fcc <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40023800 	.word	0x40023800

08001fcc <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8001fd0:	bf00      	nop
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
	...

08001fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fe4:	4b12      	ldr	r3, [pc, #72]	; (8002030 <HAL_InitTick+0x54>)
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	4b12      	ldr	r3, [pc, #72]	; (8002034 <HAL_InitTick+0x58>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	4619      	mov	r1, r3
 8001fee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ff2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f000 f93b 	bl	8002276 <HAL_SYSTICK_Config>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e00e      	b.n	8002028 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b0f      	cmp	r3, #15
 800200e:	d80a      	bhi.n	8002026 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002010:	2200      	movs	r2, #0
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	f04f 30ff 	mov.w	r0, #4294967295
 8002018:	f000 f911 	bl	800223e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800201c:	4a06      	ldr	r2, [pc, #24]	; (8002038 <HAL_InitTick+0x5c>)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002022:	2300      	movs	r3, #0
 8002024:	e000      	b.n	8002028 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
}
 8002028:	4618      	mov	r0, r3
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	20000008 	.word	0x20000008
 8002034:	20000010 	.word	0x20000010
 8002038:	2000000c 	.word	0x2000000c

0800203c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002040:	4b06      	ldr	r3, [pc, #24]	; (800205c <HAL_IncTick+0x20>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	461a      	mov	r2, r3
 8002046:	4b06      	ldr	r3, [pc, #24]	; (8002060 <HAL_IncTick+0x24>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4413      	add	r3, r2
 800204c:	4a04      	ldr	r2, [pc, #16]	; (8002060 <HAL_IncTick+0x24>)
 800204e:	6013      	str	r3, [r2, #0]
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	20000010 	.word	0x20000010
 8002060:	20003204 	.word	0x20003204

08002064 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  return uwTick;
 8002068:	4b03      	ldr	r3, [pc, #12]	; (8002078 <HAL_GetTick+0x14>)
 800206a:	681b      	ldr	r3, [r3, #0]
}
 800206c:	4618      	mov	r0, r3
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	20003204 	.word	0x20003204

0800207c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002084:	f7ff ffee 	bl	8002064 <HAL_GetTick>
 8002088:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002094:	d005      	beq.n	80020a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002096:	4b0a      	ldr	r3, [pc, #40]	; (80020c0 <HAL_Delay+0x44>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	461a      	mov	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4413      	add	r3, r2
 80020a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020a2:	bf00      	nop
 80020a4:	f7ff ffde 	bl	8002064 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d8f7      	bhi.n	80020a4 <HAL_Delay+0x28>
  {
  }
}
 80020b4:	bf00      	nop
 80020b6:	bf00      	nop
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20000010 	.word	0x20000010

080020c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020d4:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <__NVIC_SetPriorityGrouping+0x44>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020e0:	4013      	ands	r3, r2
 80020e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020f6:	4a04      	ldr	r2, [pc, #16]	; (8002108 <__NVIC_SetPriorityGrouping+0x44>)
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	60d3      	str	r3, [r2, #12]
}
 80020fc:	bf00      	nop
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002110:	4b04      	ldr	r3, [pc, #16]	; (8002124 <__NVIC_GetPriorityGrouping+0x18>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	0a1b      	lsrs	r3, r3, #8
 8002116:	f003 0307 	and.w	r3, r3, #7
}
 800211a:	4618      	mov	r0, r3
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	6039      	str	r1, [r7, #0]
 8002132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002138:	2b00      	cmp	r3, #0
 800213a:	db0a      	blt.n	8002152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	b2da      	uxtb	r2, r3
 8002140:	490c      	ldr	r1, [pc, #48]	; (8002174 <__NVIC_SetPriority+0x4c>)
 8002142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002146:	0112      	lsls	r2, r2, #4
 8002148:	b2d2      	uxtb	r2, r2
 800214a:	440b      	add	r3, r1
 800214c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002150:	e00a      	b.n	8002168 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	b2da      	uxtb	r2, r3
 8002156:	4908      	ldr	r1, [pc, #32]	; (8002178 <__NVIC_SetPriority+0x50>)
 8002158:	79fb      	ldrb	r3, [r7, #7]
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	3b04      	subs	r3, #4
 8002160:	0112      	lsls	r2, r2, #4
 8002162:	b2d2      	uxtb	r2, r2
 8002164:	440b      	add	r3, r1
 8002166:	761a      	strb	r2, [r3, #24]
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	e000e100 	.word	0xe000e100
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800217c:	b480      	push	{r7}
 800217e:	b089      	sub	sp, #36	; 0x24
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	f1c3 0307 	rsb	r3, r3, #7
 8002196:	2b04      	cmp	r3, #4
 8002198:	bf28      	it	cs
 800219a:	2304      	movcs	r3, #4
 800219c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	3304      	adds	r3, #4
 80021a2:	2b06      	cmp	r3, #6
 80021a4:	d902      	bls.n	80021ac <NVIC_EncodePriority+0x30>
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	3b03      	subs	r3, #3
 80021aa:	e000      	b.n	80021ae <NVIC_EncodePriority+0x32>
 80021ac:	2300      	movs	r3, #0
 80021ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b0:	f04f 32ff 	mov.w	r2, #4294967295
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43da      	mvns	r2, r3
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	401a      	ands	r2, r3
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021c4:	f04f 31ff 	mov.w	r1, #4294967295
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	fa01 f303 	lsl.w	r3, r1, r3
 80021ce:	43d9      	mvns	r1, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d4:	4313      	orrs	r3, r2
         );
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3724      	adds	r7, #36	; 0x24
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
	...

080021e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3b01      	subs	r3, #1
 80021f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021f4:	d301      	bcc.n	80021fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021f6:	2301      	movs	r3, #1
 80021f8:	e00f      	b.n	800221a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021fa:	4a0a      	ldr	r2, [pc, #40]	; (8002224 <SysTick_Config+0x40>)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3b01      	subs	r3, #1
 8002200:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002202:	210f      	movs	r1, #15
 8002204:	f04f 30ff 	mov.w	r0, #4294967295
 8002208:	f7ff ff8e 	bl	8002128 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800220c:	4b05      	ldr	r3, [pc, #20]	; (8002224 <SysTick_Config+0x40>)
 800220e:	2200      	movs	r2, #0
 8002210:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002212:	4b04      	ldr	r3, [pc, #16]	; (8002224 <SysTick_Config+0x40>)
 8002214:	2207      	movs	r2, #7
 8002216:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	e000e010 	.word	0xe000e010

08002228 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f7ff ff47 	bl	80020c4 <__NVIC_SetPriorityGrouping>
}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800223e:	b580      	push	{r7, lr}
 8002240:	b086      	sub	sp, #24
 8002242:	af00      	add	r7, sp, #0
 8002244:	4603      	mov	r3, r0
 8002246:	60b9      	str	r1, [r7, #8]
 8002248:	607a      	str	r2, [r7, #4]
 800224a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002250:	f7ff ff5c 	bl	800210c <__NVIC_GetPriorityGrouping>
 8002254:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	68b9      	ldr	r1, [r7, #8]
 800225a:	6978      	ldr	r0, [r7, #20]
 800225c:	f7ff ff8e 	bl	800217c <NVIC_EncodePriority>
 8002260:	4602      	mov	r2, r0
 8002262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002266:	4611      	mov	r1, r2
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff ff5d 	bl	8002128 <__NVIC_SetPriority>
}
 800226e:	bf00      	nop
 8002270:	3718      	adds	r7, #24
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b082      	sub	sp, #8
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7ff ffb0 	bl	80021e4 <SysTick_Config>
 8002284:	4603      	mov	r3, r0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b082      	sub	sp, #8
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e00e      	b.n	80022be <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	795b      	ldrb	r3, [r3, #5]
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d105      	bne.n	80022b6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7fe fb7d 	bl	80009b0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_CRC_DeInit>:
  * @brief  DeInitialize the CRC peripheral.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_DeInit(CRC_HandleTypeDef *hcrc)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d101      	bne.n	80022d8 <HAL_CRC_DeInit+0x12>
  {
    return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e022      	b.n	800231e <HAL_CRC_DeInit+0x58>

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  /* Check the CRC peripheral state */
  if (hcrc->State == HAL_CRC_STATE_BUSY)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	795b      	ldrb	r3, [r3, #5]
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d101      	bne.n	80022e6 <HAL_CRC_DeInit+0x20>
  {
    return HAL_BUSY;
 80022e2:	2302      	movs	r3, #2
 80022e4:	e01b      	b.n	800231e <HAL_CRC_DeInit+0x58>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2202      	movs	r2, #2
 80022ea:	715a      	strb	r2, [r3, #5]

  /* Reset CRC calculation unit */
  __HAL_CRC_DR_RESET(hcrc);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689a      	ldr	r2, [r3, #8]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f042 0201 	orr.w	r2, r2, #1
 80022fa:	609a      	str	r2, [r3, #8]

  /* Reset IDR register content */
  CLEAR_BIT(hcrc->Instance->IDR, CRC_IDR_IDR);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	791b      	ldrb	r3, [r3, #4]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2200      	movs	r2, #0
 8002308:	711a      	strb	r2, [r3, #4]

  /* DeInit the low level hardware */
  HAL_CRC_MspDeInit(hcrc);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7fe fb72 	bl	80009f4 <HAL_CRC_MspDeInit>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_RESET;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	715a      	strb	r2, [r3, #5]

  /* Process unlocked */
  __HAL_UNLOCK(hcrc);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002326:	b480      	push	{r7}
 8002328:	b087      	sub	sp, #28
 800232a:	af00      	add	r7, sp, #0
 800232c:	60f8      	str	r0, [r7, #12]
 800232e:	60b9      	str	r1, [r7, #8]
 8002330:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002332:	2300      	movs	r3, #0
 8002334:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2202      	movs	r2, #2
 800233a:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f042 0201 	orr.w	r2, r2, #1
 800234a:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800234c:	2300      	movs	r3, #0
 800234e:	617b      	str	r3, [r7, #20]
 8002350:	e00a      	b.n	8002368 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	441a      	add	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6812      	ldr	r2, [r2, #0]
 8002360:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	3301      	adds	r3, #1
 8002366:	617b      	str	r3, [r7, #20]
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	429a      	cmp	r2, r3
 800236e:	d3f0      	bcc.n	8002352 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2201      	movs	r2, #1
 800237c:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800237e:	693b      	ldr	r3, [r7, #16]
}
 8002380:	4618      	mov	r0, r3
 8002382:	371c      	adds	r7, #28
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800239e:	4b23      	ldr	r3, [pc, #140]	; (800242c <HAL_FLASH_Program+0xa0>)
 80023a0:	7e1b      	ldrb	r3, [r3, #24]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d101      	bne.n	80023aa <HAL_FLASH_Program+0x1e>
 80023a6:	2302      	movs	r3, #2
 80023a8:	e03b      	b.n	8002422 <HAL_FLASH_Program+0x96>
 80023aa:	4b20      	ldr	r3, [pc, #128]	; (800242c <HAL_FLASH_Program+0xa0>)
 80023ac:	2201      	movs	r2, #1
 80023ae:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80023b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80023b4:	f000 f8b0 	bl	8002518 <FLASH_WaitForLastOperation>
 80023b8:	4603      	mov	r3, r0
 80023ba:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80023bc:	7dfb      	ldrb	r3, [r7, #23]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d12b      	bne.n	800241a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d105      	bne.n	80023d4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80023c8:	783b      	ldrb	r3, [r7, #0]
 80023ca:	4619      	mov	r1, r3
 80023cc:	68b8      	ldr	r0, [r7, #8]
 80023ce:	f000 f95b 	bl	8002688 <FLASH_Program_Byte>
 80023d2:	e016      	b.n	8002402 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d105      	bne.n	80023e6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80023da:	883b      	ldrh	r3, [r7, #0]
 80023dc:	4619      	mov	r1, r3
 80023de:	68b8      	ldr	r0, [r7, #8]
 80023e0:	f000 f92e 	bl	8002640 <FLASH_Program_HalfWord>
 80023e4:	e00d      	b.n	8002402 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d105      	bne.n	80023f8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	4619      	mov	r1, r3
 80023f0:	68b8      	ldr	r0, [r7, #8]
 80023f2:	f000 f903 	bl	80025fc <FLASH_Program_Word>
 80023f6:	e004      	b.n	8002402 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80023f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023fc:	68b8      	ldr	r0, [r7, #8]
 80023fe:	f000 f8cb 	bl	8002598 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002402:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002406:	f000 f887 	bl	8002518 <FLASH_WaitForLastOperation>
 800240a:	4603      	mov	r3, r0
 800240c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800240e:	4b08      	ldr	r3, [pc, #32]	; (8002430 <HAL_FLASH_Program+0xa4>)
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	4a07      	ldr	r2, [pc, #28]	; (8002430 <HAL_FLASH_Program+0xa4>)
 8002414:	f023 0301 	bic.w	r3, r3, #1
 8002418:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800241a:	4b04      	ldr	r3, [pc, #16]	; (800242c <HAL_FLASH_Program+0xa0>)
 800241c:	2200      	movs	r2, #0
 800241e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8002420:	7dfb      	ldrb	r3, [r7, #23]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20003208 	.word	0x20003208
 8002430:	40023c00 	.word	0x40023c00

08002434 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800243a:	2300      	movs	r3, #0
 800243c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800243e:	4b0b      	ldr	r3, [pc, #44]	; (800246c <HAL_FLASH_Unlock+0x38>)
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	2b00      	cmp	r3, #0
 8002444:	da0b      	bge.n	800245e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002446:	4b09      	ldr	r3, [pc, #36]	; (800246c <HAL_FLASH_Unlock+0x38>)
 8002448:	4a09      	ldr	r2, [pc, #36]	; (8002470 <HAL_FLASH_Unlock+0x3c>)
 800244a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800244c:	4b07      	ldr	r3, [pc, #28]	; (800246c <HAL_FLASH_Unlock+0x38>)
 800244e:	4a09      	ldr	r2, [pc, #36]	; (8002474 <HAL_FLASH_Unlock+0x40>)
 8002450:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002452:	4b06      	ldr	r3, [pc, #24]	; (800246c <HAL_FLASH_Unlock+0x38>)
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	2b00      	cmp	r3, #0
 8002458:	da01      	bge.n	800245e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800245e:	79fb      	ldrb	r3, [r7, #7]
}
 8002460:	4618      	mov	r0, r3
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	40023c00 	.word	0x40023c00
 8002470:	45670123 	.word	0x45670123
 8002474:	cdef89ab 	.word	0xcdef89ab

08002478 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800247c:	4b05      	ldr	r3, [pc, #20]	; (8002494 <HAL_FLASH_Lock+0x1c>)
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	4a04      	ldr	r2, [pc, #16]	; (8002494 <HAL_FLASH_Lock+0x1c>)
 8002482:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002486:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	40023c00 	.word	0x40023c00

08002498 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 800249c:	4b09      	ldr	r3, [pc, #36]	; (80024c4 <HAL_FLASH_OB_Unlock+0x2c>)
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d007      	beq.n	80024b8 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 80024a8:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <HAL_FLASH_OB_Unlock+0x2c>)
 80024aa:	4a07      	ldr	r2, [pc, #28]	; (80024c8 <HAL_FLASH_OB_Unlock+0x30>)
 80024ac:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 80024ae:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <HAL_FLASH_OB_Unlock+0x2c>)
 80024b0:	4a06      	ldr	r2, [pc, #24]	; (80024cc <HAL_FLASH_OB_Unlock+0x34>)
 80024b2:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 80024b4:	2300      	movs	r3, #0
 80024b6:	e000      	b.n	80024ba <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	40023c00 	.word	0x40023c00
 80024c8:	08192a3b 	.word	0x08192a3b
 80024cc:	4c5d6e7f 	.word	0x4c5d6e7f

080024d0 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80024d4:	4b05      	ldr	r3, [pc, #20]	; (80024ec <HAL_FLASH_OB_Lock+0x1c>)
 80024d6:	695b      	ldr	r3, [r3, #20]
 80024d8:	4a04      	ldr	r2, [pc, #16]	; (80024ec <HAL_FLASH_OB_Lock+0x1c>)
 80024da:	f043 0301 	orr.w	r3, r3, #1
 80024de:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	40023c00 	.word	0x40023c00

080024f0 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 80024f4:	4b07      	ldr	r3, [pc, #28]	; (8002514 <HAL_FLASH_OB_Launch+0x24>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	4a06      	ldr	r2, [pc, #24]	; (8002514 <HAL_FLASH_OB_Launch+0x24>)
 80024fc:	f043 0302 	orr.w	r3, r3, #2
 8002500:	b2db      	uxtb	r3, r3
 8002502:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
 8002504:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002508:	f000 f806 	bl	8002518 <FLASH_WaitForLastOperation>
 800250c:	4603      	mov	r3, r0
}
 800250e:	4618      	mov	r0, r3
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40023c14 	.word	0x40023c14

08002518 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002520:	2300      	movs	r3, #0
 8002522:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002524:	4b1a      	ldr	r3, [pc, #104]	; (8002590 <FLASH_WaitForLastOperation+0x78>)
 8002526:	2200      	movs	r2, #0
 8002528:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800252a:	f7ff fd9b 	bl	8002064 <HAL_GetTick>
 800252e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002530:	e010      	b.n	8002554 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002538:	d00c      	beq.n	8002554 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d007      	beq.n	8002550 <FLASH_WaitForLastOperation+0x38>
 8002540:	f7ff fd90 	bl	8002064 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	429a      	cmp	r2, r3
 800254e:	d201      	bcs.n	8002554 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e019      	b.n	8002588 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002554:	4b0f      	ldr	r3, [pc, #60]	; (8002594 <FLASH_WaitForLastOperation+0x7c>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1e8      	bne.n	8002532 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002560:	4b0c      	ldr	r3, [pc, #48]	; (8002594 <FLASH_WaitForLastOperation+0x7c>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b00      	cmp	r3, #0
 800256a:	d002      	beq.n	8002572 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800256c:	4b09      	ldr	r3, [pc, #36]	; (8002594 <FLASH_WaitForLastOperation+0x7c>)
 800256e:	2201      	movs	r2, #1
 8002570:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002572:	4b08      	ldr	r3, [pc, #32]	; (8002594 <FLASH_WaitForLastOperation+0x7c>)
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800257e:	f000 f8a5 	bl	80026cc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e000      	b.n	8002588 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002586:	2300      	movs	r3, #0
  
}  
 8002588:	4618      	mov	r0, r3
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	20003208 	.word	0x20003208
 8002594:	40023c00 	.word	0x40023c00

08002598 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80025a4:	4b14      	ldr	r3, [pc, #80]	; (80025f8 <FLASH_Program_DoubleWord+0x60>)
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	4a13      	ldr	r2, [pc, #76]	; (80025f8 <FLASH_Program_DoubleWord+0x60>)
 80025aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80025b0:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <FLASH_Program_DoubleWord+0x60>)
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	4a10      	ldr	r2, [pc, #64]	; (80025f8 <FLASH_Program_DoubleWord+0x60>)
 80025b6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80025ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80025bc:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <FLASH_Program_DoubleWord+0x60>)
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	4a0d      	ldr	r2, [pc, #52]	; (80025f8 <FLASH_Program_DoubleWord+0x60>)
 80025c2:	f043 0301 	orr.w	r3, r3, #1
 80025c6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80025ce:	f3bf 8f6f 	isb	sy
}
 80025d2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80025d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025d8:	f04f 0200 	mov.w	r2, #0
 80025dc:	f04f 0300 	mov.w	r3, #0
 80025e0:	000a      	movs	r2, r1
 80025e2:	2300      	movs	r3, #0
 80025e4:	68f9      	ldr	r1, [r7, #12]
 80025e6:	3104      	adds	r1, #4
 80025e8:	4613      	mov	r3, r2
 80025ea:	600b      	str	r3, [r1, #0]
}
 80025ec:	bf00      	nop
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	40023c00 	.word	0x40023c00

080025fc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002606:	4b0d      	ldr	r3, [pc, #52]	; (800263c <FLASH_Program_Word+0x40>)
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	4a0c      	ldr	r2, [pc, #48]	; (800263c <FLASH_Program_Word+0x40>)
 800260c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002610:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002612:	4b0a      	ldr	r3, [pc, #40]	; (800263c <FLASH_Program_Word+0x40>)
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	4a09      	ldr	r2, [pc, #36]	; (800263c <FLASH_Program_Word+0x40>)
 8002618:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800261c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800261e:	4b07      	ldr	r3, [pc, #28]	; (800263c <FLASH_Program_Word+0x40>)
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	4a06      	ldr	r2, [pc, #24]	; (800263c <FLASH_Program_Word+0x40>)
 8002624:	f043 0301 	orr.w	r3, r3, #1
 8002628:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	601a      	str	r2, [r3, #0]
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	40023c00 	.word	0x40023c00

08002640 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	460b      	mov	r3, r1
 800264a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800264c:	4b0d      	ldr	r3, [pc, #52]	; (8002684 <FLASH_Program_HalfWord+0x44>)
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	4a0c      	ldr	r2, [pc, #48]	; (8002684 <FLASH_Program_HalfWord+0x44>)
 8002652:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002656:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002658:	4b0a      	ldr	r3, [pc, #40]	; (8002684 <FLASH_Program_HalfWord+0x44>)
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	4a09      	ldr	r2, [pc, #36]	; (8002684 <FLASH_Program_HalfWord+0x44>)
 800265e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002662:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002664:	4b07      	ldr	r3, [pc, #28]	; (8002684 <FLASH_Program_HalfWord+0x44>)
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	4a06      	ldr	r2, [pc, #24]	; (8002684 <FLASH_Program_HalfWord+0x44>)
 800266a:	f043 0301 	orr.w	r3, r3, #1
 800266e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	887a      	ldrh	r2, [r7, #2]
 8002674:	801a      	strh	r2, [r3, #0]
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	40023c00 	.word	0x40023c00

08002688 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	460b      	mov	r3, r1
 8002692:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002694:	4b0c      	ldr	r3, [pc, #48]	; (80026c8 <FLASH_Program_Byte+0x40>)
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	4a0b      	ldr	r2, [pc, #44]	; (80026c8 <FLASH_Program_Byte+0x40>)
 800269a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800269e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80026a0:	4b09      	ldr	r3, [pc, #36]	; (80026c8 <FLASH_Program_Byte+0x40>)
 80026a2:	4a09      	ldr	r2, [pc, #36]	; (80026c8 <FLASH_Program_Byte+0x40>)
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80026a8:	4b07      	ldr	r3, [pc, #28]	; (80026c8 <FLASH_Program_Byte+0x40>)
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	4a06      	ldr	r2, [pc, #24]	; (80026c8 <FLASH_Program_Byte+0x40>)
 80026ae:	f043 0301 	orr.w	r3, r3, #1
 80026b2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	78fa      	ldrb	r2, [r7, #3]
 80026b8:	701a      	strb	r2, [r3, #0]
}
 80026ba:	bf00      	nop
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	40023c00 	.word	0x40023c00

080026cc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80026d0:	4b2f      	ldr	r3, [pc, #188]	; (8002790 <FLASH_SetErrorCode+0xc4>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	f003 0310 	and.w	r3, r3, #16
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d008      	beq.n	80026ee <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80026dc:	4b2d      	ldr	r3, [pc, #180]	; (8002794 <FLASH_SetErrorCode+0xc8>)
 80026de:	69db      	ldr	r3, [r3, #28]
 80026e0:	f043 0310 	orr.w	r3, r3, #16
 80026e4:	4a2b      	ldr	r2, [pc, #172]	; (8002794 <FLASH_SetErrorCode+0xc8>)
 80026e6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80026e8:	4b29      	ldr	r3, [pc, #164]	; (8002790 <FLASH_SetErrorCode+0xc4>)
 80026ea:	2210      	movs	r2, #16
 80026ec:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80026ee:	4b28      	ldr	r3, [pc, #160]	; (8002790 <FLASH_SetErrorCode+0xc4>)
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	f003 0320 	and.w	r3, r3, #32
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d008      	beq.n	800270c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80026fa:	4b26      	ldr	r3, [pc, #152]	; (8002794 <FLASH_SetErrorCode+0xc8>)
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	f043 0308 	orr.w	r3, r3, #8
 8002702:	4a24      	ldr	r2, [pc, #144]	; (8002794 <FLASH_SetErrorCode+0xc8>)
 8002704:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002706:	4b22      	ldr	r3, [pc, #136]	; (8002790 <FLASH_SetErrorCode+0xc4>)
 8002708:	2220      	movs	r2, #32
 800270a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800270c:	4b20      	ldr	r3, [pc, #128]	; (8002790 <FLASH_SetErrorCode+0xc4>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002714:	2b00      	cmp	r3, #0
 8002716:	d008      	beq.n	800272a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002718:	4b1e      	ldr	r3, [pc, #120]	; (8002794 <FLASH_SetErrorCode+0xc8>)
 800271a:	69db      	ldr	r3, [r3, #28]
 800271c:	f043 0304 	orr.w	r3, r3, #4
 8002720:	4a1c      	ldr	r2, [pc, #112]	; (8002794 <FLASH_SetErrorCode+0xc8>)
 8002722:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002724:	4b1a      	ldr	r3, [pc, #104]	; (8002790 <FLASH_SetErrorCode+0xc4>)
 8002726:	2240      	movs	r2, #64	; 0x40
 8002728:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800272a:	4b19      	ldr	r3, [pc, #100]	; (8002790 <FLASH_SetErrorCode+0xc4>)
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002732:	2b00      	cmp	r3, #0
 8002734:	d008      	beq.n	8002748 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002736:	4b17      	ldr	r3, [pc, #92]	; (8002794 <FLASH_SetErrorCode+0xc8>)
 8002738:	69db      	ldr	r3, [r3, #28]
 800273a:	f043 0302 	orr.w	r3, r3, #2
 800273e:	4a15      	ldr	r2, [pc, #84]	; (8002794 <FLASH_SetErrorCode+0xc8>)
 8002740:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002742:	4b13      	ldr	r3, [pc, #76]	; (8002790 <FLASH_SetErrorCode+0xc4>)
 8002744:	2280      	movs	r2, #128	; 0x80
 8002746:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002748:	4b11      	ldr	r3, [pc, #68]	; (8002790 <FLASH_SetErrorCode+0xc4>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002750:	2b00      	cmp	r3, #0
 8002752:	d009      	beq.n	8002768 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002754:	4b0f      	ldr	r3, [pc, #60]	; (8002794 <FLASH_SetErrorCode+0xc8>)
 8002756:	69db      	ldr	r3, [r3, #28]
 8002758:	f043 0301 	orr.w	r3, r3, #1
 800275c:	4a0d      	ldr	r2, [pc, #52]	; (8002794 <FLASH_SetErrorCode+0xc8>)
 800275e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002760:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <FLASH_SetErrorCode+0xc4>)
 8002762:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002766:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002768:	4b09      	ldr	r3, [pc, #36]	; (8002790 <FLASH_SetErrorCode+0xc4>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d008      	beq.n	8002786 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002774:	4b07      	ldr	r3, [pc, #28]	; (8002794 <FLASH_SetErrorCode+0xc8>)
 8002776:	69db      	ldr	r3, [r3, #28]
 8002778:	f043 0320 	orr.w	r3, r3, #32
 800277c:	4a05      	ldr	r2, [pc, #20]	; (8002794 <FLASH_SetErrorCode+0xc8>)
 800277e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002780:	4b03      	ldr	r3, [pc, #12]	; (8002790 <FLASH_SetErrorCode+0xc4>)
 8002782:	2202      	movs	r2, #2
 8002784:	60da      	str	r2, [r3, #12]
  }
}
 8002786:	bf00      	nop
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	40023c00 	.word	0x40023c00
 8002794:	20003208 	.word	0x20003208

08002798 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80027a6:	2300      	movs	r3, #0
 80027a8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80027aa:	4b31      	ldr	r3, [pc, #196]	; (8002870 <HAL_FLASHEx_Erase+0xd8>)
 80027ac:	7e1b      	ldrb	r3, [r3, #24]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d101      	bne.n	80027b6 <HAL_FLASHEx_Erase+0x1e>
 80027b2:	2302      	movs	r3, #2
 80027b4:	e058      	b.n	8002868 <HAL_FLASHEx_Erase+0xd0>
 80027b6:	4b2e      	ldr	r3, [pc, #184]	; (8002870 <HAL_FLASHEx_Erase+0xd8>)
 80027b8:	2201      	movs	r2, #1
 80027ba:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80027bc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80027c0:	f7ff feaa 	bl	8002518 <FLASH_WaitForLastOperation>
 80027c4:	4603      	mov	r3, r0
 80027c6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80027c8:	7bfb      	ldrb	r3, [r7, #15]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d148      	bne.n	8002860 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	f04f 32ff 	mov.w	r2, #4294967295
 80027d4:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d115      	bne.n	800280a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	4619      	mov	r1, r3
 80027ea:	4610      	mov	r0, r2
 80027ec:	f000 f8d6 	bl	800299c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80027f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80027f4:	f7ff fe90 	bl	8002518 <FLASH_WaitForLastOperation>
 80027f8:	4603      	mov	r3, r0
 80027fa:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80027fc:	4b1d      	ldr	r3, [pc, #116]	; (8002874 <HAL_FLASHEx_Erase+0xdc>)
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	4a1c      	ldr	r2, [pc, #112]	; (8002874 <HAL_FLASHEx_Erase+0xdc>)
 8002802:	f023 0304 	bic.w	r3, r3, #4
 8002806:	6113      	str	r3, [r2, #16]
 8002808:	e028      	b.n	800285c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	60bb      	str	r3, [r7, #8]
 8002810:	e01c      	b.n	800284c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	b2db      	uxtb	r3, r3
 8002818:	4619      	mov	r1, r3
 800281a:	68b8      	ldr	r0, [r7, #8]
 800281c:	f000 f8e2 	bl	80029e4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002820:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002824:	f7ff fe78 	bl	8002518 <FLASH_WaitForLastOperation>
 8002828:	4603      	mov	r3, r0
 800282a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800282c:	4b11      	ldr	r3, [pc, #68]	; (8002874 <HAL_FLASHEx_Erase+0xdc>)
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	4a10      	ldr	r2, [pc, #64]	; (8002874 <HAL_FLASHEx_Erase+0xdc>)
 8002832:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8002836:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8002838:	7bfb      	ldrb	r3, [r7, #15]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	68ba      	ldr	r2, [r7, #8]
 8002842:	601a      	str	r2, [r3, #0]
          break;
 8002844:	e00a      	b.n	800285c <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	3301      	adds	r3, #1
 800284a:	60bb      	str	r3, [r7, #8]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68da      	ldr	r2, [r3, #12]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	4413      	add	r3, r2
 8002856:	68ba      	ldr	r2, [r7, #8]
 8002858:	429a      	cmp	r2, r3
 800285a:	d3da      	bcc.n	8002812 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800285c:	f000 fa00 	bl	8002c60 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002860:	4b03      	ldr	r3, [pc, #12]	; (8002870 <HAL_FLASHEx_Erase+0xd8>)
 8002862:	2200      	movs	r2, #0
 8002864:	761a      	strb	r2, [r3, #24]

  return status;
 8002866:	7bfb      	ldrb	r3, [r7, #15]
}
 8002868:	4618      	mov	r0, r3
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	20003208 	.word	0x20003208
 8002874:	40023c00 	.word	0x40023c00

08002878 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002884:	4b32      	ldr	r3, [pc, #200]	; (8002950 <HAL_FLASHEx_OBProgram+0xd8>)
 8002886:	7e1b      	ldrb	r3, [r3, #24]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d101      	bne.n	8002890 <HAL_FLASHEx_OBProgram+0x18>
 800288c:	2302      	movs	r3, #2
 800288e:	e05b      	b.n	8002948 <HAL_FLASHEx_OBProgram+0xd0>
 8002890:	4b2f      	ldr	r3, [pc, #188]	; (8002950 <HAL_FLASHEx_OBProgram+0xd8>)
 8002892:	2201      	movs	r2, #1
 8002894:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /*Write protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d018      	beq.n	80028d4 <HAL_FLASHEx_OBProgram+0x5c>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d10a      	bne.n	80028c0 <HAL_FLASHEx_OBProgram+0x48>
    {
      /*Enable of Write protection on the selected Sector*/
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector, pOBInit->Banks);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	689a      	ldr	r2, [r3, #8]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	4619      	mov	r1, r3
 80028b4:	4610      	mov	r0, r2
 80028b6:	f000 f8dd 	bl	8002a74 <FLASH_OB_EnableWRP>
 80028ba:	4603      	mov	r3, r0
 80028bc:	73fb      	strb	r3, [r7, #15]
 80028be:	e009      	b.n	80028d4 <HAL_FLASHEx_OBProgram+0x5c>
    }
    else
    {
      /*Disable of Write protection on the selected Sector*/
      status = FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	4619      	mov	r1, r3
 80028ca:	4610      	mov	r0, r2
 80028cc:	f000 f8f4 	bl	8002ab8 <FLASH_OB_DisableWRP>
 80028d0:	4603      	mov	r3, r0
 80028d2:	73fb      	strb	r3, [r7, #15]
    }
  }

  /*Read protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d007      	beq.n	80028f0 <HAL_FLASHEx_OBProgram+0x78>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	4618      	mov	r0, r3
 80028e8:	f000 f906 	bl	8002af8 <FLASH_OB_RDP_LevelConfig>
 80028ec:	4603      	mov	r3, r0
 80028ee:	73fb      	strb	r3, [r7, #15]
  }

  /*USER  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0304 	and.w	r3, r3, #4
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d013      	beq.n	8002924 <HAL_FLASHEx_OBProgram+0xac>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	7e1b      	ldrb	r3, [r3, #24]
 8002900:	f003 0320 	and.w	r3, r3, #32
 8002904:	b2d8      	uxtb	r0, r3
                                 pOBInit->USERConfig & OB_STOP_NO_RST,
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 800290a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800290e:	b2d9      	uxtb	r1, r3
                                 pOBInit->USERConfig & OB_STDBY_NO_RST);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 8002914:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002918:	b2db      	uxtb	r3, r3
 800291a:	461a      	mov	r2, r3
 800291c:	f000 f906 	bl	8002b2c <FLASH_OB_UserConfig>
 8002920:	4603      	mov	r3, r0
 8002922:	73fb      	strb	r3, [r7, #15]
  }

  /*BOR Level  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0308 	and.w	r3, r3, #8
 800292c:	2b00      	cmp	r3, #0
 800292e:	d007      	beq.n	8002940 <HAL_FLASHEx_OBProgram+0xc8>
  {
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	b2db      	uxtb	r3, r3
 8002936:	4618      	mov	r0, r3
 8002938:	f000 f928 	bl	8002b8c <FLASH_OB_BOR_LevelConfig>
 800293c:	4603      	mov	r3, r0
 800293e:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002940:	4b03      	ldr	r3, [pc, #12]	; (8002950 <HAL_FLASHEx_OBProgram+0xd8>)
 8002942:	2200      	movs	r2, #0
 8002944:	761a      	strb	r2, [r3, #24]

  return status;
 8002946:	7bfb      	ldrb	r3, [r7, #15]
}
 8002948:	4618      	mov	r0, r3
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	20003208 	.word	0x20003208

08002954 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	220f      	movs	r2, #15
 8002960:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 8002962:	f000 f941 	bl	8002be8 <FLASH_OB_GetWRP>
 8002966:	4603      	mov	r3, r0
 8002968:	461a      	mov	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 800296e:	f000 f947 	bl	8002c00 <FLASH_OB_GetRDP>
 8002972:	4603      	mov	r3, r0
 8002974:	461a      	mov	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 800297a:	f000 f925 	bl	8002bc8 <FLASH_OB_GetUser>
 800297e:	4603      	mov	r3, r0
 8002980:	461a      	mov	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 8002986:	f000 f95b 	bl	8002c40 <FLASH_OB_GetBOR>
 800298a:	4603      	mov	r3, r0
 800298c:	461a      	mov	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	615a      	str	r2, [r3, #20]
}
 8002992:	bf00      	nop
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
	...

0800299c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4603      	mov	r3, r0
 80029a4:	6039      	str	r1, [r7, #0]
 80029a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80029a8:	4b0d      	ldr	r3, [pc, #52]	; (80029e0 <FLASH_MassErase+0x44>)
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	4a0c      	ldr	r2, [pc, #48]	; (80029e0 <FLASH_MassErase+0x44>)
 80029ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80029b4:	4b0a      	ldr	r3, [pc, #40]	; (80029e0 <FLASH_MassErase+0x44>)
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	4a09      	ldr	r2, [pc, #36]	; (80029e0 <FLASH_MassErase+0x44>)
 80029ba:	f043 0304 	orr.w	r3, r3, #4
 80029be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80029c0:	4b07      	ldr	r3, [pc, #28]	; (80029e0 <FLASH_MassErase+0x44>)
 80029c2:	691a      	ldr	r2, [r3, #16]
 80029c4:	79fb      	ldrb	r3, [r7, #7]
 80029c6:	021b      	lsls	r3, r3, #8
 80029c8:	4313      	orrs	r3, r2
 80029ca:	4a05      	ldr	r2, [pc, #20]	; (80029e0 <FLASH_MassErase+0x44>)
 80029cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d0:	6113      	str	r3, [r2, #16]
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	40023c00 	.word	0x40023c00

080029e4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80029f4:	78fb      	ldrb	r3, [r7, #3]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d102      	bne.n	8002a00 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80029fa:	2300      	movs	r3, #0
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	e010      	b.n	8002a22 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002a00:	78fb      	ldrb	r3, [r7, #3]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d103      	bne.n	8002a0e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002a06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	e009      	b.n	8002a22 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002a0e:	78fb      	ldrb	r3, [r7, #3]
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d103      	bne.n	8002a1c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002a14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	e002      	b.n	8002a22 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002a1c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a20:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002a22:	4b13      	ldr	r3, [pc, #76]	; (8002a70 <FLASH_Erase_Sector+0x8c>)
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	4a12      	ldr	r2, [pc, #72]	; (8002a70 <FLASH_Erase_Sector+0x8c>)
 8002a28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a2c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002a2e:	4b10      	ldr	r3, [pc, #64]	; (8002a70 <FLASH_Erase_Sector+0x8c>)
 8002a30:	691a      	ldr	r2, [r3, #16]
 8002a32:	490f      	ldr	r1, [pc, #60]	; (8002a70 <FLASH_Erase_Sector+0x8c>)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002a3a:	4b0d      	ldr	r3, [pc, #52]	; (8002a70 <FLASH_Erase_Sector+0x8c>)
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	4a0c      	ldr	r2, [pc, #48]	; (8002a70 <FLASH_Erase_Sector+0x8c>)
 8002a40:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002a44:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002a46:	4b0a      	ldr	r3, [pc, #40]	; (8002a70 <FLASH_Erase_Sector+0x8c>)
 8002a48:	691a      	ldr	r2, [r3, #16]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	4a07      	ldr	r2, [pc, #28]	; (8002a70 <FLASH_Erase_Sector+0x8c>)
 8002a52:	f043 0302 	orr.w	r3, r3, #2
 8002a56:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002a58:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <FLASH_Erase_Sector+0x8c>)
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	4a04      	ldr	r2, [pc, #16]	; (8002a70 <FLASH_Erase_Sector+0x8c>)
 8002a5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a62:	6113      	str	r3, [r2, #16]
}
 8002a64:	bf00      	nop
 8002a66:	3714      	adds	r7, #20
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	40023c00 	.word	0x40023c00

08002a74 <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a82:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a86:	f7ff fd47 	bl	8002518 <FLASH_WaitForLastOperation>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002a8e:	7bfb      	ldrb	r3, [r7, #15]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d10a      	bne.n	8002aaa <FLASH_OB_EnableWRP+0x36>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS &= (~WRPSector);
 8002a94:	4b07      	ldr	r3, [pc, #28]	; (8002ab4 <FLASH_OB_EnableWRP+0x40>)
 8002a96:	881b      	ldrh	r3, [r3, #0]
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	4904      	ldr	r1, [pc, #16]	; (8002ab4 <FLASH_OB_EnableWRP+0x40>)
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	800b      	strh	r3, [r1, #0]
  }

  return status;
 8002aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	40023c16 	.word	0x40023c16

08002ab8 <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002ac6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002aca:	f7ff fd25 	bl	8002518 <FLASH_WaitForLastOperation>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002ad2:	7bfb      	ldrb	r3, [r7, #15]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d108      	bne.n	8002aea <FLASH_OB_DisableWRP+0x32>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector;
 8002ad8:	4b06      	ldr	r3, [pc, #24]	; (8002af4 <FLASH_OB_DisableWRP+0x3c>)
 8002ada:	881b      	ldrh	r3, [r3, #0]
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	4904      	ldr	r1, [pc, #16]	; (8002af4 <FLASH_OB_DisableWRP+0x3c>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	800b      	strh	r3, [r1, #0]
  }

  return status;
 8002aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40023c16 	.word	0x40023c16

08002af8 <FLASH_OB_RDP_LevelConfig>:
  * @note WARNING: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	4603      	mov	r3, r0
 8002b00:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b06:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b0a:	f7ff fd05 	bl	8002518 <FLASH_WaitForLastOperation>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002b12:	7bfb      	ldrb	r3, [r7, #15]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d102      	bne.n	8002b1e <FLASH_OB_RDP_LevelConfig+0x26>
  {
    *(__IO uint8_t *)OPTCR_BYTE1_ADDRESS = Level;
 8002b18:	4a03      	ldr	r2, [pc, #12]	; (8002b28 <FLASH_OB_RDP_LevelConfig+0x30>)
 8002b1a:	79fb      	ldrb	r3, [r7, #7]
 8002b1c:	7013      	strb	r3, [r2, #0]
  }

  return status;
 8002b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40023c15 	.word	0x40023c15

08002b2c <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NO_RST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t Iwdg, uint8_t Stop, uint8_t Stdby)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	4603      	mov	r3, r0
 8002b34:	71fb      	strb	r3, [r7, #7]
 8002b36:	460b      	mov	r3, r1
 8002b38:	71bb      	strb	r3, [r7, #6]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
 8002b3e:	23ff      	movs	r3, #255	; 0xff
 8002b40:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef status = HAL_OK;
 8002b42:	2300      	movs	r3, #0
 8002b44:	73bb      	strb	r3, [r7, #14]
  assert_param(IS_OB_IWDG_SOURCE(Iwdg));
  assert_param(IS_OB_STOP_SOURCE(Stop));
  assert_param(IS_OB_STDBY_SOURCE(Stdby));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b46:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b4a:	f7ff fce5 	bl	8002518 <FLASH_WaitForLastOperation>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	73bb      	strb	r3, [r7, #14]

  if (status == HAL_OK)
 8002b52:	7bbb      	ldrb	r3, [r7, #14]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d111      	bne.n	8002b7c <FLASH_OB_UserConfig+0x50>
  {
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp = (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 8002b58:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <FLASH_OB_UserConfig+0x5c>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	f003 031f 	and.w	r3, r3, #31
 8002b62:	73fb      	strb	r3, [r7, #15]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp)));
 8002b64:	79ba      	ldrb	r2, [r7, #6]
 8002b66:	7bfb      	ldrb	r3, [r7, #15]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	b2da      	uxtb	r2, r3
 8002b6c:	797b      	ldrb	r3, [r7, #5]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	4905      	ldr	r1, [pc, #20]	; (8002b88 <FLASH_OB_UserConfig+0x5c>)
 8002b74:	79fb      	ldrb	r3, [r7, #7]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	700b      	strb	r3, [r1, #0]
  }

  return status;
 8002b7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40023c14 	.word	0x40023c14

08002b8c <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 8002b96:	4b0b      	ldr	r3, [pc, #44]	; (8002bc4 <FLASH_OB_BOR_LevelConfig+0x38>)
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	4a09      	ldr	r2, [pc, #36]	; (8002bc4 <FLASH_OB_BOR_LevelConfig+0x38>)
 8002b9e:	f023 030c 	bic.w	r3, r3, #12
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	7013      	strb	r3, [r2, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= Level;
 8002ba6:	4b07      	ldr	r3, [pc, #28]	; (8002bc4 <FLASH_OB_BOR_LevelConfig+0x38>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	4905      	ldr	r1, [pc, #20]	; (8002bc4 <FLASH_OB_BOR_LevelConfig+0x38>)
 8002bae:	79fb      	ldrb	r3, [r7, #7]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	700b      	strb	r3, [r1, #0]

  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0

}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	40023c14 	.word	0x40023c14

08002bc8 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 8002bcc:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <FLASH_OB_GetUser+0x1c>)
 8002bce:	695b      	ldr	r3, [r3, #20]
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	f023 031f 	bic.w	r3, r3, #31
 8002bd6:	b2db      	uxtb	r3, r3
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	40023c00 	.word	0x40023c00

08002be8 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8002bec:	4b03      	ldr	r3, [pc, #12]	; (8002bfc <FLASH_OB_GetWRP+0x14>)
 8002bee:	881b      	ldrh	r3, [r3, #0]
 8002bf0:	b29b      	uxth	r3, r3
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	40023c16 	.word	0x40023c16

08002c00 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 8002c06:	23aa      	movs	r3, #170	; 0xaa
 8002c08:	71fb      	strb	r3, [r7, #7]

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
 8002c0a:	4b0c      	ldr	r3, [pc, #48]	; (8002c3c <FLASH_OB_GetRDP+0x3c>)
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2bcc      	cmp	r3, #204	; 0xcc
 8002c12:	d102      	bne.n	8002c1a <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 8002c14:	23cc      	movs	r3, #204	; 0xcc
 8002c16:	71fb      	strb	r3, [r7, #7]
 8002c18:	e009      	b.n	8002c2e <FLASH_OB_GetRDP+0x2e>
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
 8002c1a:	4b08      	ldr	r3, [pc, #32]	; (8002c3c <FLASH_OB_GetRDP+0x3c>)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2baa      	cmp	r3, #170	; 0xaa
 8002c22:	d102      	bne.n	8002c2a <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 8002c24:	23aa      	movs	r3, #170	; 0xaa
 8002c26:	71fb      	strb	r3, [r7, #7]
 8002c28:	e001      	b.n	8002c2e <FLASH_OB_GetRDP+0x2e>
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
 8002c2a:	2355      	movs	r3, #85	; 0x55
 8002c2c:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 8002c2e:	79fb      	ldrb	r3, [r7, #7]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	40023c15 	.word	0x40023c15

08002c40 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 8002c44:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <FLASH_OB_GetBOR+0x1c>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	f003 030c 	and.w	r3, r3, #12
 8002c4e:	b2db      	uxtb	r3, r3
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	40023c14 	.word	0x40023c14

08002c60 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002c64:	4b20      	ldr	r3, [pc, #128]	; (8002ce8 <FLASH_FlushCaches+0x88>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d017      	beq.n	8002ca0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002c70:	4b1d      	ldr	r3, [pc, #116]	; (8002ce8 <FLASH_FlushCaches+0x88>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a1c      	ldr	r2, [pc, #112]	; (8002ce8 <FLASH_FlushCaches+0x88>)
 8002c76:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c7a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002c7c:	4b1a      	ldr	r3, [pc, #104]	; (8002ce8 <FLASH_FlushCaches+0x88>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a19      	ldr	r2, [pc, #100]	; (8002ce8 <FLASH_FlushCaches+0x88>)
 8002c82:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c86:	6013      	str	r3, [r2, #0]
 8002c88:	4b17      	ldr	r3, [pc, #92]	; (8002ce8 <FLASH_FlushCaches+0x88>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a16      	ldr	r2, [pc, #88]	; (8002ce8 <FLASH_FlushCaches+0x88>)
 8002c8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c92:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c94:	4b14      	ldr	r3, [pc, #80]	; (8002ce8 <FLASH_FlushCaches+0x88>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a13      	ldr	r2, [pc, #76]	; (8002ce8 <FLASH_FlushCaches+0x88>)
 8002c9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c9e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002ca0:	4b11      	ldr	r3, [pc, #68]	; (8002ce8 <FLASH_FlushCaches+0x88>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d017      	beq.n	8002cdc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002cac:	4b0e      	ldr	r3, [pc, #56]	; (8002ce8 <FLASH_FlushCaches+0x88>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a0d      	ldr	r2, [pc, #52]	; (8002ce8 <FLASH_FlushCaches+0x88>)
 8002cb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002cb6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002cb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ce8 <FLASH_FlushCaches+0x88>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a0a      	ldr	r2, [pc, #40]	; (8002ce8 <FLASH_FlushCaches+0x88>)
 8002cbe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002cc2:	6013      	str	r3, [r2, #0]
 8002cc4:	4b08      	ldr	r3, [pc, #32]	; (8002ce8 <FLASH_FlushCaches+0x88>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a07      	ldr	r2, [pc, #28]	; (8002ce8 <FLASH_FlushCaches+0x88>)
 8002cca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002cce:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cd0:	4b05      	ldr	r3, [pc, #20]	; (8002ce8 <FLASH_FlushCaches+0x88>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a04      	ldr	r2, [pc, #16]	; (8002ce8 <FLASH_FlushCaches+0x88>)
 8002cd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cda:	6013      	str	r3, [r2, #0]
  }
}
 8002cdc:	bf00      	nop
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	40023c00 	.word	0x40023c00

08002cec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b089      	sub	sp, #36	; 0x24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d02:	2300      	movs	r3, #0
 8002d04:	61fb      	str	r3, [r7, #28]
 8002d06:	e159      	b.n	8002fbc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d08:	2201      	movs	r2, #1
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	f040 8148 	bne.w	8002fb6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f003 0303 	and.w	r3, r3, #3
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d005      	beq.n	8002d3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d130      	bne.n	8002da0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	2203      	movs	r2, #3
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4013      	ands	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	68da      	ldr	r2, [r3, #12]
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d74:	2201      	movs	r2, #1
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	43db      	mvns	r3, r3
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	4013      	ands	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	091b      	lsrs	r3, r3, #4
 8002d8a:	f003 0201 	and.w	r2, r3, #1
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f003 0303 	and.w	r3, r3, #3
 8002da8:	2b03      	cmp	r3, #3
 8002daa:	d017      	beq.n	8002ddc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	2203      	movs	r2, #3
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f003 0303 	and.w	r3, r3, #3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d123      	bne.n	8002e30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	08da      	lsrs	r2, r3, #3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	3208      	adds	r2, #8
 8002df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	220f      	movs	r2, #15
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	43db      	mvns	r3, r3
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	691a      	ldr	r2, [r3, #16]
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f003 0307 	and.w	r3, r3, #7
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	08da      	lsrs	r2, r3, #3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	3208      	adds	r2, #8
 8002e2a:	69b9      	ldr	r1, [r7, #24]
 8002e2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	2203      	movs	r2, #3
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	43db      	mvns	r3, r3
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	4013      	ands	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f003 0203 	and.w	r2, r3, #3
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f000 80a2 	beq.w	8002fb6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e72:	2300      	movs	r3, #0
 8002e74:	60fb      	str	r3, [r7, #12]
 8002e76:	4b57      	ldr	r3, [pc, #348]	; (8002fd4 <HAL_GPIO_Init+0x2e8>)
 8002e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7a:	4a56      	ldr	r2, [pc, #344]	; (8002fd4 <HAL_GPIO_Init+0x2e8>)
 8002e7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e80:	6453      	str	r3, [r2, #68]	; 0x44
 8002e82:	4b54      	ldr	r3, [pc, #336]	; (8002fd4 <HAL_GPIO_Init+0x2e8>)
 8002e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e8e:	4a52      	ldr	r2, [pc, #328]	; (8002fd8 <HAL_GPIO_Init+0x2ec>)
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	089b      	lsrs	r3, r3, #2
 8002e94:	3302      	adds	r3, #2
 8002e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	f003 0303 	and.w	r3, r3, #3
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	220f      	movs	r2, #15
 8002ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eaa:	43db      	mvns	r3, r3
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a49      	ldr	r2, [pc, #292]	; (8002fdc <HAL_GPIO_Init+0x2f0>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d019      	beq.n	8002eee <HAL_GPIO_Init+0x202>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a48      	ldr	r2, [pc, #288]	; (8002fe0 <HAL_GPIO_Init+0x2f4>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d013      	beq.n	8002eea <HAL_GPIO_Init+0x1fe>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a47      	ldr	r2, [pc, #284]	; (8002fe4 <HAL_GPIO_Init+0x2f8>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d00d      	beq.n	8002ee6 <HAL_GPIO_Init+0x1fa>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a46      	ldr	r2, [pc, #280]	; (8002fe8 <HAL_GPIO_Init+0x2fc>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d007      	beq.n	8002ee2 <HAL_GPIO_Init+0x1f6>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a45      	ldr	r2, [pc, #276]	; (8002fec <HAL_GPIO_Init+0x300>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d101      	bne.n	8002ede <HAL_GPIO_Init+0x1f2>
 8002eda:	2304      	movs	r3, #4
 8002edc:	e008      	b.n	8002ef0 <HAL_GPIO_Init+0x204>
 8002ede:	2307      	movs	r3, #7
 8002ee0:	e006      	b.n	8002ef0 <HAL_GPIO_Init+0x204>
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e004      	b.n	8002ef0 <HAL_GPIO_Init+0x204>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	e002      	b.n	8002ef0 <HAL_GPIO_Init+0x204>
 8002eea:	2301      	movs	r3, #1
 8002eec:	e000      	b.n	8002ef0 <HAL_GPIO_Init+0x204>
 8002eee:	2300      	movs	r3, #0
 8002ef0:	69fa      	ldr	r2, [r7, #28]
 8002ef2:	f002 0203 	and.w	r2, r2, #3
 8002ef6:	0092      	lsls	r2, r2, #2
 8002ef8:	4093      	lsls	r3, r2
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f00:	4935      	ldr	r1, [pc, #212]	; (8002fd8 <HAL_GPIO_Init+0x2ec>)
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	089b      	lsrs	r3, r3, #2
 8002f06:	3302      	adds	r3, #2
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f0e:	4b38      	ldr	r3, [pc, #224]	; (8002ff0 <HAL_GPIO_Init+0x304>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	43db      	mvns	r3, r3
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f32:	4a2f      	ldr	r2, [pc, #188]	; (8002ff0 <HAL_GPIO_Init+0x304>)
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f38:	4b2d      	ldr	r3, [pc, #180]	; (8002ff0 <HAL_GPIO_Init+0x304>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	43db      	mvns	r3, r3
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	4013      	ands	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f5c:	4a24      	ldr	r2, [pc, #144]	; (8002ff0 <HAL_GPIO_Init+0x304>)
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f62:	4b23      	ldr	r3, [pc, #140]	; (8002ff0 <HAL_GPIO_Init+0x304>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f86:	4a1a      	ldr	r2, [pc, #104]	; (8002ff0 <HAL_GPIO_Init+0x304>)
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f8c:	4b18      	ldr	r3, [pc, #96]	; (8002ff0 <HAL_GPIO_Init+0x304>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	43db      	mvns	r3, r3
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d003      	beq.n	8002fb0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fb0:	4a0f      	ldr	r2, [pc, #60]	; (8002ff0 <HAL_GPIO_Init+0x304>)
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	61fb      	str	r3, [r7, #28]
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	2b0f      	cmp	r3, #15
 8002fc0:	f67f aea2 	bls.w	8002d08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fc4:	bf00      	nop
 8002fc6:	bf00      	nop
 8002fc8:	3724      	adds	r7, #36	; 0x24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	40013800 	.word	0x40013800
 8002fdc:	40020000 	.word	0x40020000
 8002fe0:	40020400 	.word	0x40020400
 8002fe4:	40020800 	.word	0x40020800
 8002fe8:	40020c00 	.word	0x40020c00
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	40013c00 	.word	0x40013c00

08002ff4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b087      	sub	sp, #28
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ffe:	2300      	movs	r3, #0
 8003000:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003002:	2300      	movs	r3, #0
 8003004:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003006:	2300      	movs	r3, #0
 8003008:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800300a:	2300      	movs	r3, #0
 800300c:	617b      	str	r3, [r7, #20]
 800300e:	e0bb      	b.n	8003188 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003010:	2201      	movs	r2, #1
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	4013      	ands	r3, r2
 8003020:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	429a      	cmp	r2, r3
 8003028:	f040 80ab 	bne.w	8003182 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800302c:	4a5c      	ldr	r2, [pc, #368]	; (80031a0 <HAL_GPIO_DeInit+0x1ac>)
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	089b      	lsrs	r3, r3, #2
 8003032:	3302      	adds	r3, #2
 8003034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003038:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f003 0303 	and.w	r3, r3, #3
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	220f      	movs	r2, #15
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	68ba      	ldr	r2, [r7, #8]
 800304a:	4013      	ands	r3, r2
 800304c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a54      	ldr	r2, [pc, #336]	; (80031a4 <HAL_GPIO_DeInit+0x1b0>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d019      	beq.n	800308a <HAL_GPIO_DeInit+0x96>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a53      	ldr	r2, [pc, #332]	; (80031a8 <HAL_GPIO_DeInit+0x1b4>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d013      	beq.n	8003086 <HAL_GPIO_DeInit+0x92>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a52      	ldr	r2, [pc, #328]	; (80031ac <HAL_GPIO_DeInit+0x1b8>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d00d      	beq.n	8003082 <HAL_GPIO_DeInit+0x8e>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a51      	ldr	r2, [pc, #324]	; (80031b0 <HAL_GPIO_DeInit+0x1bc>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d007      	beq.n	800307e <HAL_GPIO_DeInit+0x8a>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a50      	ldr	r2, [pc, #320]	; (80031b4 <HAL_GPIO_DeInit+0x1c0>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d101      	bne.n	800307a <HAL_GPIO_DeInit+0x86>
 8003076:	2304      	movs	r3, #4
 8003078:	e008      	b.n	800308c <HAL_GPIO_DeInit+0x98>
 800307a:	2307      	movs	r3, #7
 800307c:	e006      	b.n	800308c <HAL_GPIO_DeInit+0x98>
 800307e:	2303      	movs	r3, #3
 8003080:	e004      	b.n	800308c <HAL_GPIO_DeInit+0x98>
 8003082:	2302      	movs	r3, #2
 8003084:	e002      	b.n	800308c <HAL_GPIO_DeInit+0x98>
 8003086:	2301      	movs	r3, #1
 8003088:	e000      	b.n	800308c <HAL_GPIO_DeInit+0x98>
 800308a:	2300      	movs	r3, #0
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	f002 0203 	and.w	r2, r2, #3
 8003092:	0092      	lsls	r2, r2, #2
 8003094:	4093      	lsls	r3, r2
 8003096:	68ba      	ldr	r2, [r7, #8]
 8003098:	429a      	cmp	r2, r3
 800309a:	d132      	bne.n	8003102 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800309c:	4b46      	ldr	r3, [pc, #280]	; (80031b8 <HAL_GPIO_DeInit+0x1c4>)
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	43db      	mvns	r3, r3
 80030a4:	4944      	ldr	r1, [pc, #272]	; (80031b8 <HAL_GPIO_DeInit+0x1c4>)
 80030a6:	4013      	ands	r3, r2
 80030a8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80030aa:	4b43      	ldr	r3, [pc, #268]	; (80031b8 <HAL_GPIO_DeInit+0x1c4>)
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	43db      	mvns	r3, r3
 80030b2:	4941      	ldr	r1, [pc, #260]	; (80031b8 <HAL_GPIO_DeInit+0x1c4>)
 80030b4:	4013      	ands	r3, r2
 80030b6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80030b8:	4b3f      	ldr	r3, [pc, #252]	; (80031b8 <HAL_GPIO_DeInit+0x1c4>)
 80030ba:	68da      	ldr	r2, [r3, #12]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	43db      	mvns	r3, r3
 80030c0:	493d      	ldr	r1, [pc, #244]	; (80031b8 <HAL_GPIO_DeInit+0x1c4>)
 80030c2:	4013      	ands	r3, r2
 80030c4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80030c6:	4b3c      	ldr	r3, [pc, #240]	; (80031b8 <HAL_GPIO_DeInit+0x1c4>)
 80030c8:	689a      	ldr	r2, [r3, #8]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	43db      	mvns	r3, r3
 80030ce:	493a      	ldr	r1, [pc, #232]	; (80031b8 <HAL_GPIO_DeInit+0x1c4>)
 80030d0:	4013      	ands	r3, r2
 80030d2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	f003 0303 	and.w	r3, r3, #3
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	220f      	movs	r2, #15
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80030e4:	4a2e      	ldr	r2, [pc, #184]	; (80031a0 <HAL_GPIO_DeInit+0x1ac>)
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	089b      	lsrs	r3, r3, #2
 80030ea:	3302      	adds	r3, #2
 80030ec:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	43da      	mvns	r2, r3
 80030f4:	482a      	ldr	r0, [pc, #168]	; (80031a0 <HAL_GPIO_DeInit+0x1ac>)
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	089b      	lsrs	r3, r3, #2
 80030fa:	400a      	ands	r2, r1
 80030fc:	3302      	adds	r3, #2
 80030fe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	2103      	movs	r1, #3
 800310c:	fa01 f303 	lsl.w	r3, r1, r3
 8003110:	43db      	mvns	r3, r3
 8003112:	401a      	ands	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	08da      	lsrs	r2, r3, #3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3208      	adds	r2, #8
 8003120:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f003 0307 	and.w	r3, r3, #7
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	220f      	movs	r2, #15
 800312e:	fa02 f303 	lsl.w	r3, r2, r3
 8003132:	43db      	mvns	r3, r3
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	08d2      	lsrs	r2, r2, #3
 8003138:	4019      	ands	r1, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	3208      	adds	r2, #8
 800313e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	2103      	movs	r1, #3
 800314c:	fa01 f303 	lsl.w	r3, r1, r3
 8003150:	43db      	mvns	r3, r3
 8003152:	401a      	ands	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	2101      	movs	r1, #1
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	fa01 f303 	lsl.w	r3, r1, r3
 8003164:	43db      	mvns	r3, r3
 8003166:	401a      	ands	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	2103      	movs	r1, #3
 8003176:	fa01 f303 	lsl.w	r3, r1, r3
 800317a:	43db      	mvns	r3, r3
 800317c:	401a      	ands	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	3301      	adds	r3, #1
 8003186:	617b      	str	r3, [r7, #20]
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	2b0f      	cmp	r3, #15
 800318c:	f67f af40 	bls.w	8003010 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003190:	bf00      	nop
 8003192:	bf00      	nop
 8003194:	371c      	adds	r7, #28
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	40013800 	.word	0x40013800
 80031a4:	40020000 	.word	0x40020000
 80031a8:	40020400 	.word	0x40020400
 80031ac:	40020800 	.word	0x40020800
 80031b0:	40020c00 	.word	0x40020c00
 80031b4:	40021000 	.word	0x40021000
 80031b8:	40013c00 	.word	0x40013c00

080031bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	460b      	mov	r3, r1
 80031c6:	807b      	strh	r3, [r7, #2]
 80031c8:	4613      	mov	r3, r2
 80031ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031cc:	787b      	ldrb	r3, [r7, #1]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031d2:	887a      	ldrh	r2, [r7, #2]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031d8:	e003      	b.n	80031e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031da:	887b      	ldrh	r3, [r7, #2]
 80031dc:	041a      	lsls	r2, r3, #16
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	619a      	str	r2, [r3, #24]
}
 80031e2:	bf00      	nop
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr

080031ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b085      	sub	sp, #20
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
 80031f6:	460b      	mov	r3, r1
 80031f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003200:	887a      	ldrh	r2, [r7, #2]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	4013      	ands	r3, r2
 8003206:	041a      	lsls	r2, r3, #16
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	43d9      	mvns	r1, r3
 800320c:	887b      	ldrh	r3, [r7, #2]
 800320e:	400b      	ands	r3, r1
 8003210:	431a      	orrs	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	619a      	str	r2, [r3, #24]
}
 8003216:	bf00      	nop
 8003218:	3714      	adds	r7, #20
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
	...

08003224 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e267      	b.n	8003706 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d075      	beq.n	800332e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003242:	4b88      	ldr	r3, [pc, #544]	; (8003464 <HAL_RCC_OscConfig+0x240>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 030c 	and.w	r3, r3, #12
 800324a:	2b04      	cmp	r3, #4
 800324c:	d00c      	beq.n	8003268 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800324e:	4b85      	ldr	r3, [pc, #532]	; (8003464 <HAL_RCC_OscConfig+0x240>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003256:	2b08      	cmp	r3, #8
 8003258:	d112      	bne.n	8003280 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800325a:	4b82      	ldr	r3, [pc, #520]	; (8003464 <HAL_RCC_OscConfig+0x240>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003262:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003266:	d10b      	bne.n	8003280 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003268:	4b7e      	ldr	r3, [pc, #504]	; (8003464 <HAL_RCC_OscConfig+0x240>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d05b      	beq.n	800332c <HAL_RCC_OscConfig+0x108>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d157      	bne.n	800332c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e242      	b.n	8003706 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003288:	d106      	bne.n	8003298 <HAL_RCC_OscConfig+0x74>
 800328a:	4b76      	ldr	r3, [pc, #472]	; (8003464 <HAL_RCC_OscConfig+0x240>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a75      	ldr	r2, [pc, #468]	; (8003464 <HAL_RCC_OscConfig+0x240>)
 8003290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003294:	6013      	str	r3, [r2, #0]
 8003296:	e01d      	b.n	80032d4 <HAL_RCC_OscConfig+0xb0>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032a0:	d10c      	bne.n	80032bc <HAL_RCC_OscConfig+0x98>
 80032a2:	4b70      	ldr	r3, [pc, #448]	; (8003464 <HAL_RCC_OscConfig+0x240>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a6f      	ldr	r2, [pc, #444]	; (8003464 <HAL_RCC_OscConfig+0x240>)
 80032a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032ac:	6013      	str	r3, [r2, #0]
 80032ae:	4b6d      	ldr	r3, [pc, #436]	; (8003464 <HAL_RCC_OscConfig+0x240>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a6c      	ldr	r2, [pc, #432]	; (8003464 <HAL_RCC_OscConfig+0x240>)
 80032b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032b8:	6013      	str	r3, [r2, #0]
 80032ba:	e00b      	b.n	80032d4 <HAL_RCC_OscConfig+0xb0>
 80032bc:	4b69      	ldr	r3, [pc, #420]	; (8003464 <HAL_RCC_OscConfig+0x240>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a68      	ldr	r2, [pc, #416]	; (8003464 <HAL_RCC_OscConfig+0x240>)
 80032c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032c6:	6013      	str	r3, [r2, #0]
 80032c8:	4b66      	ldr	r3, [pc, #408]	; (8003464 <HAL_RCC_OscConfig+0x240>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a65      	ldr	r2, [pc, #404]	; (8003464 <HAL_RCC_OscConfig+0x240>)
 80032ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d013      	beq.n	8003304 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032dc:	f7fe fec2 	bl	8002064 <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032e4:	f7fe febe 	bl	8002064 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b64      	cmp	r3, #100	; 0x64
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e207      	b.n	8003706 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f6:	4b5b      	ldr	r3, [pc, #364]	; (8003464 <HAL_RCC_OscConfig+0x240>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d0f0      	beq.n	80032e4 <HAL_RCC_OscConfig+0xc0>
 8003302:	e014      	b.n	800332e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003304:	f7fe feae 	bl	8002064 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800330c:	f7fe feaa 	bl	8002064 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b64      	cmp	r3, #100	; 0x64
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e1f3      	b.n	8003706 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800331e:	4b51      	ldr	r3, [pc, #324]	; (8003464 <HAL_RCC_OscConfig+0x240>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1f0      	bne.n	800330c <HAL_RCC_OscConfig+0xe8>
 800332a:	e000      	b.n	800332e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800332c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d063      	beq.n	8003402 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800333a:	4b4a      	ldr	r3, [pc, #296]	; (8003464 <HAL_RCC_OscConfig+0x240>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 030c 	and.w	r3, r3, #12
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00b      	beq.n	800335e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003346:	4b47      	ldr	r3, [pc, #284]	; (8003464 <HAL_RCC_OscConfig+0x240>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800334e:	2b08      	cmp	r3, #8
 8003350:	d11c      	bne.n	800338c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003352:	4b44      	ldr	r3, [pc, #272]	; (8003464 <HAL_RCC_OscConfig+0x240>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d116      	bne.n	800338c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800335e:	4b41      	ldr	r3, [pc, #260]	; (8003464 <HAL_RCC_OscConfig+0x240>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d005      	beq.n	8003376 <HAL_RCC_OscConfig+0x152>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d001      	beq.n	8003376 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e1c7      	b.n	8003706 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003376:	4b3b      	ldr	r3, [pc, #236]	; (8003464 <HAL_RCC_OscConfig+0x240>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	4937      	ldr	r1, [pc, #220]	; (8003464 <HAL_RCC_OscConfig+0x240>)
 8003386:	4313      	orrs	r3, r2
 8003388:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800338a:	e03a      	b.n	8003402 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d020      	beq.n	80033d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003394:	4b34      	ldr	r3, [pc, #208]	; (8003468 <HAL_RCC_OscConfig+0x244>)
 8003396:	2201      	movs	r2, #1
 8003398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339a:	f7fe fe63 	bl	8002064 <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a0:	e008      	b.n	80033b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033a2:	f7fe fe5f 	bl	8002064 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d901      	bls.n	80033b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e1a8      	b.n	8003706 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b4:	4b2b      	ldr	r3, [pc, #172]	; (8003464 <HAL_RCC_OscConfig+0x240>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d0f0      	beq.n	80033a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033c0:	4b28      	ldr	r3, [pc, #160]	; (8003464 <HAL_RCC_OscConfig+0x240>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	4925      	ldr	r1, [pc, #148]	; (8003464 <HAL_RCC_OscConfig+0x240>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	600b      	str	r3, [r1, #0]
 80033d4:	e015      	b.n	8003402 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033d6:	4b24      	ldr	r3, [pc, #144]	; (8003468 <HAL_RCC_OscConfig+0x244>)
 80033d8:	2200      	movs	r2, #0
 80033da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033dc:	f7fe fe42 	bl	8002064 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033e4:	f7fe fe3e 	bl	8002064 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e187      	b.n	8003706 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033f6:	4b1b      	ldr	r3, [pc, #108]	; (8003464 <HAL_RCC_OscConfig+0x240>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1f0      	bne.n	80033e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0308 	and.w	r3, r3, #8
 800340a:	2b00      	cmp	r3, #0
 800340c:	d036      	beq.n	800347c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d016      	beq.n	8003444 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003416:	4b15      	ldr	r3, [pc, #84]	; (800346c <HAL_RCC_OscConfig+0x248>)
 8003418:	2201      	movs	r2, #1
 800341a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800341c:	f7fe fe22 	bl	8002064 <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003424:	f7fe fe1e 	bl	8002064 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e167      	b.n	8003706 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003436:	4b0b      	ldr	r3, [pc, #44]	; (8003464 <HAL_RCC_OscConfig+0x240>)
 8003438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d0f0      	beq.n	8003424 <HAL_RCC_OscConfig+0x200>
 8003442:	e01b      	b.n	800347c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003444:	4b09      	ldr	r3, [pc, #36]	; (800346c <HAL_RCC_OscConfig+0x248>)
 8003446:	2200      	movs	r2, #0
 8003448:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800344a:	f7fe fe0b 	bl	8002064 <HAL_GetTick>
 800344e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003450:	e00e      	b.n	8003470 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003452:	f7fe fe07 	bl	8002064 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d907      	bls.n	8003470 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e150      	b.n	8003706 <HAL_RCC_OscConfig+0x4e2>
 8003464:	40023800 	.word	0x40023800
 8003468:	42470000 	.word	0x42470000
 800346c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003470:	4b88      	ldr	r3, [pc, #544]	; (8003694 <HAL_RCC_OscConfig+0x470>)
 8003472:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1ea      	bne.n	8003452 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0304 	and.w	r3, r3, #4
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 8097 	beq.w	80035b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800348a:	2300      	movs	r3, #0
 800348c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800348e:	4b81      	ldr	r3, [pc, #516]	; (8003694 <HAL_RCC_OscConfig+0x470>)
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10f      	bne.n	80034ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800349a:	2300      	movs	r3, #0
 800349c:	60bb      	str	r3, [r7, #8]
 800349e:	4b7d      	ldr	r3, [pc, #500]	; (8003694 <HAL_RCC_OscConfig+0x470>)
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	4a7c      	ldr	r2, [pc, #496]	; (8003694 <HAL_RCC_OscConfig+0x470>)
 80034a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034a8:	6413      	str	r3, [r2, #64]	; 0x40
 80034aa:	4b7a      	ldr	r3, [pc, #488]	; (8003694 <HAL_RCC_OscConfig+0x470>)
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b2:	60bb      	str	r3, [r7, #8]
 80034b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034b6:	2301      	movs	r3, #1
 80034b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ba:	4b77      	ldr	r3, [pc, #476]	; (8003698 <HAL_RCC_OscConfig+0x474>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d118      	bne.n	80034f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034c6:	4b74      	ldr	r3, [pc, #464]	; (8003698 <HAL_RCC_OscConfig+0x474>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a73      	ldr	r2, [pc, #460]	; (8003698 <HAL_RCC_OscConfig+0x474>)
 80034cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034d2:	f7fe fdc7 	bl	8002064 <HAL_GetTick>
 80034d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d8:	e008      	b.n	80034ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034da:	f7fe fdc3 	bl	8002064 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e10c      	b.n	8003706 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ec:	4b6a      	ldr	r3, [pc, #424]	; (8003698 <HAL_RCC_OscConfig+0x474>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0f0      	beq.n	80034da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d106      	bne.n	800350e <HAL_RCC_OscConfig+0x2ea>
 8003500:	4b64      	ldr	r3, [pc, #400]	; (8003694 <HAL_RCC_OscConfig+0x470>)
 8003502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003504:	4a63      	ldr	r2, [pc, #396]	; (8003694 <HAL_RCC_OscConfig+0x470>)
 8003506:	f043 0301 	orr.w	r3, r3, #1
 800350a:	6713      	str	r3, [r2, #112]	; 0x70
 800350c:	e01c      	b.n	8003548 <HAL_RCC_OscConfig+0x324>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	2b05      	cmp	r3, #5
 8003514:	d10c      	bne.n	8003530 <HAL_RCC_OscConfig+0x30c>
 8003516:	4b5f      	ldr	r3, [pc, #380]	; (8003694 <HAL_RCC_OscConfig+0x470>)
 8003518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351a:	4a5e      	ldr	r2, [pc, #376]	; (8003694 <HAL_RCC_OscConfig+0x470>)
 800351c:	f043 0304 	orr.w	r3, r3, #4
 8003520:	6713      	str	r3, [r2, #112]	; 0x70
 8003522:	4b5c      	ldr	r3, [pc, #368]	; (8003694 <HAL_RCC_OscConfig+0x470>)
 8003524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003526:	4a5b      	ldr	r2, [pc, #364]	; (8003694 <HAL_RCC_OscConfig+0x470>)
 8003528:	f043 0301 	orr.w	r3, r3, #1
 800352c:	6713      	str	r3, [r2, #112]	; 0x70
 800352e:	e00b      	b.n	8003548 <HAL_RCC_OscConfig+0x324>
 8003530:	4b58      	ldr	r3, [pc, #352]	; (8003694 <HAL_RCC_OscConfig+0x470>)
 8003532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003534:	4a57      	ldr	r2, [pc, #348]	; (8003694 <HAL_RCC_OscConfig+0x470>)
 8003536:	f023 0301 	bic.w	r3, r3, #1
 800353a:	6713      	str	r3, [r2, #112]	; 0x70
 800353c:	4b55      	ldr	r3, [pc, #340]	; (8003694 <HAL_RCC_OscConfig+0x470>)
 800353e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003540:	4a54      	ldr	r2, [pc, #336]	; (8003694 <HAL_RCC_OscConfig+0x470>)
 8003542:	f023 0304 	bic.w	r3, r3, #4
 8003546:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d015      	beq.n	800357c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003550:	f7fe fd88 	bl	8002064 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003556:	e00a      	b.n	800356e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003558:	f7fe fd84 	bl	8002064 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	f241 3288 	movw	r2, #5000	; 0x1388
 8003566:	4293      	cmp	r3, r2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e0cb      	b.n	8003706 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800356e:	4b49      	ldr	r3, [pc, #292]	; (8003694 <HAL_RCC_OscConfig+0x470>)
 8003570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d0ee      	beq.n	8003558 <HAL_RCC_OscConfig+0x334>
 800357a:	e014      	b.n	80035a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800357c:	f7fe fd72 	bl	8002064 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003582:	e00a      	b.n	800359a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003584:	f7fe fd6e 	bl	8002064 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003592:	4293      	cmp	r3, r2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e0b5      	b.n	8003706 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800359a:	4b3e      	ldr	r3, [pc, #248]	; (8003694 <HAL_RCC_OscConfig+0x470>)
 800359c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1ee      	bne.n	8003584 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035a6:	7dfb      	ldrb	r3, [r7, #23]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d105      	bne.n	80035b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ac:	4b39      	ldr	r3, [pc, #228]	; (8003694 <HAL_RCC_OscConfig+0x470>)
 80035ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b0:	4a38      	ldr	r2, [pc, #224]	; (8003694 <HAL_RCC_OscConfig+0x470>)
 80035b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f000 80a1 	beq.w	8003704 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035c2:	4b34      	ldr	r3, [pc, #208]	; (8003694 <HAL_RCC_OscConfig+0x470>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f003 030c 	and.w	r3, r3, #12
 80035ca:	2b08      	cmp	r3, #8
 80035cc:	d05c      	beq.n	8003688 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d141      	bne.n	800365a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035d6:	4b31      	ldr	r3, [pc, #196]	; (800369c <HAL_RCC_OscConfig+0x478>)
 80035d8:	2200      	movs	r2, #0
 80035da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035dc:	f7fe fd42 	bl	8002064 <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035e4:	f7fe fd3e 	bl	8002064 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e087      	b.n	8003706 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035f6:	4b27      	ldr	r3, [pc, #156]	; (8003694 <HAL_RCC_OscConfig+0x470>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1f0      	bne.n	80035e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	69da      	ldr	r2, [r3, #28]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	431a      	orrs	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	019b      	lsls	r3, r3, #6
 8003612:	431a      	orrs	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003618:	085b      	lsrs	r3, r3, #1
 800361a:	3b01      	subs	r3, #1
 800361c:	041b      	lsls	r3, r3, #16
 800361e:	431a      	orrs	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003624:	061b      	lsls	r3, r3, #24
 8003626:	491b      	ldr	r1, [pc, #108]	; (8003694 <HAL_RCC_OscConfig+0x470>)
 8003628:	4313      	orrs	r3, r2
 800362a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800362c:	4b1b      	ldr	r3, [pc, #108]	; (800369c <HAL_RCC_OscConfig+0x478>)
 800362e:	2201      	movs	r2, #1
 8003630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003632:	f7fe fd17 	bl	8002064 <HAL_GetTick>
 8003636:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003638:	e008      	b.n	800364c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800363a:	f7fe fd13 	bl	8002064 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b02      	cmp	r3, #2
 8003646:	d901      	bls.n	800364c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e05c      	b.n	8003706 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800364c:	4b11      	ldr	r3, [pc, #68]	; (8003694 <HAL_RCC_OscConfig+0x470>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d0f0      	beq.n	800363a <HAL_RCC_OscConfig+0x416>
 8003658:	e054      	b.n	8003704 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800365a:	4b10      	ldr	r3, [pc, #64]	; (800369c <HAL_RCC_OscConfig+0x478>)
 800365c:	2200      	movs	r2, #0
 800365e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003660:	f7fe fd00 	bl	8002064 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003668:	f7fe fcfc 	bl	8002064 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e045      	b.n	8003706 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800367a:	4b06      	ldr	r3, [pc, #24]	; (8003694 <HAL_RCC_OscConfig+0x470>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1f0      	bne.n	8003668 <HAL_RCC_OscConfig+0x444>
 8003686:	e03d      	b.n	8003704 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d107      	bne.n	80036a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e038      	b.n	8003706 <HAL_RCC_OscConfig+0x4e2>
 8003694:	40023800 	.word	0x40023800
 8003698:	40007000 	.word	0x40007000
 800369c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036a0:	4b1b      	ldr	r3, [pc, #108]	; (8003710 <HAL_RCC_OscConfig+0x4ec>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d028      	beq.n	8003700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d121      	bne.n	8003700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d11a      	bne.n	8003700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036d0:	4013      	ands	r3, r2
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036d8:	4293      	cmp	r3, r2
 80036da:	d111      	bne.n	8003700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e6:	085b      	lsrs	r3, r3, #1
 80036e8:	3b01      	subs	r3, #1
 80036ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d107      	bne.n	8003700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d001      	beq.n	8003704 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e000      	b.n	8003706 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3718      	adds	r7, #24
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	40023800 	.word	0x40023800

08003714 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e0cc      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003728:	4b68      	ldr	r3, [pc, #416]	; (80038cc <HAL_RCC_ClockConfig+0x1b8>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	429a      	cmp	r2, r3
 8003734:	d90c      	bls.n	8003750 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003736:	4b65      	ldr	r3, [pc, #404]	; (80038cc <HAL_RCC_ClockConfig+0x1b8>)
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	b2d2      	uxtb	r2, r2
 800373c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800373e:	4b63      	ldr	r3, [pc, #396]	; (80038cc <HAL_RCC_ClockConfig+0x1b8>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0307 	and.w	r3, r3, #7
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	429a      	cmp	r2, r3
 800374a:	d001      	beq.n	8003750 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e0b8      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d020      	beq.n	800379e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0304 	and.w	r3, r3, #4
 8003764:	2b00      	cmp	r3, #0
 8003766:	d005      	beq.n	8003774 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003768:	4b59      	ldr	r3, [pc, #356]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	4a58      	ldr	r2, [pc, #352]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 800376e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003772:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0308 	and.w	r3, r3, #8
 800377c:	2b00      	cmp	r3, #0
 800377e:	d005      	beq.n	800378c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003780:	4b53      	ldr	r3, [pc, #332]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	4a52      	ldr	r2, [pc, #328]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003786:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800378a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800378c:	4b50      	ldr	r3, [pc, #320]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	494d      	ldr	r1, [pc, #308]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 800379a:	4313      	orrs	r3, r2
 800379c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d044      	beq.n	8003834 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d107      	bne.n	80037c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b2:	4b47      	ldr	r3, [pc, #284]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d119      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e07f      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d003      	beq.n	80037d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037ce:	2b03      	cmp	r3, #3
 80037d0:	d107      	bne.n	80037e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d2:	4b3f      	ldr	r3, [pc, #252]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d109      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e06f      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e2:	4b3b      	ldr	r3, [pc, #236]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e067      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037f2:	4b37      	ldr	r3, [pc, #220]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f023 0203 	bic.w	r2, r3, #3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	4934      	ldr	r1, [pc, #208]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003800:	4313      	orrs	r3, r2
 8003802:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003804:	f7fe fc2e 	bl	8002064 <HAL_GetTick>
 8003808:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800380a:	e00a      	b.n	8003822 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800380c:	f7fe fc2a 	bl	8002064 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	f241 3288 	movw	r2, #5000	; 0x1388
 800381a:	4293      	cmp	r3, r2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e04f      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003822:	4b2b      	ldr	r3, [pc, #172]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f003 020c 	and.w	r2, r3, #12
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	429a      	cmp	r2, r3
 8003832:	d1eb      	bne.n	800380c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003834:	4b25      	ldr	r3, [pc, #148]	; (80038cc <HAL_RCC_ClockConfig+0x1b8>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	429a      	cmp	r2, r3
 8003840:	d20c      	bcs.n	800385c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003842:	4b22      	ldr	r3, [pc, #136]	; (80038cc <HAL_RCC_ClockConfig+0x1b8>)
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	b2d2      	uxtb	r2, r2
 8003848:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800384a:	4b20      	ldr	r3, [pc, #128]	; (80038cc <HAL_RCC_ClockConfig+0x1b8>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0307 	and.w	r3, r3, #7
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	429a      	cmp	r2, r3
 8003856:	d001      	beq.n	800385c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e032      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b00      	cmp	r3, #0
 8003866:	d008      	beq.n	800387a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003868:	4b19      	ldr	r3, [pc, #100]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	4916      	ldr	r1, [pc, #88]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003876:	4313      	orrs	r3, r2
 8003878:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0308 	and.w	r3, r3, #8
 8003882:	2b00      	cmp	r3, #0
 8003884:	d009      	beq.n	800389a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003886:	4b12      	ldr	r3, [pc, #72]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	490e      	ldr	r1, [pc, #56]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003896:	4313      	orrs	r3, r2
 8003898:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800389a:	f000 f821 	bl	80038e0 <HAL_RCC_GetSysClockFreq>
 800389e:	4602      	mov	r2, r0
 80038a0:	4b0b      	ldr	r3, [pc, #44]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	091b      	lsrs	r3, r3, #4
 80038a6:	f003 030f 	and.w	r3, r3, #15
 80038aa:	490a      	ldr	r1, [pc, #40]	; (80038d4 <HAL_RCC_ClockConfig+0x1c0>)
 80038ac:	5ccb      	ldrb	r3, [r1, r3]
 80038ae:	fa22 f303 	lsr.w	r3, r2, r3
 80038b2:	4a09      	ldr	r2, [pc, #36]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 80038b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038b6:	4b09      	ldr	r3, [pc, #36]	; (80038dc <HAL_RCC_ClockConfig+0x1c8>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fe fb8e 	bl	8001fdc <HAL_InitTick>

  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	40023c00 	.word	0x40023c00
 80038d0:	40023800 	.word	0x40023800
 80038d4:	0800919c 	.word	0x0800919c
 80038d8:	20000008 	.word	0x20000008
 80038dc:	2000000c 	.word	0x2000000c

080038e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038e4:	b094      	sub	sp, #80	; 0x50
 80038e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038e8:	2300      	movs	r3, #0
 80038ea:	647b      	str	r3, [r7, #68]	; 0x44
 80038ec:	2300      	movs	r3, #0
 80038ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038f0:	2300      	movs	r3, #0
 80038f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80038f4:	2300      	movs	r3, #0
 80038f6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038f8:	4b79      	ldr	r3, [pc, #484]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x200>)
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f003 030c 	and.w	r3, r3, #12
 8003900:	2b08      	cmp	r3, #8
 8003902:	d00d      	beq.n	8003920 <HAL_RCC_GetSysClockFreq+0x40>
 8003904:	2b08      	cmp	r3, #8
 8003906:	f200 80e1 	bhi.w	8003acc <HAL_RCC_GetSysClockFreq+0x1ec>
 800390a:	2b00      	cmp	r3, #0
 800390c:	d002      	beq.n	8003914 <HAL_RCC_GetSysClockFreq+0x34>
 800390e:	2b04      	cmp	r3, #4
 8003910:	d003      	beq.n	800391a <HAL_RCC_GetSysClockFreq+0x3a>
 8003912:	e0db      	b.n	8003acc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003914:	4b73      	ldr	r3, [pc, #460]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003916:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003918:	e0db      	b.n	8003ad2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800391a:	4b73      	ldr	r3, [pc, #460]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x208>)
 800391c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800391e:	e0d8      	b.n	8003ad2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003920:	4b6f      	ldr	r3, [pc, #444]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003928:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800392a:	4b6d      	ldr	r3, [pc, #436]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x200>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d063      	beq.n	80039fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003936:	4b6a      	ldr	r3, [pc, #424]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	099b      	lsrs	r3, r3, #6
 800393c:	2200      	movs	r2, #0
 800393e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003940:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003948:	633b      	str	r3, [r7, #48]	; 0x30
 800394a:	2300      	movs	r3, #0
 800394c:	637b      	str	r3, [r7, #52]	; 0x34
 800394e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003952:	4622      	mov	r2, r4
 8003954:	462b      	mov	r3, r5
 8003956:	f04f 0000 	mov.w	r0, #0
 800395a:	f04f 0100 	mov.w	r1, #0
 800395e:	0159      	lsls	r1, r3, #5
 8003960:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003964:	0150      	lsls	r0, r2, #5
 8003966:	4602      	mov	r2, r0
 8003968:	460b      	mov	r3, r1
 800396a:	4621      	mov	r1, r4
 800396c:	1a51      	subs	r1, r2, r1
 800396e:	6139      	str	r1, [r7, #16]
 8003970:	4629      	mov	r1, r5
 8003972:	eb63 0301 	sbc.w	r3, r3, r1
 8003976:	617b      	str	r3, [r7, #20]
 8003978:	f04f 0200 	mov.w	r2, #0
 800397c:	f04f 0300 	mov.w	r3, #0
 8003980:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003984:	4659      	mov	r1, fp
 8003986:	018b      	lsls	r3, r1, #6
 8003988:	4651      	mov	r1, sl
 800398a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800398e:	4651      	mov	r1, sl
 8003990:	018a      	lsls	r2, r1, #6
 8003992:	4651      	mov	r1, sl
 8003994:	ebb2 0801 	subs.w	r8, r2, r1
 8003998:	4659      	mov	r1, fp
 800399a:	eb63 0901 	sbc.w	r9, r3, r1
 800399e:	f04f 0200 	mov.w	r2, #0
 80039a2:	f04f 0300 	mov.w	r3, #0
 80039a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039b2:	4690      	mov	r8, r2
 80039b4:	4699      	mov	r9, r3
 80039b6:	4623      	mov	r3, r4
 80039b8:	eb18 0303 	adds.w	r3, r8, r3
 80039bc:	60bb      	str	r3, [r7, #8]
 80039be:	462b      	mov	r3, r5
 80039c0:	eb49 0303 	adc.w	r3, r9, r3
 80039c4:	60fb      	str	r3, [r7, #12]
 80039c6:	f04f 0200 	mov.w	r2, #0
 80039ca:	f04f 0300 	mov.w	r3, #0
 80039ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80039d2:	4629      	mov	r1, r5
 80039d4:	024b      	lsls	r3, r1, #9
 80039d6:	4621      	mov	r1, r4
 80039d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039dc:	4621      	mov	r1, r4
 80039de:	024a      	lsls	r2, r1, #9
 80039e0:	4610      	mov	r0, r2
 80039e2:	4619      	mov	r1, r3
 80039e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039e6:	2200      	movs	r2, #0
 80039e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80039ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039f0:	f7fc fc46 	bl	8000280 <__aeabi_uldivmod>
 80039f4:	4602      	mov	r2, r0
 80039f6:	460b      	mov	r3, r1
 80039f8:	4613      	mov	r3, r2
 80039fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039fc:	e058      	b.n	8003ab0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039fe:	4b38      	ldr	r3, [pc, #224]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	099b      	lsrs	r3, r3, #6
 8003a04:	2200      	movs	r2, #0
 8003a06:	4618      	mov	r0, r3
 8003a08:	4611      	mov	r1, r2
 8003a0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a0e:	623b      	str	r3, [r7, #32]
 8003a10:	2300      	movs	r3, #0
 8003a12:	627b      	str	r3, [r7, #36]	; 0x24
 8003a14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a18:	4642      	mov	r2, r8
 8003a1a:	464b      	mov	r3, r9
 8003a1c:	f04f 0000 	mov.w	r0, #0
 8003a20:	f04f 0100 	mov.w	r1, #0
 8003a24:	0159      	lsls	r1, r3, #5
 8003a26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a2a:	0150      	lsls	r0, r2, #5
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	460b      	mov	r3, r1
 8003a30:	4641      	mov	r1, r8
 8003a32:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a36:	4649      	mov	r1, r9
 8003a38:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a3c:	f04f 0200 	mov.w	r2, #0
 8003a40:	f04f 0300 	mov.w	r3, #0
 8003a44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a50:	ebb2 040a 	subs.w	r4, r2, sl
 8003a54:	eb63 050b 	sbc.w	r5, r3, fp
 8003a58:	f04f 0200 	mov.w	r2, #0
 8003a5c:	f04f 0300 	mov.w	r3, #0
 8003a60:	00eb      	lsls	r3, r5, #3
 8003a62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a66:	00e2      	lsls	r2, r4, #3
 8003a68:	4614      	mov	r4, r2
 8003a6a:	461d      	mov	r5, r3
 8003a6c:	4643      	mov	r3, r8
 8003a6e:	18e3      	adds	r3, r4, r3
 8003a70:	603b      	str	r3, [r7, #0]
 8003a72:	464b      	mov	r3, r9
 8003a74:	eb45 0303 	adc.w	r3, r5, r3
 8003a78:	607b      	str	r3, [r7, #4]
 8003a7a:	f04f 0200 	mov.w	r2, #0
 8003a7e:	f04f 0300 	mov.w	r3, #0
 8003a82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a86:	4629      	mov	r1, r5
 8003a88:	028b      	lsls	r3, r1, #10
 8003a8a:	4621      	mov	r1, r4
 8003a8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a90:	4621      	mov	r1, r4
 8003a92:	028a      	lsls	r2, r1, #10
 8003a94:	4610      	mov	r0, r2
 8003a96:	4619      	mov	r1, r3
 8003a98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	61bb      	str	r3, [r7, #24]
 8003a9e:	61fa      	str	r2, [r7, #28]
 8003aa0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003aa4:	f7fc fbec 	bl	8000280 <__aeabi_uldivmod>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	460b      	mov	r3, r1
 8003aac:	4613      	mov	r3, r2
 8003aae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ab0:	4b0b      	ldr	r3, [pc, #44]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	0c1b      	lsrs	r3, r3, #16
 8003ab6:	f003 0303 	and.w	r3, r3, #3
 8003aba:	3301      	adds	r3, #1
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003ac0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ac2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003aca:	e002      	b.n	8003ad2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003acc:	4b05      	ldr	r3, [pc, #20]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ace:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ad0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3750      	adds	r7, #80	; 0x50
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ade:	bf00      	nop
 8003ae0:	40023800 	.word	0x40023800
 8003ae4:	00f42400 	.word	0x00f42400
 8003ae8:	007a1200 	.word	0x007a1200

08003aec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003af0:	4b03      	ldr	r3, [pc, #12]	; (8003b00 <HAL_RCC_GetHCLKFreq+0x14>)
 8003af2:	681b      	ldr	r3, [r3, #0]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	20000008 	.word	0x20000008

08003b04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b08:	f7ff fff0 	bl	8003aec <HAL_RCC_GetHCLKFreq>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	4b05      	ldr	r3, [pc, #20]	; (8003b24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	0a9b      	lsrs	r3, r3, #10
 8003b14:	f003 0307 	and.w	r3, r3, #7
 8003b18:	4903      	ldr	r1, [pc, #12]	; (8003b28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b1a:	5ccb      	ldrb	r3, [r1, r3]
 8003b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	40023800 	.word	0x40023800
 8003b28:	080091ac 	.word	0x080091ac

08003b2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b30:	f7ff ffdc 	bl	8003aec <HAL_RCC_GetHCLKFreq>
 8003b34:	4602      	mov	r2, r0
 8003b36:	4b05      	ldr	r3, [pc, #20]	; (8003b4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	0b5b      	lsrs	r3, r3, #13
 8003b3c:	f003 0307 	and.w	r3, r3, #7
 8003b40:	4903      	ldr	r1, [pc, #12]	; (8003b50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b42:	5ccb      	ldrb	r3, [r1, r3]
 8003b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	080091ac 	.word	0x080091ac

08003b54 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003b5a:	f7fe fa83 	bl	8002064 <HAL_GetTick>
 8003b5e:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003b60:	4b5d      	ldr	r3, [pc, #372]	; (8003cd8 <HAL_RCC_DeInit+0x184>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a5c      	ldr	r2, [pc, #368]	; (8003cd8 <HAL_RCC_DeInit+0x184>)
 8003b66:	f043 0301 	orr.w	r3, r3, #1
 8003b6a:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003b6c:	e008      	b.n	8003b80 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b6e:	f7fe fa79 	bl	8002064 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e0a7      	b.n	8003cd0 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003b80:	4b55      	ldr	r3, [pc, #340]	; (8003cd8 <HAL_RCC_DeInit+0x184>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d0f0      	beq.n	8003b6e <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8003b8c:	4b52      	ldr	r3, [pc, #328]	; (8003cd8 <HAL_RCC_DeInit+0x184>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a51      	ldr	r2, [pc, #324]	; (8003cd8 <HAL_RCC_DeInit+0x184>)
 8003b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b96:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003b98:	f7fe fa64 	bl	8002064 <HAL_GetTick>
 8003b9c:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8003b9e:	4b4e      	ldr	r3, [pc, #312]	; (8003cd8 <HAL_RCC_DeInit+0x184>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003ba4:	e00a      	b.n	8003bbc <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ba6:	f7fe fa5d 	bl	8002064 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e089      	b.n	8003cd0 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003bbc:	4b46      	ldr	r3, [pc, #280]	; (8003cd8 <HAL_RCC_DeInit+0x184>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f003 030c 	and.w	r3, r3, #12
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1ee      	bne.n	8003ba6 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003bc8:	f7fe fa4c 	bl	8002064 <HAL_GetTick>
 8003bcc:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8003bce:	4b42      	ldr	r3, [pc, #264]	; (8003cd8 <HAL_RCC_DeInit+0x184>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a41      	ldr	r2, [pc, #260]	; (8003cd8 <HAL_RCC_DeInit+0x184>)
 8003bd4:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8003bd8:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bdc:	f7fe fa42 	bl	8002064 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b64      	cmp	r3, #100	; 0x64
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e070      	b.n	8003cd0 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003bee:	4b3a      	ldr	r3, [pc, #232]	; (8003cd8 <HAL_RCC_DeInit+0x184>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1f0      	bne.n	8003bdc <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003bfa:	f7fe fa33 	bl	8002064 <HAL_GetTick>
 8003bfe:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003c00:	4b35      	ldr	r3, [pc, #212]	; (8003cd8 <HAL_RCC_DeInit+0x184>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a34      	ldr	r2, [pc, #208]	; (8003cd8 <HAL_RCC_DeInit+0x184>)
 8003c06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c0a:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003c0c:	e008      	b.n	8003c20 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c0e:	f7fe fa29 	bl	8002064 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d901      	bls.n	8003c20 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e057      	b.n	8003cd0 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003c20:	4b2d      	ldr	r3, [pc, #180]	; (8003cd8 <HAL_RCC_DeInit+0x184>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1f0      	bne.n	8003c0e <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003c2c:	f7fe fa1a 	bl	8002064 <HAL_GetTick>
 8003c30:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8003c32:	4b29      	ldr	r3, [pc, #164]	; (8003cd8 <HAL_RCC_DeInit+0x184>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a28      	ldr	r2, [pc, #160]	; (8003cd8 <HAL_RCC_DeInit+0x184>)
 8003c38:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c3c:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003c3e:	e008      	b.n	8003c52 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c40:	f7fe fa10 	bl	8002064 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e03e      	b.n	8003cd0 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003c52:	4b21      	ldr	r3, [pc, #132]	; (8003cd8 <HAL_RCC_DeInit+0x184>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1f0      	bne.n	8003c40 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8003c5e:	4b1e      	ldr	r3, [pc, #120]	; (8003cd8 <HAL_RCC_DeInit+0x184>)
 8003c60:	4a1e      	ldr	r2, [pc, #120]	; (8003cdc <HAL_RCC_DeInit+0x188>)
 8003c62:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8003c64:	4b1c      	ldr	r3, [pc, #112]	; (8003cd8 <HAL_RCC_DeInit+0x184>)
 8003c66:	4a1e      	ldr	r2, [pc, #120]	; (8003ce0 <HAL_RCC_DeInit+0x18c>)
 8003c68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8003c6c:	4b1a      	ldr	r3, [pc, #104]	; (8003cd8 <HAL_RCC_DeInit+0x184>)
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	4a19      	ldr	r2, [pc, #100]	; (8003cd8 <HAL_RCC_DeInit+0x184>)
 8003c72:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003c76:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8003c78:	4b17      	ldr	r3, [pc, #92]	; (8003cd8 <HAL_RCC_DeInit+0x184>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	4a16      	ldr	r2, [pc, #88]	; (8003cd8 <HAL_RCC_DeInit+0x184>)
 8003c7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c82:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8003c84:	4b14      	ldr	r3, [pc, #80]	; (8003cd8 <HAL_RCC_DeInit+0x184>)
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	4a13      	ldr	r2, [pc, #76]	; (8003cd8 <HAL_RCC_DeInit+0x184>)
 8003c8a:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8003c8e:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8003c90:	4b11      	ldr	r3, [pc, #68]	; (8003cd8 <HAL_RCC_DeInit+0x184>)
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	4a10      	ldr	r2, [pc, #64]	; (8003cd8 <HAL_RCC_DeInit+0x184>)
 8003c96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c9a:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003c9c:	4b0e      	ldr	r3, [pc, #56]	; (8003cd8 <HAL_RCC_DeInit+0x184>)
 8003c9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ca0:	4a0d      	ldr	r2, [pc, #52]	; (8003cd8 <HAL_RCC_DeInit+0x184>)
 8003ca2:	f023 0301 	bic.w	r3, r3, #1
 8003ca6:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8003ca8:	4b0b      	ldr	r3, [pc, #44]	; (8003cd8 <HAL_RCC_DeInit+0x184>)
 8003caa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cac:	4a0a      	ldr	r2, [pc, #40]	; (8003cd8 <HAL_RCC_DeInit+0x184>)
 8003cae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cb2:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8003cb4:	4b0b      	ldr	r3, [pc, #44]	; (8003ce4 <HAL_RCC_DeInit+0x190>)
 8003cb6:	4a0c      	ldr	r2, [pc, #48]	; (8003ce8 <HAL_RCC_DeInit+0x194>)
 8003cb8:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8003cba:	4b0c      	ldr	r3, [pc, #48]	; (8003cec <HAL_RCC_DeInit+0x198>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7fe f98c 	bl	8001fdc <HAL_InitTick>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e000      	b.n	8003cd0 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 8003cce:	2300      	movs	r3, #0
  }
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3708      	adds	r7, #8
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	04003010 	.word	0x04003010
 8003ce0:	20003000 	.word	0x20003000
 8003ce4:	20000008 	.word	0x20000008
 8003ce8:	00f42400 	.word	0x00f42400
 8003cec:	2000000c 	.word	0x2000000c

08003cf0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e07b      	b.n	8003dfa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d108      	bne.n	8003d1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d12:	d009      	beq.n	8003d28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	61da      	str	r2, [r3, #28]
 8003d1a:	e005      	b.n	8003d28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d106      	bne.n	8003d48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7fd fe94 	bl	8001a70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d70:	431a      	orrs	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	431a      	orrs	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003da2:	431a      	orrs	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dac:	ea42 0103 	orr.w	r1, r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	0c1b      	lsrs	r3, r3, #16
 8003dc6:	f003 0104 	and.w	r1, r3, #4
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dce:	f003 0210 	and.w	r2, r3, #16
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	69da      	ldr	r2, [r3, #28]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003de8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b082      	sub	sp, #8
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e01a      	b.n	8003e4a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2202      	movs	r2, #2
 8003e18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e2a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f7fd fe67 	bl	8001b00 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b088      	sub	sp, #32
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	60f8      	str	r0, [r7, #12]
 8003e5a:	60b9      	str	r1, [r7, #8]
 8003e5c:	603b      	str	r3, [r7, #0]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e62:	2300      	movs	r3, #0
 8003e64:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d101      	bne.n	8003e74 <HAL_SPI_Transmit+0x22>
 8003e70:	2302      	movs	r3, #2
 8003e72:	e126      	b.n	80040c2 <HAL_SPI_Transmit+0x270>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e7c:	f7fe f8f2 	bl	8002064 <HAL_GetTick>
 8003e80:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003e82:	88fb      	ldrh	r3, [r7, #6]
 8003e84:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d002      	beq.n	8003e98 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003e92:	2302      	movs	r3, #2
 8003e94:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e96:	e10b      	b.n	80040b0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d002      	beq.n	8003ea4 <HAL_SPI_Transmit+0x52>
 8003e9e:	88fb      	ldrh	r3, [r7, #6]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d102      	bne.n	8003eaa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ea8:	e102      	b.n	80040b0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2203      	movs	r2, #3
 8003eae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	88fa      	ldrh	r2, [r7, #6]
 8003ec2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	88fa      	ldrh	r2, [r7, #6]
 8003ec8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ef0:	d10f      	bne.n	8003f12 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f00:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f10:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1c:	2b40      	cmp	r3, #64	; 0x40
 8003f1e:	d007      	beq.n	8003f30 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f38:	d14b      	bne.n	8003fd2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d002      	beq.n	8003f48 <HAL_SPI_Transmit+0xf6>
 8003f42:	8afb      	ldrh	r3, [r7, #22]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d13e      	bne.n	8003fc6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4c:	881a      	ldrh	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f58:	1c9a      	adds	r2, r3, #2
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	3b01      	subs	r3, #1
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f6c:	e02b      	b.n	8003fc6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d112      	bne.n	8003fa2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f80:	881a      	ldrh	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8c:	1c9a      	adds	r2, r3, #2
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003fa0:	e011      	b.n	8003fc6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fa2:	f7fe f85f 	bl	8002064 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d803      	bhi.n	8003fba <HAL_SPI_Transmit+0x168>
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb8:	d102      	bne.n	8003fc0 <HAL_SPI_Transmit+0x16e>
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d102      	bne.n	8003fc6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003fc4:	e074      	b.n	80040b0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1ce      	bne.n	8003f6e <HAL_SPI_Transmit+0x11c>
 8003fd0:	e04c      	b.n	800406c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d002      	beq.n	8003fe0 <HAL_SPI_Transmit+0x18e>
 8003fda:	8afb      	ldrh	r3, [r7, #22]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d140      	bne.n	8004062 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	330c      	adds	r3, #12
 8003fea:	7812      	ldrb	r2, [r2, #0]
 8003fec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff2:	1c5a      	adds	r2, r3, #1
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	3b01      	subs	r3, #1
 8004000:	b29a      	uxth	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004006:	e02c      	b.n	8004062 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b02      	cmp	r3, #2
 8004014:	d113      	bne.n	800403e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	330c      	adds	r3, #12
 8004020:	7812      	ldrb	r2, [r2, #0]
 8004022:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004028:	1c5a      	adds	r2, r3, #1
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004032:	b29b      	uxth	r3, r3
 8004034:	3b01      	subs	r3, #1
 8004036:	b29a      	uxth	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	86da      	strh	r2, [r3, #54]	; 0x36
 800403c:	e011      	b.n	8004062 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800403e:	f7fe f811 	bl	8002064 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	429a      	cmp	r2, r3
 800404c:	d803      	bhi.n	8004056 <HAL_SPI_Transmit+0x204>
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004054:	d102      	bne.n	800405c <HAL_SPI_Transmit+0x20a>
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d102      	bne.n	8004062 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004060:	e026      	b.n	80040b0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004066:	b29b      	uxth	r3, r3
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1cd      	bne.n	8004008 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	6839      	ldr	r1, [r7, #0]
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f000 fa63 	bl	800453c <SPI_EndRxTxTransaction>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d002      	beq.n	8004082 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2220      	movs	r2, #32
 8004080:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10a      	bne.n	80040a0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800408a:	2300      	movs	r3, #0
 800408c:	613b      	str	r3, [r7, #16]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	613b      	str	r3, [r7, #16]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	613b      	str	r3, [r7, #16]
 800409e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d002      	beq.n	80040ae <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	77fb      	strb	r3, [r7, #31]
 80040ac:	e000      	b.n	80040b0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80040ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80040c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3720      	adds	r7, #32
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b08c      	sub	sp, #48	; 0x30
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	60f8      	str	r0, [r7, #12]
 80040d2:	60b9      	str	r1, [r7, #8]
 80040d4:	607a      	str	r2, [r7, #4]
 80040d6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80040d8:	2301      	movs	r3, #1
 80040da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80040dc:	2300      	movs	r3, #0
 80040de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d101      	bne.n	80040f0 <HAL_SPI_TransmitReceive+0x26>
 80040ec:	2302      	movs	r3, #2
 80040ee:	e18a      	b.n	8004406 <HAL_SPI_TransmitReceive+0x33c>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040f8:	f7fd ffb4 	bl	8002064 <HAL_GetTick>
 80040fc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004104:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800410e:	887b      	ldrh	r3, [r7, #2]
 8004110:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004112:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004116:	2b01      	cmp	r3, #1
 8004118:	d00f      	beq.n	800413a <HAL_SPI_TransmitReceive+0x70>
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004120:	d107      	bne.n	8004132 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d103      	bne.n	8004132 <HAL_SPI_TransmitReceive+0x68>
 800412a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800412e:	2b04      	cmp	r3, #4
 8004130:	d003      	beq.n	800413a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004132:	2302      	movs	r3, #2
 8004134:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004138:	e15b      	b.n	80043f2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d005      	beq.n	800414c <HAL_SPI_TransmitReceive+0x82>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d002      	beq.n	800414c <HAL_SPI_TransmitReceive+0x82>
 8004146:	887b      	ldrh	r3, [r7, #2]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d103      	bne.n	8004154 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004152:	e14e      	b.n	80043f2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800415a:	b2db      	uxtb	r3, r3
 800415c:	2b04      	cmp	r3, #4
 800415e:	d003      	beq.n	8004168 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2205      	movs	r2, #5
 8004164:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	887a      	ldrh	r2, [r7, #2]
 8004178:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	887a      	ldrh	r2, [r7, #2]
 800417e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	887a      	ldrh	r2, [r7, #2]
 800418a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	887a      	ldrh	r2, [r7, #2]
 8004190:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a8:	2b40      	cmp	r3, #64	; 0x40
 80041aa:	d007      	beq.n	80041bc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041c4:	d178      	bne.n	80042b8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <HAL_SPI_TransmitReceive+0x10a>
 80041ce:	8b7b      	ldrh	r3, [r7, #26]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d166      	bne.n	80042a2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d8:	881a      	ldrh	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e4:	1c9a      	adds	r2, r3, #2
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	3b01      	subs	r3, #1
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041f8:	e053      	b.n	80042a2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b02      	cmp	r3, #2
 8004206:	d11b      	bne.n	8004240 <HAL_SPI_TransmitReceive+0x176>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800420c:	b29b      	uxth	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d016      	beq.n	8004240 <HAL_SPI_TransmitReceive+0x176>
 8004212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004214:	2b01      	cmp	r3, #1
 8004216:	d113      	bne.n	8004240 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421c:	881a      	ldrh	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004228:	1c9a      	adds	r2, r3, #2
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004232:	b29b      	uxth	r3, r3
 8004234:	3b01      	subs	r3, #1
 8004236:	b29a      	uxth	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800423c:	2300      	movs	r3, #0
 800423e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b01      	cmp	r3, #1
 800424c:	d119      	bne.n	8004282 <HAL_SPI_TransmitReceive+0x1b8>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004252:	b29b      	uxth	r3, r3
 8004254:	2b00      	cmp	r3, #0
 8004256:	d014      	beq.n	8004282 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68da      	ldr	r2, [r3, #12]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004262:	b292      	uxth	r2, r2
 8004264:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426a:	1c9a      	adds	r2, r3, #2
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004274:	b29b      	uxth	r3, r3
 8004276:	3b01      	subs	r3, #1
 8004278:	b29a      	uxth	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800427e:	2301      	movs	r3, #1
 8004280:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004282:	f7fd feef 	bl	8002064 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800428e:	429a      	cmp	r2, r3
 8004290:	d807      	bhi.n	80042a2 <HAL_SPI_TransmitReceive+0x1d8>
 8004292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004298:	d003      	beq.n	80042a2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80042a0:	e0a7      	b.n	80043f2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1a6      	bne.n	80041fa <HAL_SPI_TransmitReceive+0x130>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1a1      	bne.n	80041fa <HAL_SPI_TransmitReceive+0x130>
 80042b6:	e07c      	b.n	80043b2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d002      	beq.n	80042c6 <HAL_SPI_TransmitReceive+0x1fc>
 80042c0:	8b7b      	ldrh	r3, [r7, #26]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d16b      	bne.n	800439e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	330c      	adds	r3, #12
 80042d0:	7812      	ldrb	r2, [r2, #0]
 80042d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d8:	1c5a      	adds	r2, r3, #1
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	3b01      	subs	r3, #1
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042ec:	e057      	b.n	800439e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d11c      	bne.n	8004336 <HAL_SPI_TransmitReceive+0x26c>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004300:	b29b      	uxth	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d017      	beq.n	8004336 <HAL_SPI_TransmitReceive+0x26c>
 8004306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004308:	2b01      	cmp	r3, #1
 800430a:	d114      	bne.n	8004336 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	330c      	adds	r3, #12
 8004316:	7812      	ldrb	r2, [r2, #0]
 8004318:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431e:	1c5a      	adds	r2, r3, #1
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004328:	b29b      	uxth	r3, r3
 800432a:	3b01      	subs	r3, #1
 800432c:	b29a      	uxth	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004332:	2300      	movs	r3, #0
 8004334:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b01      	cmp	r3, #1
 8004342:	d119      	bne.n	8004378 <HAL_SPI_TransmitReceive+0x2ae>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004348:	b29b      	uxth	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d014      	beq.n	8004378 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68da      	ldr	r2, [r3, #12]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004358:	b2d2      	uxtb	r2, r2
 800435a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004360:	1c5a      	adds	r2, r3, #1
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800436a:	b29b      	uxth	r3, r3
 800436c:	3b01      	subs	r3, #1
 800436e:	b29a      	uxth	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004374:	2301      	movs	r3, #1
 8004376:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004378:	f7fd fe74 	bl	8002064 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004384:	429a      	cmp	r2, r3
 8004386:	d803      	bhi.n	8004390 <HAL_SPI_TransmitReceive+0x2c6>
 8004388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800438a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800438e:	d102      	bne.n	8004396 <HAL_SPI_TransmitReceive+0x2cc>
 8004390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004392:	2b00      	cmp	r3, #0
 8004394:	d103      	bne.n	800439e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800439c:	e029      	b.n	80043f2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1a2      	bne.n	80042ee <HAL_SPI_TransmitReceive+0x224>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d19d      	bne.n	80042ee <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 f8c0 	bl	800453c <SPI_EndRxTxTransaction>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d006      	beq.n	80043d0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2220      	movs	r2, #32
 80043cc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80043ce:	e010      	b.n	80043f2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d10b      	bne.n	80043f0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043d8:	2300      	movs	r3, #0
 80043da:	617b      	str	r3, [r7, #20]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	617b      	str	r3, [r7, #20]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	617b      	str	r3, [r7, #20]
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	e000      	b.n	80043f2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80043f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004402:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004406:	4618      	mov	r0, r3
 8004408:	3730      	adds	r7, #48	; 0x30
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800440e:	b480      	push	{r7}
 8004410:	b083      	sub	sp, #12
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800441c:	b2db      	uxtb	r3, r3
}
 800441e:	4618      	mov	r0, r3
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
	...

0800442c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b088      	sub	sp, #32
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	603b      	str	r3, [r7, #0]
 8004438:	4613      	mov	r3, r2
 800443a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800443c:	f7fd fe12 	bl	8002064 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004444:	1a9b      	subs	r3, r3, r2
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	4413      	add	r3, r2
 800444a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800444c:	f7fd fe0a 	bl	8002064 <HAL_GetTick>
 8004450:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004452:	4b39      	ldr	r3, [pc, #228]	; (8004538 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	015b      	lsls	r3, r3, #5
 8004458:	0d1b      	lsrs	r3, r3, #20
 800445a:	69fa      	ldr	r2, [r7, #28]
 800445c:	fb02 f303 	mul.w	r3, r2, r3
 8004460:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004462:	e054      	b.n	800450e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800446a:	d050      	beq.n	800450e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800446c:	f7fd fdfa 	bl	8002064 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	69fa      	ldr	r2, [r7, #28]
 8004478:	429a      	cmp	r2, r3
 800447a:	d902      	bls.n	8004482 <SPI_WaitFlagStateUntilTimeout+0x56>
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d13d      	bne.n	80044fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004490:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800449a:	d111      	bne.n	80044c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044a4:	d004      	beq.n	80044b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044ae:	d107      	bne.n	80044c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044c8:	d10f      	bne.n	80044ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044d8:	601a      	str	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e017      	b.n	800452e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d101      	bne.n	8004508 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004504:	2300      	movs	r3, #0
 8004506:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	3b01      	subs	r3, #1
 800450c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	689a      	ldr	r2, [r3, #8]
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	4013      	ands	r3, r2
 8004518:	68ba      	ldr	r2, [r7, #8]
 800451a:	429a      	cmp	r2, r3
 800451c:	bf0c      	ite	eq
 800451e:	2301      	moveq	r3, #1
 8004520:	2300      	movne	r3, #0
 8004522:	b2db      	uxtb	r3, r3
 8004524:	461a      	mov	r2, r3
 8004526:	79fb      	ldrb	r3, [r7, #7]
 8004528:	429a      	cmp	r2, r3
 800452a:	d19b      	bne.n	8004464 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3720      	adds	r7, #32
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	20000008 	.word	0x20000008

0800453c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b088      	sub	sp, #32
 8004540:	af02      	add	r7, sp, #8
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004548:	4b1b      	ldr	r3, [pc, #108]	; (80045b8 <SPI_EndRxTxTransaction+0x7c>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a1b      	ldr	r2, [pc, #108]	; (80045bc <SPI_EndRxTxTransaction+0x80>)
 800454e:	fba2 2303 	umull	r2, r3, r2, r3
 8004552:	0d5b      	lsrs	r3, r3, #21
 8004554:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004558:	fb02 f303 	mul.w	r3, r2, r3
 800455c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004566:	d112      	bne.n	800458e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	9300      	str	r3, [sp, #0]
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	2200      	movs	r2, #0
 8004570:	2180      	movs	r1, #128	; 0x80
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f7ff ff5a 	bl	800442c <SPI_WaitFlagStateUntilTimeout>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d016      	beq.n	80045ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004582:	f043 0220 	orr.w	r2, r3, #32
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e00f      	b.n	80045ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00a      	beq.n	80045aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	3b01      	subs	r3, #1
 8004598:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a4:	2b80      	cmp	r3, #128	; 0x80
 80045a6:	d0f2      	beq.n	800458e <SPI_EndRxTxTransaction+0x52>
 80045a8:	e000      	b.n	80045ac <SPI_EndRxTxTransaction+0x70>
        break;
 80045aa:	bf00      	nop
  }

  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3718      	adds	r7, #24
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	20000008 	.word	0x20000008
 80045bc:	165e9f81 	.word	0x165e9f81

080045c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e03f      	b.n	8004652 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d106      	bne.n	80045ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f7fd fc12 	bl	8001e10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2224      	movs	r2, #36	; 0x24
 80045f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68da      	ldr	r2, [r3, #12]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004602:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 f957 	bl	80048b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	691a      	ldr	r2, [r3, #16]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004618:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	695a      	ldr	r2, [r3, #20]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004628:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68da      	ldr	r2, [r3, #12]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004638:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2220      	movs	r2, #32
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2220      	movs	r2, #32
 800464c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b082      	sub	sp, #8
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d101      	bne.n	800466c <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e021      	b.n	80046b0 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2224      	movs	r2, #36	; 0x24
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68da      	ldr	r2, [r3, #12]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004682:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f7fd fc0b 	bl	8001ea0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3708      	adds	r7, #8
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b08a      	sub	sp, #40	; 0x28
 80046bc:	af02      	add	r7, sp, #8
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	603b      	str	r3, [r7, #0]
 80046c4:	4613      	mov	r3, r2
 80046c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	2b20      	cmp	r3, #32
 80046d6:	d17c      	bne.n	80047d2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d002      	beq.n	80046e4 <HAL_UART_Transmit+0x2c>
 80046de:	88fb      	ldrh	r3, [r7, #6]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d101      	bne.n	80046e8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e075      	b.n	80047d4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d101      	bne.n	80046f6 <HAL_UART_Transmit+0x3e>
 80046f2:	2302      	movs	r3, #2
 80046f4:	e06e      	b.n	80047d4 <HAL_UART_Transmit+0x11c>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2221      	movs	r2, #33	; 0x21
 8004708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800470c:	f7fd fcaa 	bl	8002064 <HAL_GetTick>
 8004710:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	88fa      	ldrh	r2, [r7, #6]
 8004716:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	88fa      	ldrh	r2, [r7, #6]
 800471c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004726:	d108      	bne.n	800473a <HAL_UART_Transmit+0x82>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d104      	bne.n	800473a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004730:	2300      	movs	r3, #0
 8004732:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	61bb      	str	r3, [r7, #24]
 8004738:	e003      	b.n	8004742 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800473e:	2300      	movs	r3, #0
 8004740:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800474a:	e02a      	b.n	80047a2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	9300      	str	r3, [sp, #0]
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	2200      	movs	r2, #0
 8004754:	2180      	movs	r1, #128	; 0x80
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f000 f840 	bl	80047dc <UART_WaitOnFlagUntilTimeout>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d001      	beq.n	8004766 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e036      	b.n	80047d4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10b      	bne.n	8004784 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	881b      	ldrh	r3, [r3, #0]
 8004770:	461a      	mov	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800477a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	3302      	adds	r3, #2
 8004780:	61bb      	str	r3, [r7, #24]
 8004782:	e007      	b.n	8004794 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	781a      	ldrb	r2, [r3, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	3301      	adds	r3, #1
 8004792:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004798:	b29b      	uxth	r3, r3
 800479a:	3b01      	subs	r3, #1
 800479c:	b29a      	uxth	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1cf      	bne.n	800474c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	9300      	str	r3, [sp, #0]
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	2200      	movs	r2, #0
 80047b4:	2140      	movs	r1, #64	; 0x40
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f000 f810 	bl	80047dc <UART_WaitOnFlagUntilTimeout>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d001      	beq.n	80047c6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e006      	b.n	80047d4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2220      	movs	r2, #32
 80047ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80047ce:	2300      	movs	r3, #0
 80047d0:	e000      	b.n	80047d4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80047d2:	2302      	movs	r3, #2
  }
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3720      	adds	r7, #32
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b090      	sub	sp, #64	; 0x40
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	603b      	str	r3, [r7, #0]
 80047e8:	4613      	mov	r3, r2
 80047ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ec:	e050      	b.n	8004890 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f4:	d04c      	beq.n	8004890 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d007      	beq.n	800480c <UART_WaitOnFlagUntilTimeout+0x30>
 80047fc:	f7fd fc32 	bl	8002064 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004808:	429a      	cmp	r2, r3
 800480a:	d241      	bcs.n	8004890 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	330c      	adds	r3, #12
 8004812:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004816:	e853 3f00 	ldrex	r3, [r3]
 800481a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004822:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	330c      	adds	r3, #12
 800482a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800482c:	637a      	str	r2, [r7, #52]	; 0x34
 800482e:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004830:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004832:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004834:	e841 2300 	strex	r3, r2, [r1]
 8004838:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800483a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1e5      	bne.n	800480c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3314      	adds	r3, #20
 8004846:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	e853 3f00 	ldrex	r3, [r3]
 800484e:	613b      	str	r3, [r7, #16]
   return(result);
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	f023 0301 	bic.w	r3, r3, #1
 8004856:	63bb      	str	r3, [r7, #56]	; 0x38
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	3314      	adds	r3, #20
 800485e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004860:	623a      	str	r2, [r7, #32]
 8004862:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004864:	69f9      	ldr	r1, [r7, #28]
 8004866:	6a3a      	ldr	r2, [r7, #32]
 8004868:	e841 2300 	strex	r3, r2, [r1]
 800486c:	61bb      	str	r3, [r7, #24]
   return(result);
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1e5      	bne.n	8004840 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2220      	movs	r2, #32
 8004878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2220      	movs	r2, #32
 8004880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e00f      	b.n	80048b0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	4013      	ands	r3, r2
 800489a:	68ba      	ldr	r2, [r7, #8]
 800489c:	429a      	cmp	r2, r3
 800489e:	bf0c      	ite	eq
 80048a0:	2301      	moveq	r3, #1
 80048a2:	2300      	movne	r3, #0
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	461a      	mov	r2, r3
 80048a8:	79fb      	ldrb	r3, [r7, #7]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d09f      	beq.n	80047ee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3740      	adds	r7, #64	; 0x40
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048bc:	b0c0      	sub	sp, #256	; 0x100
 80048be:	af00      	add	r7, sp, #0
 80048c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80048d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d4:	68d9      	ldr	r1, [r3, #12]
 80048d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	ea40 0301 	orr.w	r3, r0, r1
 80048e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	431a      	orrs	r2, r3
 80048f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	431a      	orrs	r2, r3
 80048f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048fc:	69db      	ldr	r3, [r3, #28]
 80048fe:	4313      	orrs	r3, r2
 8004900:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004910:	f021 010c 	bic.w	r1, r1, #12
 8004914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800491e:	430b      	orrs	r3, r1
 8004920:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800492e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004932:	6999      	ldr	r1, [r3, #24]
 8004934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	ea40 0301 	orr.w	r3, r0, r1
 800493e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	4b8f      	ldr	r3, [pc, #572]	; (8004b84 <UART_SetConfig+0x2cc>)
 8004948:	429a      	cmp	r2, r3
 800494a:	d005      	beq.n	8004958 <UART_SetConfig+0xa0>
 800494c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	4b8d      	ldr	r3, [pc, #564]	; (8004b88 <UART_SetConfig+0x2d0>)
 8004954:	429a      	cmp	r2, r3
 8004956:	d104      	bne.n	8004962 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004958:	f7ff f8e8 	bl	8003b2c <HAL_RCC_GetPCLK2Freq>
 800495c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004960:	e003      	b.n	800496a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004962:	f7ff f8cf 	bl	8003b04 <HAL_RCC_GetPCLK1Freq>
 8004966:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800496a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800496e:	69db      	ldr	r3, [r3, #28]
 8004970:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004974:	f040 810c 	bne.w	8004b90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004978:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800497c:	2200      	movs	r2, #0
 800497e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004982:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004986:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800498a:	4622      	mov	r2, r4
 800498c:	462b      	mov	r3, r5
 800498e:	1891      	adds	r1, r2, r2
 8004990:	65b9      	str	r1, [r7, #88]	; 0x58
 8004992:	415b      	adcs	r3, r3
 8004994:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004996:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800499a:	4621      	mov	r1, r4
 800499c:	eb12 0801 	adds.w	r8, r2, r1
 80049a0:	4629      	mov	r1, r5
 80049a2:	eb43 0901 	adc.w	r9, r3, r1
 80049a6:	f04f 0200 	mov.w	r2, #0
 80049aa:	f04f 0300 	mov.w	r3, #0
 80049ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049ba:	4690      	mov	r8, r2
 80049bc:	4699      	mov	r9, r3
 80049be:	4623      	mov	r3, r4
 80049c0:	eb18 0303 	adds.w	r3, r8, r3
 80049c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80049c8:	462b      	mov	r3, r5
 80049ca:	eb49 0303 	adc.w	r3, r9, r3
 80049ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80049d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80049de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80049e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80049e6:	460b      	mov	r3, r1
 80049e8:	18db      	adds	r3, r3, r3
 80049ea:	653b      	str	r3, [r7, #80]	; 0x50
 80049ec:	4613      	mov	r3, r2
 80049ee:	eb42 0303 	adc.w	r3, r2, r3
 80049f2:	657b      	str	r3, [r7, #84]	; 0x54
 80049f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80049f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80049fc:	f7fb fc40 	bl	8000280 <__aeabi_uldivmod>
 8004a00:	4602      	mov	r2, r0
 8004a02:	460b      	mov	r3, r1
 8004a04:	4b61      	ldr	r3, [pc, #388]	; (8004b8c <UART_SetConfig+0x2d4>)
 8004a06:	fba3 2302 	umull	r2, r3, r3, r2
 8004a0a:	095b      	lsrs	r3, r3, #5
 8004a0c:	011c      	lsls	r4, r3, #4
 8004a0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a12:	2200      	movs	r2, #0
 8004a14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a18:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a20:	4642      	mov	r2, r8
 8004a22:	464b      	mov	r3, r9
 8004a24:	1891      	adds	r1, r2, r2
 8004a26:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a28:	415b      	adcs	r3, r3
 8004a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a30:	4641      	mov	r1, r8
 8004a32:	eb12 0a01 	adds.w	sl, r2, r1
 8004a36:	4649      	mov	r1, r9
 8004a38:	eb43 0b01 	adc.w	fp, r3, r1
 8004a3c:	f04f 0200 	mov.w	r2, #0
 8004a40:	f04f 0300 	mov.w	r3, #0
 8004a44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a50:	4692      	mov	sl, r2
 8004a52:	469b      	mov	fp, r3
 8004a54:	4643      	mov	r3, r8
 8004a56:	eb1a 0303 	adds.w	r3, sl, r3
 8004a5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a5e:	464b      	mov	r3, r9
 8004a60:	eb4b 0303 	adc.w	r3, fp, r3
 8004a64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a74:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004a78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	18db      	adds	r3, r3, r3
 8004a80:	643b      	str	r3, [r7, #64]	; 0x40
 8004a82:	4613      	mov	r3, r2
 8004a84:	eb42 0303 	adc.w	r3, r2, r3
 8004a88:	647b      	str	r3, [r7, #68]	; 0x44
 8004a8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004a92:	f7fb fbf5 	bl	8000280 <__aeabi_uldivmod>
 8004a96:	4602      	mov	r2, r0
 8004a98:	460b      	mov	r3, r1
 8004a9a:	4611      	mov	r1, r2
 8004a9c:	4b3b      	ldr	r3, [pc, #236]	; (8004b8c <UART_SetConfig+0x2d4>)
 8004a9e:	fba3 2301 	umull	r2, r3, r3, r1
 8004aa2:	095b      	lsrs	r3, r3, #5
 8004aa4:	2264      	movs	r2, #100	; 0x64
 8004aa6:	fb02 f303 	mul.w	r3, r2, r3
 8004aaa:	1acb      	subs	r3, r1, r3
 8004aac:	00db      	lsls	r3, r3, #3
 8004aae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004ab2:	4b36      	ldr	r3, [pc, #216]	; (8004b8c <UART_SetConfig+0x2d4>)
 8004ab4:	fba3 2302 	umull	r2, r3, r3, r2
 8004ab8:	095b      	lsrs	r3, r3, #5
 8004aba:	005b      	lsls	r3, r3, #1
 8004abc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ac0:	441c      	add	r4, r3
 8004ac2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004acc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ad0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ad4:	4642      	mov	r2, r8
 8004ad6:	464b      	mov	r3, r9
 8004ad8:	1891      	adds	r1, r2, r2
 8004ada:	63b9      	str	r1, [r7, #56]	; 0x38
 8004adc:	415b      	adcs	r3, r3
 8004ade:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ae0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ae4:	4641      	mov	r1, r8
 8004ae6:	1851      	adds	r1, r2, r1
 8004ae8:	6339      	str	r1, [r7, #48]	; 0x30
 8004aea:	4649      	mov	r1, r9
 8004aec:	414b      	adcs	r3, r1
 8004aee:	637b      	str	r3, [r7, #52]	; 0x34
 8004af0:	f04f 0200 	mov.w	r2, #0
 8004af4:	f04f 0300 	mov.w	r3, #0
 8004af8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004afc:	4659      	mov	r1, fp
 8004afe:	00cb      	lsls	r3, r1, #3
 8004b00:	4651      	mov	r1, sl
 8004b02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b06:	4651      	mov	r1, sl
 8004b08:	00ca      	lsls	r2, r1, #3
 8004b0a:	4610      	mov	r0, r2
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	4603      	mov	r3, r0
 8004b10:	4642      	mov	r2, r8
 8004b12:	189b      	adds	r3, r3, r2
 8004b14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b18:	464b      	mov	r3, r9
 8004b1a:	460a      	mov	r2, r1
 8004b1c:	eb42 0303 	adc.w	r3, r2, r3
 8004b20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b30:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b38:	460b      	mov	r3, r1
 8004b3a:	18db      	adds	r3, r3, r3
 8004b3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b3e:	4613      	mov	r3, r2
 8004b40:	eb42 0303 	adc.w	r3, r2, r3
 8004b44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b4e:	f7fb fb97 	bl	8000280 <__aeabi_uldivmod>
 8004b52:	4602      	mov	r2, r0
 8004b54:	460b      	mov	r3, r1
 8004b56:	4b0d      	ldr	r3, [pc, #52]	; (8004b8c <UART_SetConfig+0x2d4>)
 8004b58:	fba3 1302 	umull	r1, r3, r3, r2
 8004b5c:	095b      	lsrs	r3, r3, #5
 8004b5e:	2164      	movs	r1, #100	; 0x64
 8004b60:	fb01 f303 	mul.w	r3, r1, r3
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	3332      	adds	r3, #50	; 0x32
 8004b6a:	4a08      	ldr	r2, [pc, #32]	; (8004b8c <UART_SetConfig+0x2d4>)
 8004b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b70:	095b      	lsrs	r3, r3, #5
 8004b72:	f003 0207 	and.w	r2, r3, #7
 8004b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4422      	add	r2, r4
 8004b7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b80:	e105      	b.n	8004d8e <UART_SetConfig+0x4d6>
 8004b82:	bf00      	nop
 8004b84:	40011000 	.word	0x40011000
 8004b88:	40011400 	.word	0x40011400
 8004b8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b94:	2200      	movs	r2, #0
 8004b96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b9a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004b9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004ba2:	4642      	mov	r2, r8
 8004ba4:	464b      	mov	r3, r9
 8004ba6:	1891      	adds	r1, r2, r2
 8004ba8:	6239      	str	r1, [r7, #32]
 8004baa:	415b      	adcs	r3, r3
 8004bac:	627b      	str	r3, [r7, #36]	; 0x24
 8004bae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bb2:	4641      	mov	r1, r8
 8004bb4:	1854      	adds	r4, r2, r1
 8004bb6:	4649      	mov	r1, r9
 8004bb8:	eb43 0501 	adc.w	r5, r3, r1
 8004bbc:	f04f 0200 	mov.w	r2, #0
 8004bc0:	f04f 0300 	mov.w	r3, #0
 8004bc4:	00eb      	lsls	r3, r5, #3
 8004bc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bca:	00e2      	lsls	r2, r4, #3
 8004bcc:	4614      	mov	r4, r2
 8004bce:	461d      	mov	r5, r3
 8004bd0:	4643      	mov	r3, r8
 8004bd2:	18e3      	adds	r3, r4, r3
 8004bd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004bd8:	464b      	mov	r3, r9
 8004bda:	eb45 0303 	adc.w	r3, r5, r3
 8004bde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004bee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004bf2:	f04f 0200 	mov.w	r2, #0
 8004bf6:	f04f 0300 	mov.w	r3, #0
 8004bfa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004bfe:	4629      	mov	r1, r5
 8004c00:	008b      	lsls	r3, r1, #2
 8004c02:	4621      	mov	r1, r4
 8004c04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c08:	4621      	mov	r1, r4
 8004c0a:	008a      	lsls	r2, r1, #2
 8004c0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c10:	f7fb fb36 	bl	8000280 <__aeabi_uldivmod>
 8004c14:	4602      	mov	r2, r0
 8004c16:	460b      	mov	r3, r1
 8004c18:	4b60      	ldr	r3, [pc, #384]	; (8004d9c <UART_SetConfig+0x4e4>)
 8004c1a:	fba3 2302 	umull	r2, r3, r3, r2
 8004c1e:	095b      	lsrs	r3, r3, #5
 8004c20:	011c      	lsls	r4, r3, #4
 8004c22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c26:	2200      	movs	r2, #0
 8004c28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c34:	4642      	mov	r2, r8
 8004c36:	464b      	mov	r3, r9
 8004c38:	1891      	adds	r1, r2, r2
 8004c3a:	61b9      	str	r1, [r7, #24]
 8004c3c:	415b      	adcs	r3, r3
 8004c3e:	61fb      	str	r3, [r7, #28]
 8004c40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c44:	4641      	mov	r1, r8
 8004c46:	1851      	adds	r1, r2, r1
 8004c48:	6139      	str	r1, [r7, #16]
 8004c4a:	4649      	mov	r1, r9
 8004c4c:	414b      	adcs	r3, r1
 8004c4e:	617b      	str	r3, [r7, #20]
 8004c50:	f04f 0200 	mov.w	r2, #0
 8004c54:	f04f 0300 	mov.w	r3, #0
 8004c58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c5c:	4659      	mov	r1, fp
 8004c5e:	00cb      	lsls	r3, r1, #3
 8004c60:	4651      	mov	r1, sl
 8004c62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c66:	4651      	mov	r1, sl
 8004c68:	00ca      	lsls	r2, r1, #3
 8004c6a:	4610      	mov	r0, r2
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	4603      	mov	r3, r0
 8004c70:	4642      	mov	r2, r8
 8004c72:	189b      	adds	r3, r3, r2
 8004c74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c78:	464b      	mov	r3, r9
 8004c7a:	460a      	mov	r2, r1
 8004c7c:	eb42 0303 	adc.w	r3, r2, r3
 8004c80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c8e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004c90:	f04f 0200 	mov.w	r2, #0
 8004c94:	f04f 0300 	mov.w	r3, #0
 8004c98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004c9c:	4649      	mov	r1, r9
 8004c9e:	008b      	lsls	r3, r1, #2
 8004ca0:	4641      	mov	r1, r8
 8004ca2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ca6:	4641      	mov	r1, r8
 8004ca8:	008a      	lsls	r2, r1, #2
 8004caa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004cae:	f7fb fae7 	bl	8000280 <__aeabi_uldivmod>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	4b39      	ldr	r3, [pc, #228]	; (8004d9c <UART_SetConfig+0x4e4>)
 8004cb8:	fba3 1302 	umull	r1, r3, r3, r2
 8004cbc:	095b      	lsrs	r3, r3, #5
 8004cbe:	2164      	movs	r1, #100	; 0x64
 8004cc0:	fb01 f303 	mul.w	r3, r1, r3
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	011b      	lsls	r3, r3, #4
 8004cc8:	3332      	adds	r3, #50	; 0x32
 8004cca:	4a34      	ldr	r2, [pc, #208]	; (8004d9c <UART_SetConfig+0x4e4>)
 8004ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd0:	095b      	lsrs	r3, r3, #5
 8004cd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cd6:	441c      	add	r4, r3
 8004cd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cdc:	2200      	movs	r2, #0
 8004cde:	673b      	str	r3, [r7, #112]	; 0x70
 8004ce0:	677a      	str	r2, [r7, #116]	; 0x74
 8004ce2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004ce6:	4642      	mov	r2, r8
 8004ce8:	464b      	mov	r3, r9
 8004cea:	1891      	adds	r1, r2, r2
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	415b      	adcs	r3, r3
 8004cf0:	60fb      	str	r3, [r7, #12]
 8004cf2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cf6:	4641      	mov	r1, r8
 8004cf8:	1851      	adds	r1, r2, r1
 8004cfa:	6039      	str	r1, [r7, #0]
 8004cfc:	4649      	mov	r1, r9
 8004cfe:	414b      	adcs	r3, r1
 8004d00:	607b      	str	r3, [r7, #4]
 8004d02:	f04f 0200 	mov.w	r2, #0
 8004d06:	f04f 0300 	mov.w	r3, #0
 8004d0a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d0e:	4659      	mov	r1, fp
 8004d10:	00cb      	lsls	r3, r1, #3
 8004d12:	4651      	mov	r1, sl
 8004d14:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d18:	4651      	mov	r1, sl
 8004d1a:	00ca      	lsls	r2, r1, #3
 8004d1c:	4610      	mov	r0, r2
 8004d1e:	4619      	mov	r1, r3
 8004d20:	4603      	mov	r3, r0
 8004d22:	4642      	mov	r2, r8
 8004d24:	189b      	adds	r3, r3, r2
 8004d26:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d28:	464b      	mov	r3, r9
 8004d2a:	460a      	mov	r2, r1
 8004d2c:	eb42 0303 	adc.w	r3, r2, r3
 8004d30:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	663b      	str	r3, [r7, #96]	; 0x60
 8004d3c:	667a      	str	r2, [r7, #100]	; 0x64
 8004d3e:	f04f 0200 	mov.w	r2, #0
 8004d42:	f04f 0300 	mov.w	r3, #0
 8004d46:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004d4a:	4649      	mov	r1, r9
 8004d4c:	008b      	lsls	r3, r1, #2
 8004d4e:	4641      	mov	r1, r8
 8004d50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d54:	4641      	mov	r1, r8
 8004d56:	008a      	lsls	r2, r1, #2
 8004d58:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d5c:	f7fb fa90 	bl	8000280 <__aeabi_uldivmod>
 8004d60:	4602      	mov	r2, r0
 8004d62:	460b      	mov	r3, r1
 8004d64:	4b0d      	ldr	r3, [pc, #52]	; (8004d9c <UART_SetConfig+0x4e4>)
 8004d66:	fba3 1302 	umull	r1, r3, r3, r2
 8004d6a:	095b      	lsrs	r3, r3, #5
 8004d6c:	2164      	movs	r1, #100	; 0x64
 8004d6e:	fb01 f303 	mul.w	r3, r1, r3
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	011b      	lsls	r3, r3, #4
 8004d76:	3332      	adds	r3, #50	; 0x32
 8004d78:	4a08      	ldr	r2, [pc, #32]	; (8004d9c <UART_SetConfig+0x4e4>)
 8004d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7e:	095b      	lsrs	r3, r3, #5
 8004d80:	f003 020f 	and.w	r2, r3, #15
 8004d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4422      	add	r2, r4
 8004d8c:	609a      	str	r2, [r3, #8]
}
 8004d8e:	bf00      	nop
 8004d90:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004d94:	46bd      	mov	sp, r7
 8004d96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d9a:	bf00      	nop
 8004d9c:	51eb851f 	.word	0x51eb851f

08004da0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004da4:	4904      	ldr	r1, [pc, #16]	; (8004db8 <MX_FATFS_Init+0x18>)
 8004da6:	4805      	ldr	r0, [pc, #20]	; (8004dbc <MX_FATFS_Init+0x1c>)
 8004da8:	f002 feae 	bl	8007b08 <FATFS_LinkDriver>
 8004dac:	4603      	mov	r3, r0
 8004dae:	461a      	mov	r2, r3
 8004db0:	4b03      	ldr	r3, [pc, #12]	; (8004dc0 <MX_FATFS_Init+0x20>)
 8004db2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004db4:	bf00      	nop
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	2000322c 	.word	0x2000322c
 8004dbc:	20000014 	.word	0x20000014
 8004dc0:	20003228 	.word	0x20003228

08004dc4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004dc8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	4603      	mov	r3, r0
 8004ddc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8004dde:	79fb      	ldrb	r3, [r7, #7]
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7fb ffdb 	bl	8000d9c <SD_disk_initialize>
 8004de6:	4603      	mov	r3, r0
 8004de8:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3708      	adds	r7, #8
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b082      	sub	sp, #8
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	4603      	mov	r3, r0
 8004dfa:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8004dfc:	79fb      	ldrb	r3, [r7, #7]
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7fc f8b6 	bl	8000f70 <SD_disk_status>
 8004e04:	4603      	mov	r3, r0
 8004e06:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3708      	adds	r7, #8
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60b9      	str	r1, [r7, #8]
 8004e18:	607a      	str	r2, [r7, #4]
 8004e1a:	603b      	str	r3, [r7, #0]
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8004e20:	7bf8      	ldrb	r0, [r7, #15]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	68b9      	ldr	r1, [r7, #8]
 8004e28:	f7fc f8b8 	bl	8000f9c <SD_disk_read>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3710      	adds	r7, #16
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60b9      	str	r1, [r7, #8]
 8004e40:	607a      	str	r2, [r7, #4]
 8004e42:	603b      	str	r3, [r7, #0]
 8004e44:	4603      	mov	r3, r0
 8004e46:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8004e48:	7bf8      	ldrb	r0, [r7, #15]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	68b9      	ldr	r1, [r7, #8]
 8004e50:	f7fc f90e 	bl	8001070 <SD_disk_write>
 8004e54:	4603      	mov	r3, r0
 8004e56:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	4603      	mov	r3, r0
 8004e68:	603a      	str	r2, [r7, #0]
 8004e6a:	71fb      	strb	r3, [r7, #7]
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8004e70:	79fb      	ldrb	r3, [r7, #7]
 8004e72:	79b9      	ldrb	r1, [r7, #6]
 8004e74:	683a      	ldr	r2, [r7, #0]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7fc f97e 	bl	8001178 <SD_disk_ioctl>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3708      	adds	r7, #8
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	4603      	mov	r3, r0
 8004e90:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004e92:	79fb      	ldrb	r3, [r7, #7]
 8004e94:	4a08      	ldr	r2, [pc, #32]	; (8004eb8 <disk_status+0x30>)
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	4413      	add	r3, r2
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	79fa      	ldrb	r2, [r7, #7]
 8004ea0:	4905      	ldr	r1, [pc, #20]	; (8004eb8 <disk_status+0x30>)
 8004ea2:	440a      	add	r2, r1
 8004ea4:	7a12      	ldrb	r2, [r2, #8]
 8004ea6:	4610      	mov	r0, r2
 8004ea8:	4798      	blx	r3
 8004eaa:	4603      	mov	r3, r0
 8004eac:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3710      	adds	r7, #16
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	20003458 	.word	0x20003458

08004ebc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004eca:	79fb      	ldrb	r3, [r7, #7]
 8004ecc:	4a0d      	ldr	r2, [pc, #52]	; (8004f04 <disk_initialize+0x48>)
 8004ece:	5cd3      	ldrb	r3, [r2, r3]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d111      	bne.n	8004ef8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004ed4:	79fb      	ldrb	r3, [r7, #7]
 8004ed6:	4a0b      	ldr	r2, [pc, #44]	; (8004f04 <disk_initialize+0x48>)
 8004ed8:	2101      	movs	r1, #1
 8004eda:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004edc:	79fb      	ldrb	r3, [r7, #7]
 8004ede:	4a09      	ldr	r2, [pc, #36]	; (8004f04 <disk_initialize+0x48>)
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4413      	add	r3, r2
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	79fa      	ldrb	r2, [r7, #7]
 8004eea:	4906      	ldr	r1, [pc, #24]	; (8004f04 <disk_initialize+0x48>)
 8004eec:	440a      	add	r2, r1
 8004eee:	7a12      	ldrb	r2, [r2, #8]
 8004ef0:	4610      	mov	r0, r2
 8004ef2:	4798      	blx	r3
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	20003458 	.word	0x20003458

08004f08 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004f08:	b590      	push	{r4, r7, lr}
 8004f0a:	b087      	sub	sp, #28
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60b9      	str	r1, [r7, #8]
 8004f10:	607a      	str	r2, [r7, #4]
 8004f12:	603b      	str	r3, [r7, #0]
 8004f14:	4603      	mov	r3, r0
 8004f16:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004f18:	7bfb      	ldrb	r3, [r7, #15]
 8004f1a:	4a0a      	ldr	r2, [pc, #40]	; (8004f44 <disk_read+0x3c>)
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4413      	add	r3, r2
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	689c      	ldr	r4, [r3, #8]
 8004f24:	7bfb      	ldrb	r3, [r7, #15]
 8004f26:	4a07      	ldr	r2, [pc, #28]	; (8004f44 <disk_read+0x3c>)
 8004f28:	4413      	add	r3, r2
 8004f2a:	7a18      	ldrb	r0, [r3, #8]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	68b9      	ldr	r1, [r7, #8]
 8004f32:	47a0      	blx	r4
 8004f34:	4603      	mov	r3, r0
 8004f36:	75fb      	strb	r3, [r7, #23]
  return res;
 8004f38:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	371c      	adds	r7, #28
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd90      	pop	{r4, r7, pc}
 8004f42:	bf00      	nop
 8004f44:	20003458 	.word	0x20003458

08004f48 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004f48:	b590      	push	{r4, r7, lr}
 8004f4a:	b087      	sub	sp, #28
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60b9      	str	r1, [r7, #8]
 8004f50:	607a      	str	r2, [r7, #4]
 8004f52:	603b      	str	r3, [r7, #0]
 8004f54:	4603      	mov	r3, r0
 8004f56:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004f58:	7bfb      	ldrb	r3, [r7, #15]
 8004f5a:	4a0a      	ldr	r2, [pc, #40]	; (8004f84 <disk_write+0x3c>)
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	4413      	add	r3, r2
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	68dc      	ldr	r4, [r3, #12]
 8004f64:	7bfb      	ldrb	r3, [r7, #15]
 8004f66:	4a07      	ldr	r2, [pc, #28]	; (8004f84 <disk_write+0x3c>)
 8004f68:	4413      	add	r3, r2
 8004f6a:	7a18      	ldrb	r0, [r3, #8]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	68b9      	ldr	r1, [r7, #8]
 8004f72:	47a0      	blx	r4
 8004f74:	4603      	mov	r3, r0
 8004f76:	75fb      	strb	r3, [r7, #23]
  return res;
 8004f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	371c      	adds	r7, #28
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd90      	pop	{r4, r7, pc}
 8004f82:	bf00      	nop
 8004f84:	20003458 	.word	0x20003458

08004f88 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	4603      	mov	r3, r0
 8004f90:	603a      	str	r2, [r7, #0]
 8004f92:	71fb      	strb	r3, [r7, #7]
 8004f94:	460b      	mov	r3, r1
 8004f96:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004f98:	79fb      	ldrb	r3, [r7, #7]
 8004f9a:	4a09      	ldr	r2, [pc, #36]	; (8004fc0 <disk_ioctl+0x38>)
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	4413      	add	r3, r2
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	79fa      	ldrb	r2, [r7, #7]
 8004fa6:	4906      	ldr	r1, [pc, #24]	; (8004fc0 <disk_ioctl+0x38>)
 8004fa8:	440a      	add	r2, r1
 8004faa:	7a10      	ldrb	r0, [r2, #8]
 8004fac:	79b9      	ldrb	r1, [r7, #6]
 8004fae:	683a      	ldr	r2, [r7, #0]
 8004fb0:	4798      	blx	r3
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	73fb      	strb	r3, [r7, #15]
  return res;
 8004fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3710      	adds	r7, #16
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	20003458 	.word	0x20003458

08004fc4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004fd4:	89fb      	ldrh	r3, [r7, #14]
 8004fd6:	021b      	lsls	r3, r3, #8
 8004fd8:	b21a      	sxth	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	b21b      	sxth	r3, r3
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	b21b      	sxth	r3, r3
 8004fe4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004fe6:	89fb      	ldrh	r3, [r7, #14]
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3714      	adds	r7, #20
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	3303      	adds	r3, #3
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	021b      	lsls	r3, r3, #8
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	3202      	adds	r2, #2
 800500c:	7812      	ldrb	r2, [r2, #0]
 800500e:	4313      	orrs	r3, r2
 8005010:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	021b      	lsls	r3, r3, #8
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	3201      	adds	r2, #1
 800501a:	7812      	ldrb	r2, [r2, #0]
 800501c:	4313      	orrs	r3, r2
 800501e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	021b      	lsls	r3, r3, #8
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	7812      	ldrb	r2, [r2, #0]
 8005028:	4313      	orrs	r3, r2
 800502a:	60fb      	str	r3, [r7, #12]
	return rv;
 800502c:	68fb      	ldr	r3, [r7, #12]
}
 800502e:	4618      	mov	r0, r3
 8005030:	3714      	adds	r7, #20
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800503a:	b480      	push	{r7}
 800503c:	b083      	sub	sp, #12
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
 8005042:	460b      	mov	r3, r1
 8005044:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	1c5a      	adds	r2, r3, #1
 800504a:	607a      	str	r2, [r7, #4]
 800504c:	887a      	ldrh	r2, [r7, #2]
 800504e:	b2d2      	uxtb	r2, r2
 8005050:	701a      	strb	r2, [r3, #0]
 8005052:	887b      	ldrh	r3, [r7, #2]
 8005054:	0a1b      	lsrs	r3, r3, #8
 8005056:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	1c5a      	adds	r2, r3, #1
 800505c:	607a      	str	r2, [r7, #4]
 800505e:	887a      	ldrh	r2, [r7, #2]
 8005060:	b2d2      	uxtb	r2, r2
 8005062:	701a      	strb	r2, [r3, #0]
}
 8005064:	bf00      	nop
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	1c5a      	adds	r2, r3, #1
 800507e:	607a      	str	r2, [r7, #4]
 8005080:	683a      	ldr	r2, [r7, #0]
 8005082:	b2d2      	uxtb	r2, r2
 8005084:	701a      	strb	r2, [r3, #0]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	0a1b      	lsrs	r3, r3, #8
 800508a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	1c5a      	adds	r2, r3, #1
 8005090:	607a      	str	r2, [r7, #4]
 8005092:	683a      	ldr	r2, [r7, #0]
 8005094:	b2d2      	uxtb	r2, r2
 8005096:	701a      	strb	r2, [r3, #0]
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	0a1b      	lsrs	r3, r3, #8
 800509c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	1c5a      	adds	r2, r3, #1
 80050a2:	607a      	str	r2, [r7, #4]
 80050a4:	683a      	ldr	r2, [r7, #0]
 80050a6:	b2d2      	uxtb	r2, r2
 80050a8:	701a      	strb	r2, [r3, #0]
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	0a1b      	lsrs	r3, r3, #8
 80050ae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	1c5a      	adds	r2, r3, #1
 80050b4:	607a      	str	r2, [r7, #4]
 80050b6:	683a      	ldr	r2, [r7, #0]
 80050b8:	b2d2      	uxtb	r2, r2
 80050ba:	701a      	strb	r2, [r3, #0]
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80050c8:	b480      	push	{r7}
 80050ca:	b087      	sub	sp, #28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00d      	beq.n	80050fe <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80050e2:	693a      	ldr	r2, [r7, #16]
 80050e4:	1c53      	adds	r3, r2, #1
 80050e6:	613b      	str	r3, [r7, #16]
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	1c59      	adds	r1, r3, #1
 80050ec:	6179      	str	r1, [r7, #20]
 80050ee:	7812      	ldrb	r2, [r2, #0]
 80050f0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	3b01      	subs	r3, #1
 80050f6:	607b      	str	r3, [r7, #4]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1f1      	bne.n	80050e2 <mem_cpy+0x1a>
	}
}
 80050fe:	bf00      	nop
 8005100:	371c      	adds	r7, #28
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800510a:	b480      	push	{r7}
 800510c:	b087      	sub	sp, #28
 800510e:	af00      	add	r7, sp, #0
 8005110:	60f8      	str	r0, [r7, #12]
 8005112:	60b9      	str	r1, [r7, #8]
 8005114:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	1c5a      	adds	r2, r3, #1
 800511e:	617a      	str	r2, [r7, #20]
 8005120:	68ba      	ldr	r2, [r7, #8]
 8005122:	b2d2      	uxtb	r2, r2
 8005124:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	3b01      	subs	r3, #1
 800512a:	607b      	str	r3, [r7, #4]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1f3      	bne.n	800511a <mem_set+0x10>
}
 8005132:	bf00      	nop
 8005134:	bf00      	nop
 8005136:	371c      	adds	r7, #28
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005140:	b480      	push	{r7}
 8005142:	b089      	sub	sp, #36	; 0x24
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	61fb      	str	r3, [r7, #28]
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005154:	2300      	movs	r3, #0
 8005156:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	1c5a      	adds	r2, r3, #1
 800515c:	61fa      	str	r2, [r7, #28]
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	4619      	mov	r1, r3
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	1c5a      	adds	r2, r3, #1
 8005166:	61ba      	str	r2, [r7, #24]
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	1acb      	subs	r3, r1, r3
 800516c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	3b01      	subs	r3, #1
 8005172:	607b      	str	r3, [r7, #4]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d002      	beq.n	8005180 <mem_cmp+0x40>
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d0eb      	beq.n	8005158 <mem_cmp+0x18>

	return r;
 8005180:	697b      	ldr	r3, [r7, #20]
}
 8005182:	4618      	mov	r0, r3
 8005184:	3724      	adds	r7, #36	; 0x24
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr

0800518e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800518e:	b480      	push	{r7}
 8005190:	b083      	sub	sp, #12
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
 8005196:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005198:	e002      	b.n	80051a0 <chk_chr+0x12>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	3301      	adds	r3, #1
 800519e:	607b      	str	r3, [r7, #4]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d005      	beq.n	80051b4 <chk_chr+0x26>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	461a      	mov	r2, r3
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d1f2      	bne.n	800519a <chk_chr+0xc>
	return *str;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	781b      	ldrb	r3, [r3, #0]
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80051ce:	2300      	movs	r3, #0
 80051d0:	60bb      	str	r3, [r7, #8]
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	60fb      	str	r3, [r7, #12]
 80051d6:	e029      	b.n	800522c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80051d8:	4a27      	ldr	r2, [pc, #156]	; (8005278 <chk_lock+0xb4>)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	011b      	lsls	r3, r3, #4
 80051de:	4413      	add	r3, r2
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d01d      	beq.n	8005222 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80051e6:	4a24      	ldr	r2, [pc, #144]	; (8005278 <chk_lock+0xb4>)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	011b      	lsls	r3, r3, #4
 80051ec:	4413      	add	r3, r2
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d116      	bne.n	8005226 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80051f8:	4a1f      	ldr	r2, [pc, #124]	; (8005278 <chk_lock+0xb4>)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	011b      	lsls	r3, r3, #4
 80051fe:	4413      	add	r3, r2
 8005200:	3304      	adds	r3, #4
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005208:	429a      	cmp	r2, r3
 800520a:	d10c      	bne.n	8005226 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800520c:	4a1a      	ldr	r2, [pc, #104]	; (8005278 <chk_lock+0xb4>)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	011b      	lsls	r3, r3, #4
 8005212:	4413      	add	r3, r2
 8005214:	3308      	adds	r3, #8
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800521c:	429a      	cmp	r2, r3
 800521e:	d102      	bne.n	8005226 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005220:	e007      	b.n	8005232 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005222:	2301      	movs	r3, #1
 8005224:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	3301      	adds	r3, #1
 800522a:	60fb      	str	r3, [r7, #12]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d9d2      	bls.n	80051d8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2b02      	cmp	r3, #2
 8005236:	d109      	bne.n	800524c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d102      	bne.n	8005244 <chk_lock+0x80>
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	2b02      	cmp	r3, #2
 8005242:	d101      	bne.n	8005248 <chk_lock+0x84>
 8005244:	2300      	movs	r3, #0
 8005246:	e010      	b.n	800526a <chk_lock+0xa6>
 8005248:	2312      	movs	r3, #18
 800524a:	e00e      	b.n	800526a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d108      	bne.n	8005264 <chk_lock+0xa0>
 8005252:	4a09      	ldr	r2, [pc, #36]	; (8005278 <chk_lock+0xb4>)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	011b      	lsls	r3, r3, #4
 8005258:	4413      	add	r3, r2
 800525a:	330c      	adds	r3, #12
 800525c:	881b      	ldrh	r3, [r3, #0]
 800525e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005262:	d101      	bne.n	8005268 <chk_lock+0xa4>
 8005264:	2310      	movs	r3, #16
 8005266:	e000      	b.n	800526a <chk_lock+0xa6>
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3714      	adds	r7, #20
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	20003238 	.word	0x20003238

0800527c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005282:	2300      	movs	r3, #0
 8005284:	607b      	str	r3, [r7, #4]
 8005286:	e002      	b.n	800528e <enq_lock+0x12>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	3301      	adds	r3, #1
 800528c:	607b      	str	r3, [r7, #4]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d806      	bhi.n	80052a2 <enq_lock+0x26>
 8005294:	4a09      	ldr	r2, [pc, #36]	; (80052bc <enq_lock+0x40>)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	011b      	lsls	r3, r3, #4
 800529a:	4413      	add	r3, r2
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1f2      	bne.n	8005288 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	bf14      	ite	ne
 80052a8:	2301      	movne	r3, #1
 80052aa:	2300      	moveq	r3, #0
 80052ac:	b2db      	uxtb	r3, r3
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	370c      	adds	r7, #12
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	20003238 	.word	0x20003238

080052c0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80052ca:	2300      	movs	r3, #0
 80052cc:	60fb      	str	r3, [r7, #12]
 80052ce:	e01f      	b.n	8005310 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80052d0:	4a41      	ldr	r2, [pc, #260]	; (80053d8 <inc_lock+0x118>)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	011b      	lsls	r3, r3, #4
 80052d6:	4413      	add	r3, r2
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d113      	bne.n	800530a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80052e2:	4a3d      	ldr	r2, [pc, #244]	; (80053d8 <inc_lock+0x118>)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	011b      	lsls	r3, r3, #4
 80052e8:	4413      	add	r3, r2
 80052ea:	3304      	adds	r3, #4
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d109      	bne.n	800530a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80052f6:	4a38      	ldr	r2, [pc, #224]	; (80053d8 <inc_lock+0x118>)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	011b      	lsls	r3, r3, #4
 80052fc:	4413      	add	r3, r2
 80052fe:	3308      	adds	r3, #8
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005306:	429a      	cmp	r2, r3
 8005308:	d006      	beq.n	8005318 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	3301      	adds	r3, #1
 800530e:	60fb      	str	r3, [r7, #12]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d9dc      	bls.n	80052d0 <inc_lock+0x10>
 8005316:	e000      	b.n	800531a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005318:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2b02      	cmp	r3, #2
 800531e:	d132      	bne.n	8005386 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005320:	2300      	movs	r3, #0
 8005322:	60fb      	str	r3, [r7, #12]
 8005324:	e002      	b.n	800532c <inc_lock+0x6c>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	3301      	adds	r3, #1
 800532a:	60fb      	str	r3, [r7, #12]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2b01      	cmp	r3, #1
 8005330:	d806      	bhi.n	8005340 <inc_lock+0x80>
 8005332:	4a29      	ldr	r2, [pc, #164]	; (80053d8 <inc_lock+0x118>)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	011b      	lsls	r3, r3, #4
 8005338:	4413      	add	r3, r2
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1f2      	bne.n	8005326 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2b02      	cmp	r3, #2
 8005344:	d101      	bne.n	800534a <inc_lock+0x8a>
 8005346:	2300      	movs	r3, #0
 8005348:	e040      	b.n	80053cc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	4922      	ldr	r1, [pc, #136]	; (80053d8 <inc_lock+0x118>)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	011b      	lsls	r3, r3, #4
 8005354:	440b      	add	r3, r1
 8005356:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	689a      	ldr	r2, [r3, #8]
 800535c:	491e      	ldr	r1, [pc, #120]	; (80053d8 <inc_lock+0x118>)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	011b      	lsls	r3, r3, #4
 8005362:	440b      	add	r3, r1
 8005364:	3304      	adds	r3, #4
 8005366:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	695a      	ldr	r2, [r3, #20]
 800536c:	491a      	ldr	r1, [pc, #104]	; (80053d8 <inc_lock+0x118>)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	011b      	lsls	r3, r3, #4
 8005372:	440b      	add	r3, r1
 8005374:	3308      	adds	r3, #8
 8005376:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005378:	4a17      	ldr	r2, [pc, #92]	; (80053d8 <inc_lock+0x118>)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	011b      	lsls	r3, r3, #4
 800537e:	4413      	add	r3, r2
 8005380:	330c      	adds	r3, #12
 8005382:	2200      	movs	r2, #0
 8005384:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d009      	beq.n	80053a0 <inc_lock+0xe0>
 800538c:	4a12      	ldr	r2, [pc, #72]	; (80053d8 <inc_lock+0x118>)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	011b      	lsls	r3, r3, #4
 8005392:	4413      	add	r3, r2
 8005394:	330c      	adds	r3, #12
 8005396:	881b      	ldrh	r3, [r3, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d001      	beq.n	80053a0 <inc_lock+0xe0>
 800539c:	2300      	movs	r3, #0
 800539e:	e015      	b.n	80053cc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d108      	bne.n	80053b8 <inc_lock+0xf8>
 80053a6:	4a0c      	ldr	r2, [pc, #48]	; (80053d8 <inc_lock+0x118>)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	011b      	lsls	r3, r3, #4
 80053ac:	4413      	add	r3, r2
 80053ae:	330c      	adds	r3, #12
 80053b0:	881b      	ldrh	r3, [r3, #0]
 80053b2:	3301      	adds	r3, #1
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	e001      	b.n	80053bc <inc_lock+0xfc>
 80053b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053bc:	4906      	ldr	r1, [pc, #24]	; (80053d8 <inc_lock+0x118>)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	011b      	lsls	r3, r3, #4
 80053c2:	440b      	add	r3, r1
 80053c4:	330c      	adds	r3, #12
 80053c6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	3301      	adds	r3, #1
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3714      	adds	r7, #20
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	20003238 	.word	0x20003238

080053dc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	3b01      	subs	r3, #1
 80053e8:	607b      	str	r3, [r7, #4]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d825      	bhi.n	800543c <dec_lock+0x60>
		n = Files[i].ctr;
 80053f0:	4a17      	ldr	r2, [pc, #92]	; (8005450 <dec_lock+0x74>)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	011b      	lsls	r3, r3, #4
 80053f6:	4413      	add	r3, r2
 80053f8:	330c      	adds	r3, #12
 80053fa:	881b      	ldrh	r3, [r3, #0]
 80053fc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80053fe:	89fb      	ldrh	r3, [r7, #14]
 8005400:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005404:	d101      	bne.n	800540a <dec_lock+0x2e>
 8005406:	2300      	movs	r3, #0
 8005408:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800540a:	89fb      	ldrh	r3, [r7, #14]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d002      	beq.n	8005416 <dec_lock+0x3a>
 8005410:	89fb      	ldrh	r3, [r7, #14]
 8005412:	3b01      	subs	r3, #1
 8005414:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005416:	4a0e      	ldr	r2, [pc, #56]	; (8005450 <dec_lock+0x74>)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	011b      	lsls	r3, r3, #4
 800541c:	4413      	add	r3, r2
 800541e:	330c      	adds	r3, #12
 8005420:	89fa      	ldrh	r2, [r7, #14]
 8005422:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005424:	89fb      	ldrh	r3, [r7, #14]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d105      	bne.n	8005436 <dec_lock+0x5a>
 800542a:	4a09      	ldr	r2, [pc, #36]	; (8005450 <dec_lock+0x74>)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	011b      	lsls	r3, r3, #4
 8005430:	4413      	add	r3, r2
 8005432:	2200      	movs	r2, #0
 8005434:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005436:	2300      	movs	r3, #0
 8005438:	737b      	strb	r3, [r7, #13]
 800543a:	e001      	b.n	8005440 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800543c:	2302      	movs	r3, #2
 800543e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005440:	7b7b      	ldrb	r3, [r7, #13]
}
 8005442:	4618      	mov	r0, r3
 8005444:	3714      	adds	r7, #20
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	20003238 	.word	0x20003238

08005454 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800545c:	2300      	movs	r3, #0
 800545e:	60fb      	str	r3, [r7, #12]
 8005460:	e010      	b.n	8005484 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005462:	4a0d      	ldr	r2, [pc, #52]	; (8005498 <clear_lock+0x44>)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	011b      	lsls	r3, r3, #4
 8005468:	4413      	add	r3, r2
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	429a      	cmp	r2, r3
 8005470:	d105      	bne.n	800547e <clear_lock+0x2a>
 8005472:	4a09      	ldr	r2, [pc, #36]	; (8005498 <clear_lock+0x44>)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	011b      	lsls	r3, r3, #4
 8005478:	4413      	add	r3, r2
 800547a:	2200      	movs	r2, #0
 800547c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	3301      	adds	r3, #1
 8005482:	60fb      	str	r3, [r7, #12]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d9eb      	bls.n	8005462 <clear_lock+0xe>
	}
}
 800548a:	bf00      	nop
 800548c:	bf00      	nop
 800548e:	3714      	adds	r7, #20
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr
 8005498:	20003238 	.word	0x20003238

0800549c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b086      	sub	sp, #24
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80054a4:	2300      	movs	r3, #0
 80054a6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	78db      	ldrb	r3, [r3, #3]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d034      	beq.n	800551a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	7858      	ldrb	r0, [r3, #1]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80054c0:	2301      	movs	r3, #1
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	f7ff fd40 	bl	8004f48 <disk_write>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d002      	beq.n	80054d4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	73fb      	strb	r3, [r7, #15]
 80054d2:	e022      	b.n	800551a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054de:	697a      	ldr	r2, [r7, #20]
 80054e0:	1ad2      	subs	r2, r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d217      	bcs.n	800551a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	789b      	ldrb	r3, [r3, #2]
 80054ee:	613b      	str	r3, [r7, #16]
 80054f0:	e010      	b.n	8005514 <sync_window+0x78>
					wsect += fs->fsize;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	4413      	add	r3, r2
 80054fa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	7858      	ldrb	r0, [r3, #1]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005506:	2301      	movs	r3, #1
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	f7ff fd1d 	bl	8004f48 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	3b01      	subs	r3, #1
 8005512:	613b      	str	r3, [r7, #16]
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	2b01      	cmp	r3, #1
 8005518:	d8eb      	bhi.n	80054f2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800551a:	7bfb      	ldrb	r3, [r7, #15]
}
 800551c:	4618      	mov	r0, r3
 800551e:	3718      	adds	r7, #24
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800552e:	2300      	movs	r3, #0
 8005530:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005536:	683a      	ldr	r2, [r7, #0]
 8005538:	429a      	cmp	r2, r3
 800553a:	d01b      	beq.n	8005574 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f7ff ffad 	bl	800549c <sync_window>
 8005542:	4603      	mov	r3, r0
 8005544:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005546:	7bfb      	ldrb	r3, [r7, #15]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d113      	bne.n	8005574 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	7858      	ldrb	r0, [r3, #1]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005556:	2301      	movs	r3, #1
 8005558:	683a      	ldr	r2, [r7, #0]
 800555a:	f7ff fcd5 	bl	8004f08 <disk_read>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d004      	beq.n	800556e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005564:	f04f 33ff 	mov.w	r3, #4294967295
 8005568:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800556a:	2301      	movs	r3, #1
 800556c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	683a      	ldr	r2, [r7, #0]
 8005572:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8005574:	7bfb      	ldrb	r3, [r7, #15]
}
 8005576:	4618      	mov	r0, r3
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
	...

08005580 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f7ff ff87 	bl	800549c <sync_window>
 800558e:	4603      	mov	r3, r0
 8005590:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005592:	7bfb      	ldrb	r3, [r7, #15]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d159      	bne.n	800564c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	2b03      	cmp	r3, #3
 800559e:	d149      	bne.n	8005634 <sync_fs+0xb4>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	791b      	ldrb	r3, [r3, #4]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d145      	bne.n	8005634 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	899b      	ldrh	r3, [r3, #12]
 80055b2:	461a      	mov	r2, r3
 80055b4:	2100      	movs	r1, #0
 80055b6:	f7ff fda8 	bl	800510a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	3338      	adds	r3, #56	; 0x38
 80055be:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80055c2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7ff fd37 	bl	800503a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	3338      	adds	r3, #56	; 0x38
 80055d0:	4921      	ldr	r1, [pc, #132]	; (8005658 <sync_fs+0xd8>)
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7ff fd4c 	bl	8005070 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	3338      	adds	r3, #56	; 0x38
 80055dc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80055e0:	491e      	ldr	r1, [pc, #120]	; (800565c <sync_fs+0xdc>)
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7ff fd44 	bl	8005070 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	3338      	adds	r3, #56	; 0x38
 80055ec:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	4619      	mov	r1, r3
 80055f6:	4610      	mov	r0, r2
 80055f8:	f7ff fd3a 	bl	8005070 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	3338      	adds	r3, #56	; 0x38
 8005600:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	695b      	ldr	r3, [r3, #20]
 8005608:	4619      	mov	r1, r3
 800560a:	4610      	mov	r0, r2
 800560c:	f7ff fd30 	bl	8005070 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005614:	1c5a      	adds	r2, r3, #1
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	7858      	ldrb	r0, [r3, #1]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005628:	2301      	movs	r3, #1
 800562a:	f7ff fc8d 	bl	8004f48 <disk_write>
			fs->fsi_flag = 0;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	785b      	ldrb	r3, [r3, #1]
 8005638:	2200      	movs	r2, #0
 800563a:	2100      	movs	r1, #0
 800563c:	4618      	mov	r0, r3
 800563e:	f7ff fca3 	bl	8004f88 <disk_ioctl>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d001      	beq.n	800564c <sync_fs+0xcc>
 8005648:	2301      	movs	r3, #1
 800564a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800564c:	7bfb      	ldrb	r3, [r7, #15]
}
 800564e:	4618      	mov	r0, r3
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	41615252 	.word	0x41615252
 800565c:	61417272 	.word	0x61417272

08005660 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	3b02      	subs	r3, #2
 800566e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	69db      	ldr	r3, [r3, #28]
 8005674:	3b02      	subs	r3, #2
 8005676:	683a      	ldr	r2, [r7, #0]
 8005678:	429a      	cmp	r2, r3
 800567a:	d301      	bcc.n	8005680 <clust2sect+0x20>
 800567c:	2300      	movs	r3, #0
 800567e:	e008      	b.n	8005692 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	895b      	ldrh	r3, [r3, #10]
 8005684:	461a      	mov	r2, r3
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	fb03 f202 	mul.w	r2, r3, r2
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005690:	4413      	add	r3, r2
}
 8005692:	4618      	mov	r0, r3
 8005694:	370c      	adds	r7, #12
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr

0800569e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800569e:	b580      	push	{r7, lr}
 80056a0:	b086      	sub	sp, #24
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
 80056a6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d904      	bls.n	80056be <get_fat+0x20>
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	69db      	ldr	r3, [r3, #28]
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d302      	bcc.n	80056c4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80056be:	2301      	movs	r3, #1
 80056c0:	617b      	str	r3, [r7, #20]
 80056c2:	e0bb      	b.n	800583c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80056c4:	f04f 33ff 	mov.w	r3, #4294967295
 80056c8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	2b03      	cmp	r3, #3
 80056d0:	f000 8083 	beq.w	80057da <get_fat+0x13c>
 80056d4:	2b03      	cmp	r3, #3
 80056d6:	f300 80a7 	bgt.w	8005828 <get_fat+0x18a>
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d002      	beq.n	80056e4 <get_fat+0x46>
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d056      	beq.n	8005790 <get_fat+0xf2>
 80056e2:	e0a1      	b.n	8005828 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	60fb      	str	r3, [r7, #12]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	085b      	lsrs	r3, r3, #1
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	4413      	add	r3, r2
 80056f0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	899b      	ldrh	r3, [r3, #12]
 80056fa:	4619      	mov	r1, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8005702:	4413      	add	r3, r2
 8005704:	4619      	mov	r1, r3
 8005706:	6938      	ldr	r0, [r7, #16]
 8005708:	f7ff ff0c 	bl	8005524 <move_window>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	f040 808d 	bne.w	800582e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	1c5a      	adds	r2, r3, #1
 8005718:	60fa      	str	r2, [r7, #12]
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	8992      	ldrh	r2, [r2, #12]
 800571e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005722:	fb01 f202 	mul.w	r2, r1, r2
 8005726:	1a9b      	subs	r3, r3, r2
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	4413      	add	r3, r2
 800572c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005730:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	899b      	ldrh	r3, [r3, #12]
 800573a:	4619      	mov	r1, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005742:	4413      	add	r3, r2
 8005744:	4619      	mov	r1, r3
 8005746:	6938      	ldr	r0, [r7, #16]
 8005748:	f7ff feec 	bl	8005524 <move_window>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d16f      	bne.n	8005832 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	899b      	ldrh	r3, [r3, #12]
 8005756:	461a      	mov	r2, r3
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	fbb3 f1f2 	udiv	r1, r3, r2
 800575e:	fb01 f202 	mul.w	r2, r1, r2
 8005762:	1a9b      	subs	r3, r3, r2
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	4413      	add	r3, r2
 8005768:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800576c:	021b      	lsls	r3, r3, #8
 800576e:	461a      	mov	r2, r3
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	4313      	orrs	r3, r2
 8005774:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	2b00      	cmp	r3, #0
 800577e:	d002      	beq.n	8005786 <get_fat+0xe8>
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	091b      	lsrs	r3, r3, #4
 8005784:	e002      	b.n	800578c <get_fat+0xee>
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800578c:	617b      	str	r3, [r7, #20]
			break;
 800578e:	e055      	b.n	800583c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	899b      	ldrh	r3, [r3, #12]
 8005798:	085b      	lsrs	r3, r3, #1
 800579a:	b29b      	uxth	r3, r3
 800579c:	4619      	mov	r1, r3
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80057a4:	4413      	add	r3, r2
 80057a6:	4619      	mov	r1, r3
 80057a8:	6938      	ldr	r0, [r7, #16]
 80057aa:	f7ff febb 	bl	8005524 <move_window>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d140      	bne.n	8005836 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	005b      	lsls	r3, r3, #1
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	8992      	ldrh	r2, [r2, #12]
 80057c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80057c6:	fb00 f202 	mul.w	r2, r0, r2
 80057ca:	1a9b      	subs	r3, r3, r2
 80057cc:	440b      	add	r3, r1
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7ff fbf8 	bl	8004fc4 <ld_word>
 80057d4:	4603      	mov	r3, r0
 80057d6:	617b      	str	r3, [r7, #20]
			break;
 80057d8:	e030      	b.n	800583c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	899b      	ldrh	r3, [r3, #12]
 80057e2:	089b      	lsrs	r3, r3, #2
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	4619      	mov	r1, r3
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80057ee:	4413      	add	r3, r2
 80057f0:	4619      	mov	r1, r3
 80057f2:	6938      	ldr	r0, [r7, #16]
 80057f4:	f7ff fe96 	bl	8005524 <move_window>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d11d      	bne.n	800583a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	8992      	ldrh	r2, [r2, #12]
 800580c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005810:	fb00 f202 	mul.w	r2, r0, r2
 8005814:	1a9b      	subs	r3, r3, r2
 8005816:	440b      	add	r3, r1
 8005818:	4618      	mov	r0, r3
 800581a:	f7ff fbeb 	bl	8004ff4 <ld_dword>
 800581e:	4603      	mov	r3, r0
 8005820:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005824:	617b      	str	r3, [r7, #20]
			break;
 8005826:	e009      	b.n	800583c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005828:	2301      	movs	r3, #1
 800582a:	617b      	str	r3, [r7, #20]
 800582c:	e006      	b.n	800583c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800582e:	bf00      	nop
 8005830:	e004      	b.n	800583c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005832:	bf00      	nop
 8005834:	e002      	b.n	800583c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005836:	bf00      	nop
 8005838:	e000      	b.n	800583c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800583a:	bf00      	nop
		}
	}

	return val;
 800583c:	697b      	ldr	r3, [r7, #20]
}
 800583e:	4618      	mov	r0, r3
 8005840:	3718      	adds	r7, #24
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005846:	b590      	push	{r4, r7, lr}
 8005848:	b089      	sub	sp, #36	; 0x24
 800584a:	af00      	add	r7, sp, #0
 800584c:	60f8      	str	r0, [r7, #12]
 800584e:	60b9      	str	r1, [r7, #8]
 8005850:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005852:	2302      	movs	r3, #2
 8005854:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	2b01      	cmp	r3, #1
 800585a:	f240 8102 	bls.w	8005a62 <put_fat+0x21c>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	69db      	ldr	r3, [r3, #28]
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	429a      	cmp	r2, r3
 8005866:	f080 80fc 	bcs.w	8005a62 <put_fat+0x21c>
		switch (fs->fs_type) {
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	2b03      	cmp	r3, #3
 8005870:	f000 80b6 	beq.w	80059e0 <put_fat+0x19a>
 8005874:	2b03      	cmp	r3, #3
 8005876:	f300 80fd 	bgt.w	8005a74 <put_fat+0x22e>
 800587a:	2b01      	cmp	r3, #1
 800587c:	d003      	beq.n	8005886 <put_fat+0x40>
 800587e:	2b02      	cmp	r3, #2
 8005880:	f000 8083 	beq.w	800598a <put_fat+0x144>
 8005884:	e0f6      	b.n	8005a74 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	61bb      	str	r3, [r7, #24]
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	085b      	lsrs	r3, r3, #1
 800588e:	69ba      	ldr	r2, [r7, #24]
 8005890:	4413      	add	r3, r2
 8005892:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	899b      	ldrh	r3, [r3, #12]
 800589c:	4619      	mov	r1, r3
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80058a4:	4413      	add	r3, r2
 80058a6:	4619      	mov	r1, r3
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f7ff fe3b 	bl	8005524 <move_window>
 80058ae:	4603      	mov	r3, r0
 80058b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80058b2:	7ffb      	ldrb	r3, [r7, #31]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f040 80d6 	bne.w	8005a66 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	1c5a      	adds	r2, r3, #1
 80058c4:	61ba      	str	r2, [r7, #24]
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	8992      	ldrh	r2, [r2, #12]
 80058ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80058ce:	fb00 f202 	mul.w	r2, r0, r2
 80058d2:	1a9b      	subs	r3, r3, r2
 80058d4:	440b      	add	r3, r1
 80058d6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00d      	beq.n	80058fe <put_fat+0xb8>
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	b25b      	sxtb	r3, r3
 80058e8:	f003 030f 	and.w	r3, r3, #15
 80058ec:	b25a      	sxtb	r2, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	011b      	lsls	r3, r3, #4
 80058f4:	b25b      	sxtb	r3, r3
 80058f6:	4313      	orrs	r3, r2
 80058f8:	b25b      	sxtb	r3, r3
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	e001      	b.n	8005902 <put_fat+0xbc>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	b2db      	uxtb	r3, r3
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2201      	movs	r2, #1
 800590a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	899b      	ldrh	r3, [r3, #12]
 8005914:	4619      	mov	r1, r3
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	fbb3 f3f1 	udiv	r3, r3, r1
 800591c:	4413      	add	r3, r2
 800591e:	4619      	mov	r1, r3
 8005920:	68f8      	ldr	r0, [r7, #12]
 8005922:	f7ff fdff 	bl	8005524 <move_window>
 8005926:	4603      	mov	r3, r0
 8005928:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800592a:	7ffb      	ldrb	r3, [r7, #31]
 800592c:	2b00      	cmp	r3, #0
 800592e:	f040 809c 	bne.w	8005a6a <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	899b      	ldrh	r3, [r3, #12]
 800593c:	461a      	mov	r2, r3
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	fbb3 f0f2 	udiv	r0, r3, r2
 8005944:	fb00 f202 	mul.w	r2, r0, r2
 8005948:	1a9b      	subs	r3, r3, r2
 800594a:	440b      	add	r3, r1
 800594c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	f003 0301 	and.w	r3, r3, #1
 8005954:	2b00      	cmp	r3, #0
 8005956:	d003      	beq.n	8005960 <put_fat+0x11a>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	091b      	lsrs	r3, r3, #4
 800595c:	b2db      	uxtb	r3, r3
 800595e:	e00e      	b.n	800597e <put_fat+0x138>
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	b25b      	sxtb	r3, r3
 8005966:	f023 030f 	bic.w	r3, r3, #15
 800596a:	b25a      	sxtb	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	0a1b      	lsrs	r3, r3, #8
 8005970:	b25b      	sxtb	r3, r3
 8005972:	f003 030f 	and.w	r3, r3, #15
 8005976:	b25b      	sxtb	r3, r3
 8005978:	4313      	orrs	r3, r2
 800597a:	b25b      	sxtb	r3, r3
 800597c:	b2db      	uxtb	r3, r3
 800597e:	697a      	ldr	r2, [r7, #20]
 8005980:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2201      	movs	r2, #1
 8005986:	70da      	strb	r2, [r3, #3]
			break;
 8005988:	e074      	b.n	8005a74 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	899b      	ldrh	r3, [r3, #12]
 8005992:	085b      	lsrs	r3, r3, #1
 8005994:	b29b      	uxth	r3, r3
 8005996:	4619      	mov	r1, r3
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	fbb3 f3f1 	udiv	r3, r3, r1
 800599e:	4413      	add	r3, r2
 80059a0:	4619      	mov	r1, r3
 80059a2:	68f8      	ldr	r0, [r7, #12]
 80059a4:	f7ff fdbe 	bl	8005524 <move_window>
 80059a8:	4603      	mov	r3, r0
 80059aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80059ac:	7ffb      	ldrb	r3, [r7, #31]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d15d      	bne.n	8005a6e <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	005b      	lsls	r3, r3, #1
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	8992      	ldrh	r2, [r2, #12]
 80059c0:	fbb3 f0f2 	udiv	r0, r3, r2
 80059c4:	fb00 f202 	mul.w	r2, r0, r2
 80059c8:	1a9b      	subs	r3, r3, r2
 80059ca:	440b      	add	r3, r1
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	b292      	uxth	r2, r2
 80059d0:	4611      	mov	r1, r2
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7ff fb31 	bl	800503a <st_word>
			fs->wflag = 1;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2201      	movs	r2, #1
 80059dc:	70da      	strb	r2, [r3, #3]
			break;
 80059de:	e049      	b.n	8005a74 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	899b      	ldrh	r3, [r3, #12]
 80059e8:	089b      	lsrs	r3, r3, #2
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	4619      	mov	r1, r3
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80059f4:	4413      	add	r3, r2
 80059f6:	4619      	mov	r1, r3
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f7ff fd93 	bl	8005524 <move_window>
 80059fe:	4603      	mov	r3, r0
 8005a00:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005a02:	7ffb      	ldrb	r3, [r7, #31]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d134      	bne.n	8005a72 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	8992      	ldrh	r2, [r2, #12]
 8005a1c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005a20:	fb00 f202 	mul.w	r2, r0, r2
 8005a24:	1a9b      	subs	r3, r3, r2
 8005a26:	440b      	add	r3, r1
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7ff fae3 	bl	8004ff4 <ld_dword>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005a34:	4323      	orrs	r3, r4
 8005a36:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	8992      	ldrh	r2, [r2, #12]
 8005a46:	fbb3 f0f2 	udiv	r0, r3, r2
 8005a4a:	fb00 f202 	mul.w	r2, r0, r2
 8005a4e:	1a9b      	subs	r3, r3, r2
 8005a50:	440b      	add	r3, r1
 8005a52:	6879      	ldr	r1, [r7, #4]
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7ff fb0b 	bl	8005070 <st_dword>
			fs->wflag = 1;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	70da      	strb	r2, [r3, #3]
			break;
 8005a60:	e008      	b.n	8005a74 <put_fat+0x22e>
		}
	}
 8005a62:	bf00      	nop
 8005a64:	e006      	b.n	8005a74 <put_fat+0x22e>
			if (res != FR_OK) break;
 8005a66:	bf00      	nop
 8005a68:	e004      	b.n	8005a74 <put_fat+0x22e>
			if (res != FR_OK) break;
 8005a6a:	bf00      	nop
 8005a6c:	e002      	b.n	8005a74 <put_fat+0x22e>
			if (res != FR_OK) break;
 8005a6e:	bf00      	nop
 8005a70:	e000      	b.n	8005a74 <put_fat+0x22e>
			if (res != FR_OK) break;
 8005a72:	bf00      	nop
	return res;
 8005a74:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3724      	adds	r7, #36	; 0x24
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd90      	pop	{r4, r7, pc}

08005a7e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b088      	sub	sp, #32
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	60f8      	str	r0, [r7, #12]
 8005a86:	60b9      	str	r1, [r7, #8]
 8005a88:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d904      	bls.n	8005aa4 <remove_chain+0x26>
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	69db      	ldr	r3, [r3, #28]
 8005a9e:	68ba      	ldr	r2, [r7, #8]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d301      	bcc.n	8005aa8 <remove_chain+0x2a>
 8005aa4:	2302      	movs	r3, #2
 8005aa6:	e04b      	b.n	8005b40 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00c      	beq.n	8005ac8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005aae:	f04f 32ff 	mov.w	r2, #4294967295
 8005ab2:	6879      	ldr	r1, [r7, #4]
 8005ab4:	69b8      	ldr	r0, [r7, #24]
 8005ab6:	f7ff fec6 	bl	8005846 <put_fat>
 8005aba:	4603      	mov	r3, r0
 8005abc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005abe:	7ffb      	ldrb	r3, [r7, #31]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <remove_chain+0x4a>
 8005ac4:	7ffb      	ldrb	r3, [r7, #31]
 8005ac6:	e03b      	b.n	8005b40 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005ac8:	68b9      	ldr	r1, [r7, #8]
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f7ff fde7 	bl	800569e <get_fat>
 8005ad0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d031      	beq.n	8005b3c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d101      	bne.n	8005ae2 <remove_chain+0x64>
 8005ade:	2302      	movs	r3, #2
 8005ae0:	e02e      	b.n	8005b40 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae8:	d101      	bne.n	8005aee <remove_chain+0x70>
 8005aea:	2301      	movs	r3, #1
 8005aec:	e028      	b.n	8005b40 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005aee:	2200      	movs	r2, #0
 8005af0:	68b9      	ldr	r1, [r7, #8]
 8005af2:	69b8      	ldr	r0, [r7, #24]
 8005af4:	f7ff fea7 	bl	8005846 <put_fat>
 8005af8:	4603      	mov	r3, r0
 8005afa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005afc:	7ffb      	ldrb	r3, [r7, #31]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d001      	beq.n	8005b06 <remove_chain+0x88>
 8005b02:	7ffb      	ldrb	r3, [r7, #31]
 8005b04:	e01c      	b.n	8005b40 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	699a      	ldr	r2, [r3, #24]
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	3b02      	subs	r3, #2
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d20b      	bcs.n	8005b2c <remove_chain+0xae>
			fs->free_clst++;
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	699b      	ldr	r3, [r3, #24]
 8005b18:	1c5a      	adds	r2, r3, #1
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	791b      	ldrb	r3, [r3, #4]
 8005b22:	f043 0301 	orr.w	r3, r3, #1
 8005b26:	b2da      	uxtb	r2, r3
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	69db      	ldr	r3, [r3, #28]
 8005b34:	68ba      	ldr	r2, [r7, #8]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d3c6      	bcc.n	8005ac8 <remove_chain+0x4a>
 8005b3a:	e000      	b.n	8005b3e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005b3c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3720      	adds	r7, #32
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b088      	sub	sp, #32
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d10d      	bne.n	8005b7a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d004      	beq.n	8005b74 <create_chain+0x2c>
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	69db      	ldr	r3, [r3, #28]
 8005b6e:	69ba      	ldr	r2, [r7, #24]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d31b      	bcc.n	8005bac <create_chain+0x64>
 8005b74:	2301      	movs	r3, #1
 8005b76:	61bb      	str	r3, [r7, #24]
 8005b78:	e018      	b.n	8005bac <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005b7a:	6839      	ldr	r1, [r7, #0]
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f7ff fd8e 	bl	800569e <get_fat>
 8005b82:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d801      	bhi.n	8005b8e <create_chain+0x46>
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e070      	b.n	8005c70 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b94:	d101      	bne.n	8005b9a <create_chain+0x52>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	e06a      	b.n	8005c70 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	69db      	ldr	r3, [r3, #28]
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d201      	bcs.n	8005ba8 <create_chain+0x60>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	e063      	b.n	8005c70 <create_chain+0x128>
		scl = clst;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	69db      	ldr	r3, [r3, #28]
 8005bba:	69fa      	ldr	r2, [r7, #28]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d307      	bcc.n	8005bd0 <create_chain+0x88>
				ncl = 2;
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005bc4:	69fa      	ldr	r2, [r7, #28]
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d901      	bls.n	8005bd0 <create_chain+0x88>
 8005bcc:	2300      	movs	r3, #0
 8005bce:	e04f      	b.n	8005c70 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005bd0:	69f9      	ldr	r1, [r7, #28]
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f7ff fd63 	bl	800569e <get_fat>
 8005bd8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00e      	beq.n	8005bfe <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d003      	beq.n	8005bee <create_chain+0xa6>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bec:	d101      	bne.n	8005bf2 <create_chain+0xaa>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	e03e      	b.n	8005c70 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005bf2:	69fa      	ldr	r2, [r7, #28]
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d1da      	bne.n	8005bb0 <create_chain+0x68>
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	e038      	b.n	8005c70 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005bfe:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005c00:	f04f 32ff 	mov.w	r2, #4294967295
 8005c04:	69f9      	ldr	r1, [r7, #28]
 8005c06:	6938      	ldr	r0, [r7, #16]
 8005c08:	f7ff fe1d 	bl	8005846 <put_fat>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005c10:	7dfb      	ldrb	r3, [r7, #23]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d109      	bne.n	8005c2a <create_chain+0xe2>
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d006      	beq.n	8005c2a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005c1c:	69fa      	ldr	r2, [r7, #28]
 8005c1e:	6839      	ldr	r1, [r7, #0]
 8005c20:	6938      	ldr	r0, [r7, #16]
 8005c22:	f7ff fe10 	bl	8005846 <put_fat>
 8005c26:	4603      	mov	r3, r0
 8005c28:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005c2a:	7dfb      	ldrb	r3, [r7, #23]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d116      	bne.n	8005c5e <create_chain+0x116>
		fs->last_clst = ncl;
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	69fa      	ldr	r2, [r7, #28]
 8005c34:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	699a      	ldr	r2, [r3, #24]
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	69db      	ldr	r3, [r3, #28]
 8005c3e:	3b02      	subs	r3, #2
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d804      	bhi.n	8005c4e <create_chain+0x106>
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	1e5a      	subs	r2, r3, #1
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	791b      	ldrb	r3, [r3, #4]
 8005c52:	f043 0301 	orr.w	r3, r3, #1
 8005c56:	b2da      	uxtb	r2, r3
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	711a      	strb	r2, [r3, #4]
 8005c5c:	e007      	b.n	8005c6e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005c5e:	7dfb      	ldrb	r3, [r7, #23]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d102      	bne.n	8005c6a <create_chain+0x122>
 8005c64:	f04f 33ff 	mov.w	r3, #4294967295
 8005c68:	e000      	b.n	8005c6c <create_chain+0x124>
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005c6e:	69fb      	ldr	r3, [r7, #28]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3720      	adds	r7, #32
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b087      	sub	sp, #28
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8c:	3304      	adds	r3, #4
 8005c8e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	899b      	ldrh	r3, [r3, #12]
 8005c94:	461a      	mov	r2, r3
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	8952      	ldrh	r2, [r2, #10]
 8005ca0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ca4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	1d1a      	adds	r2, r3, #4
 8005caa:	613a      	str	r2, [r7, #16]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d101      	bne.n	8005cba <clmt_clust+0x42>
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	e010      	b.n	8005cdc <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d307      	bcc.n	8005cd2 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8005cc2:	697a      	ldr	r2, [r7, #20]
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	617b      	str	r3, [r7, #20]
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	3304      	adds	r3, #4
 8005cce:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005cd0:	e7e9      	b.n	8005ca6 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8005cd2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	4413      	add	r3, r2
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	371c      	adds	r7, #28
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b086      	sub	sp, #24
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cfe:	d204      	bcs.n	8005d0a <dir_sdi+0x22>
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	f003 031f 	and.w	r3, r3, #31
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d001      	beq.n	8005d0e <dir_sdi+0x26>
		return FR_INT_ERR;
 8005d0a:	2302      	movs	r3, #2
 8005d0c:	e071      	b.n	8005df2 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	683a      	ldr	r2, [r7, #0]
 8005d12:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d106      	bne.n	8005d2e <dir_sdi+0x46>
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d902      	bls.n	8005d2e <dir_sdi+0x46>
		clst = fs->dirbase;
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d10c      	bne.n	8005d4e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	095b      	lsrs	r3, r3, #5
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	8912      	ldrh	r2, [r2, #8]
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d301      	bcc.n	8005d44 <dir_sdi+0x5c>
 8005d40:	2302      	movs	r3, #2
 8005d42:	e056      	b.n	8005df2 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	61da      	str	r2, [r3, #28]
 8005d4c:	e02d      	b.n	8005daa <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	895b      	ldrh	r3, [r3, #10]
 8005d52:	461a      	mov	r2, r3
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	899b      	ldrh	r3, [r3, #12]
 8005d58:	fb02 f303 	mul.w	r3, r2, r3
 8005d5c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005d5e:	e019      	b.n	8005d94 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6979      	ldr	r1, [r7, #20]
 8005d64:	4618      	mov	r0, r3
 8005d66:	f7ff fc9a 	bl	800569e <get_fat>
 8005d6a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d72:	d101      	bne.n	8005d78 <dir_sdi+0x90>
 8005d74:	2301      	movs	r3, #1
 8005d76:	e03c      	b.n	8005df2 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d904      	bls.n	8005d88 <dir_sdi+0xa0>
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	69db      	ldr	r3, [r3, #28]
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d301      	bcc.n	8005d8c <dir_sdi+0xa4>
 8005d88:	2302      	movs	r3, #2
 8005d8a:	e032      	b.n	8005df2 <dir_sdi+0x10a>
			ofs -= csz;
 8005d8c:	683a      	ldr	r2, [r7, #0]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005d94:	683a      	ldr	r2, [r7, #0]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d2e1      	bcs.n	8005d60 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005d9c:	6979      	ldr	r1, [r7, #20]
 8005d9e:	6938      	ldr	r0, [r7, #16]
 8005da0:	f7ff fc5e 	bl	8005660 <clust2sect>
 8005da4:	4602      	mov	r2, r0
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	697a      	ldr	r2, [r7, #20]
 8005dae:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	69db      	ldr	r3, [r3, #28]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d101      	bne.n	8005dbc <dir_sdi+0xd4>
 8005db8:	2302      	movs	r3, #2
 8005dba:	e01a      	b.n	8005df2 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	69da      	ldr	r2, [r3, #28]
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	899b      	ldrh	r3, [r3, #12]
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	fbb3 f3f1 	udiv	r3, r3, r1
 8005dcc:	441a      	add	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	899b      	ldrh	r3, [r3, #12]
 8005ddc:	461a      	mov	r2, r3
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	fbb3 f0f2 	udiv	r0, r3, r2
 8005de4:	fb00 f202 	mul.w	r2, r0, r2
 8005de8:	1a9b      	subs	r3, r3, r2
 8005dea:	18ca      	adds	r2, r1, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005df0:	2300      	movs	r3, #0
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3718      	adds	r7, #24
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}

08005dfa <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b086      	sub	sp, #24
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
 8005e02:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	3320      	adds	r3, #32
 8005e10:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	69db      	ldr	r3, [r3, #28]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d003      	beq.n	8005e22 <dir_next+0x28>
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e20:	d301      	bcc.n	8005e26 <dir_next+0x2c>
 8005e22:	2304      	movs	r3, #4
 8005e24:	e0bb      	b.n	8005f9e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	899b      	ldrh	r3, [r3, #12]
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e32:	fb01 f202 	mul.w	r2, r1, r2
 8005e36:	1a9b      	subs	r3, r3, r2
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f040 809d 	bne.w	8005f78 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	69db      	ldr	r3, [r3, #28]
 8005e42:	1c5a      	adds	r2, r3, #1
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d10b      	bne.n	8005e68 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	095b      	lsrs	r3, r3, #5
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	8912      	ldrh	r2, [r2, #8]
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	f0c0 808d 	bcc.w	8005f78 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	61da      	str	r2, [r3, #28]
 8005e64:	2304      	movs	r3, #4
 8005e66:	e09a      	b.n	8005f9e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	899b      	ldrh	r3, [r3, #12]
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	8952      	ldrh	r2, [r2, #10]
 8005e78:	3a01      	subs	r2, #1
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d17b      	bne.n	8005f78 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	699b      	ldr	r3, [r3, #24]
 8005e86:	4619      	mov	r1, r3
 8005e88:	4610      	mov	r0, r2
 8005e8a:	f7ff fc08 	bl	800569e <get_fat>
 8005e8e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d801      	bhi.n	8005e9a <dir_next+0xa0>
 8005e96:	2302      	movs	r3, #2
 8005e98:	e081      	b.n	8005f9e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea0:	d101      	bne.n	8005ea6 <dir_next+0xac>
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e07b      	b.n	8005f9e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	69db      	ldr	r3, [r3, #28]
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d359      	bcc.n	8005f64 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d104      	bne.n	8005ec0 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	61da      	str	r2, [r3, #28]
 8005ebc:	2304      	movs	r3, #4
 8005ebe:	e06e      	b.n	8005f9e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	699b      	ldr	r3, [r3, #24]
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	4610      	mov	r0, r2
 8005eca:	f7ff fe3d 	bl	8005b48 <create_chain>
 8005ece:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d101      	bne.n	8005eda <dir_next+0xe0>
 8005ed6:	2307      	movs	r3, #7
 8005ed8:	e061      	b.n	8005f9e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d101      	bne.n	8005ee4 <dir_next+0xea>
 8005ee0:	2302      	movs	r3, #2
 8005ee2:	e05c      	b.n	8005f9e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eea:	d101      	bne.n	8005ef0 <dir_next+0xf6>
 8005eec:	2301      	movs	r3, #1
 8005eee:	e056      	b.n	8005f9e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005ef0:	68f8      	ldr	r0, [r7, #12]
 8005ef2:	f7ff fad3 	bl	800549c <sync_window>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d001      	beq.n	8005f00 <dir_next+0x106>
 8005efc:	2301      	movs	r3, #1
 8005efe:	e04e      	b.n	8005f9e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	899b      	ldrh	r3, [r3, #12]
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	2100      	movs	r1, #0
 8005f0e:	f7ff f8fc 	bl	800510a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005f12:	2300      	movs	r3, #0
 8005f14:	613b      	str	r3, [r7, #16]
 8005f16:	6979      	ldr	r1, [r7, #20]
 8005f18:	68f8      	ldr	r0, [r7, #12]
 8005f1a:	f7ff fba1 	bl	8005660 <clust2sect>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	635a      	str	r2, [r3, #52]	; 0x34
 8005f24:	e012      	b.n	8005f4c <dir_next+0x152>
						fs->wflag = 1;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005f2c:	68f8      	ldr	r0, [r7, #12]
 8005f2e:	f7ff fab5 	bl	800549c <sync_window>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d001      	beq.n	8005f3c <dir_next+0x142>
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e030      	b.n	8005f9e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	613b      	str	r3, [r7, #16]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f46:	1c5a      	adds	r2, r3, #1
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	635a      	str	r2, [r3, #52]	; 0x34
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	895b      	ldrh	r3, [r3, #10]
 8005f50:	461a      	mov	r2, r3
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d3e6      	bcc.n	8005f26 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	1ad2      	subs	r2, r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005f6a:	6979      	ldr	r1, [r7, #20]
 8005f6c:	68f8      	ldr	r0, [r7, #12]
 8005f6e:	f7ff fb77 	bl	8005660 <clust2sect>
 8005f72:	4602      	mov	r2, r0
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	899b      	ldrh	r3, [r3, #12]
 8005f88:	461a      	mov	r2, r3
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005f90:	fb00 f202 	mul.w	r2, r0, r2
 8005f94:	1a9b      	subs	r3, r3, r2
 8005f96:	18ca      	adds	r2, r1, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3718      	adds	r7, #24
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b086      	sub	sp, #24
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
 8005fae:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005fb6:	2100      	movs	r1, #0
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f7ff fe95 	bl	8005ce8 <dir_sdi>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005fc2:	7dfb      	ldrb	r3, [r7, #23]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d12b      	bne.n	8006020 <dir_alloc+0x7a>
		n = 0;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	69db      	ldr	r3, [r3, #28]
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f7ff faa6 	bl	8005524 <move_window>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005fdc:	7dfb      	ldrb	r3, [r7, #23]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d11d      	bne.n	800601e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a1b      	ldr	r3, [r3, #32]
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	2be5      	cmp	r3, #229	; 0xe5
 8005fea:	d004      	beq.n	8005ff6 <dir_alloc+0x50>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a1b      	ldr	r3, [r3, #32]
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d107      	bne.n	8006006 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	613b      	str	r3, [r7, #16]
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	429a      	cmp	r2, r3
 8006002:	d102      	bne.n	800600a <dir_alloc+0x64>
 8006004:	e00c      	b.n	8006020 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006006:	2300      	movs	r3, #0
 8006008:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800600a:	2101      	movs	r1, #1
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f7ff fef4 	bl	8005dfa <dir_next>
 8006012:	4603      	mov	r3, r0
 8006014:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006016:	7dfb      	ldrb	r3, [r7, #23]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d0d7      	beq.n	8005fcc <dir_alloc+0x26>
 800601c:	e000      	b.n	8006020 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800601e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006020:	7dfb      	ldrb	r3, [r7, #23]
 8006022:	2b04      	cmp	r3, #4
 8006024:	d101      	bne.n	800602a <dir_alloc+0x84>
 8006026:	2307      	movs	r3, #7
 8006028:	75fb      	strb	r3, [r7, #23]
	return res;
 800602a:	7dfb      	ldrb	r3, [r7, #23]
}
 800602c:	4618      	mov	r0, r3
 800602e:	3718      	adds	r7, #24
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	331a      	adds	r3, #26
 8006042:	4618      	mov	r0, r3
 8006044:	f7fe ffbe 	bl	8004fc4 <ld_word>
 8006048:	4603      	mov	r3, r0
 800604a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	2b03      	cmp	r3, #3
 8006052:	d109      	bne.n	8006068 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	3314      	adds	r3, #20
 8006058:	4618      	mov	r0, r3
 800605a:	f7fe ffb3 	bl	8004fc4 <ld_word>
 800605e:	4603      	mov	r3, r0
 8006060:	041b      	lsls	r3, r3, #16
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	4313      	orrs	r3, r2
 8006066:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006068:	68fb      	ldr	r3, [r7, #12]
}
 800606a:	4618      	mov	r0, r3
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b084      	sub	sp, #16
 8006076:	af00      	add	r7, sp, #0
 8006078:	60f8      	str	r0, [r7, #12]
 800607a:	60b9      	str	r1, [r7, #8]
 800607c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	331a      	adds	r3, #26
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	b292      	uxth	r2, r2
 8006086:	4611      	mov	r1, r2
 8006088:	4618      	mov	r0, r3
 800608a:	f7fe ffd6 	bl	800503a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	2b03      	cmp	r3, #3
 8006094:	d109      	bne.n	80060aa <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	f103 0214 	add.w	r2, r3, #20
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	0c1b      	lsrs	r3, r3, #16
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	4619      	mov	r1, r3
 80060a4:	4610      	mov	r0, r2
 80060a6:	f7fe ffc8 	bl	800503a <st_word>
	}
}
 80060aa:	bf00      	nop
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
	...

080060b4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80060b4:	b590      	push	{r4, r7, lr}
 80060b6:	b087      	sub	sp, #28
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	331a      	adds	r3, #26
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7fe ff7e 	bl	8004fc4 <ld_word>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d001      	beq.n	80060d2 <cmp_lfn+0x1e>
 80060ce:	2300      	movs	r3, #0
 80060d0:	e059      	b.n	8006186 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060da:	1e5a      	subs	r2, r3, #1
 80060dc:	4613      	mov	r3, r2
 80060de:	005b      	lsls	r3, r3, #1
 80060e0:	4413      	add	r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4413      	add	r3, r2
 80060e6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80060e8:	2301      	movs	r3, #1
 80060ea:	81fb      	strh	r3, [r7, #14]
 80060ec:	2300      	movs	r3, #0
 80060ee:	613b      	str	r3, [r7, #16]
 80060f0:	e033      	b.n	800615a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80060f2:	4a27      	ldr	r2, [pc, #156]	; (8006190 <cmp_lfn+0xdc>)
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	4413      	add	r3, r2
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	461a      	mov	r2, r3
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	4413      	add	r3, r2
 8006100:	4618      	mov	r0, r3
 8006102:	f7fe ff5f 	bl	8004fc4 <ld_word>
 8006106:	4603      	mov	r3, r0
 8006108:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800610a:	89fb      	ldrh	r3, [r7, #14]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d01a      	beq.n	8006146 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	2bfe      	cmp	r3, #254	; 0xfe
 8006114:	d812      	bhi.n	800613c <cmp_lfn+0x88>
 8006116:	89bb      	ldrh	r3, [r7, #12]
 8006118:	4618      	mov	r0, r3
 800611a:	f001 fd41 	bl	8007ba0 <ff_wtoupper>
 800611e:	4603      	mov	r3, r0
 8006120:	461c      	mov	r4, r3
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	1c5a      	adds	r2, r3, #1
 8006126:	617a      	str	r2, [r7, #20]
 8006128:	005b      	lsls	r3, r3, #1
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	4413      	add	r3, r2
 800612e:	881b      	ldrh	r3, [r3, #0]
 8006130:	4618      	mov	r0, r3
 8006132:	f001 fd35 	bl	8007ba0 <ff_wtoupper>
 8006136:	4603      	mov	r3, r0
 8006138:	429c      	cmp	r4, r3
 800613a:	d001      	beq.n	8006140 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800613c:	2300      	movs	r3, #0
 800613e:	e022      	b.n	8006186 <cmp_lfn+0xd2>
			}
			wc = uc;
 8006140:	89bb      	ldrh	r3, [r7, #12]
 8006142:	81fb      	strh	r3, [r7, #14]
 8006144:	e006      	b.n	8006154 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006146:	89bb      	ldrh	r3, [r7, #12]
 8006148:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800614c:	4293      	cmp	r3, r2
 800614e:	d001      	beq.n	8006154 <cmp_lfn+0xa0>
 8006150:	2300      	movs	r3, #0
 8006152:	e018      	b.n	8006186 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	3301      	adds	r3, #1
 8006158:	613b      	str	r3, [r7, #16]
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	2b0c      	cmp	r3, #12
 800615e:	d9c8      	bls.n	80060f2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00b      	beq.n	8006184 <cmp_lfn+0xd0>
 800616c:	89fb      	ldrh	r3, [r7, #14]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d008      	beq.n	8006184 <cmp_lfn+0xd0>
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	005b      	lsls	r3, r3, #1
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	4413      	add	r3, r2
 800617a:	881b      	ldrh	r3, [r3, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d001      	beq.n	8006184 <cmp_lfn+0xd0>
 8006180:	2300      	movs	r3, #0
 8006182:	e000      	b.n	8006186 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006184:	2301      	movs	r3, #1
}
 8006186:	4618      	mov	r0, r3
 8006188:	371c      	adds	r7, #28
 800618a:	46bd      	mov	sp, r7
 800618c:	bd90      	pop	{r4, r7, pc}
 800618e:	bf00      	nop
 8006190:	08009234 	.word	0x08009234

08006194 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b088      	sub	sp, #32
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	4611      	mov	r1, r2
 80061a0:	461a      	mov	r2, r3
 80061a2:	460b      	mov	r3, r1
 80061a4:	71fb      	strb	r3, [r7, #7]
 80061a6:	4613      	mov	r3, r2
 80061a8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	330d      	adds	r3, #13
 80061ae:	79ba      	ldrb	r2, [r7, #6]
 80061b0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	330b      	adds	r3, #11
 80061b6:	220f      	movs	r2, #15
 80061b8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	330c      	adds	r3, #12
 80061be:	2200      	movs	r2, #0
 80061c0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	331a      	adds	r3, #26
 80061c6:	2100      	movs	r1, #0
 80061c8:	4618      	mov	r0, r3
 80061ca:	f7fe ff36 	bl	800503a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80061ce:	79fb      	ldrb	r3, [r7, #7]
 80061d0:	1e5a      	subs	r2, r3, #1
 80061d2:	4613      	mov	r3, r2
 80061d4:	005b      	lsls	r3, r3, #1
 80061d6:	4413      	add	r3, r2
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	4413      	add	r3, r2
 80061dc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80061de:	2300      	movs	r3, #0
 80061e0:	82fb      	strh	r3, [r7, #22]
 80061e2:	2300      	movs	r3, #0
 80061e4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80061e6:	8afb      	ldrh	r3, [r7, #22]
 80061e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d007      	beq.n	8006200 <put_lfn+0x6c>
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	1c5a      	adds	r2, r3, #1
 80061f4:	61fa      	str	r2, [r7, #28]
 80061f6:	005b      	lsls	r3, r3, #1
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	4413      	add	r3, r2
 80061fc:	881b      	ldrh	r3, [r3, #0]
 80061fe:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006200:	4a17      	ldr	r2, [pc, #92]	; (8006260 <put_lfn+0xcc>)
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	4413      	add	r3, r2
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	461a      	mov	r2, r3
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	4413      	add	r3, r2
 800620e:	8afa      	ldrh	r2, [r7, #22]
 8006210:	4611      	mov	r1, r2
 8006212:	4618      	mov	r0, r3
 8006214:	f7fe ff11 	bl	800503a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006218:	8afb      	ldrh	r3, [r7, #22]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d102      	bne.n	8006224 <put_lfn+0x90>
 800621e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006222:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	3301      	adds	r3, #1
 8006228:	61bb      	str	r3, [r7, #24]
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	2b0c      	cmp	r3, #12
 800622e:	d9da      	bls.n	80061e6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006230:	8afb      	ldrh	r3, [r7, #22]
 8006232:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006236:	4293      	cmp	r3, r2
 8006238:	d006      	beq.n	8006248 <put_lfn+0xb4>
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	005b      	lsls	r3, r3, #1
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	4413      	add	r3, r2
 8006242:	881b      	ldrh	r3, [r3, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d103      	bne.n	8006250 <put_lfn+0xbc>
 8006248:	79fb      	ldrb	r3, [r7, #7]
 800624a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800624e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	79fa      	ldrb	r2, [r7, #7]
 8006254:	701a      	strb	r2, [r3, #0]
}
 8006256:	bf00      	nop
 8006258:	3720      	adds	r7, #32
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	08009234 	.word	0x08009234

08006264 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b08c      	sub	sp, #48	; 0x30
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
 8006270:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006272:	220b      	movs	r2, #11
 8006274:	68b9      	ldr	r1, [r7, #8]
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f7fe ff26 	bl	80050c8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	2b05      	cmp	r3, #5
 8006280:	d92b      	bls.n	80062da <gen_numname+0x76>
		sr = seq;
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006286:	e022      	b.n	80062ce <gen_numname+0x6a>
			wc = *lfn++;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	1c9a      	adds	r2, r3, #2
 800628c:	607a      	str	r2, [r7, #4]
 800628e:	881b      	ldrh	r3, [r3, #0]
 8006290:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8006292:	2300      	movs	r3, #0
 8006294:	62bb      	str	r3, [r7, #40]	; 0x28
 8006296:	e017      	b.n	80062c8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	005a      	lsls	r2, r3, #1
 800629c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800629e:	f003 0301 	and.w	r3, r3, #1
 80062a2:	4413      	add	r3, r2
 80062a4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80062a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80062a8:	085b      	lsrs	r3, r3, #1
 80062aa:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d005      	beq.n	80062c2 <gen_numname+0x5e>
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80062bc:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80062c0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80062c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c4:	3301      	adds	r3, #1
 80062c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80062c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ca:	2b0f      	cmp	r3, #15
 80062cc:	d9e4      	bls.n	8006298 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	881b      	ldrh	r3, [r3, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d1d8      	bne.n	8006288 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80062da:	2307      	movs	r3, #7
 80062dc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	f003 030f 	and.w	r3, r3, #15
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	3330      	adds	r3, #48	; 0x30
 80062ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80062ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80062f2:	2b39      	cmp	r3, #57	; 0x39
 80062f4:	d904      	bls.n	8006300 <gen_numname+0x9c>
 80062f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80062fa:	3307      	adds	r3, #7
 80062fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006302:	1e5a      	subs	r2, r3, #1
 8006304:	62ba      	str	r2, [r7, #40]	; 0x28
 8006306:	3330      	adds	r3, #48	; 0x30
 8006308:	443b      	add	r3, r7
 800630a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800630e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	091b      	lsrs	r3, r3, #4
 8006316:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1df      	bne.n	80062de <gen_numname+0x7a>
	ns[i] = '~';
 800631e:	f107 0214 	add.w	r2, r7, #20
 8006322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006324:	4413      	add	r3, r2
 8006326:	227e      	movs	r2, #126	; 0x7e
 8006328:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800632a:	2300      	movs	r3, #0
 800632c:	627b      	str	r3, [r7, #36]	; 0x24
 800632e:	e002      	b.n	8006336 <gen_numname+0xd2>
 8006330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006332:	3301      	adds	r3, #1
 8006334:	627b      	str	r3, [r7, #36]	; 0x24
 8006336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633a:	429a      	cmp	r2, r3
 800633c:	d205      	bcs.n	800634a <gen_numname+0xe6>
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006342:	4413      	add	r3, r2
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	2b20      	cmp	r3, #32
 8006348:	d1f2      	bne.n	8006330 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800634a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634c:	2b07      	cmp	r3, #7
 800634e:	d807      	bhi.n	8006360 <gen_numname+0xfc>
 8006350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006352:	1c5a      	adds	r2, r3, #1
 8006354:	62ba      	str	r2, [r7, #40]	; 0x28
 8006356:	3330      	adds	r3, #48	; 0x30
 8006358:	443b      	add	r3, r7
 800635a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800635e:	e000      	b.n	8006362 <gen_numname+0xfe>
 8006360:	2120      	movs	r1, #32
 8006362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006364:	1c5a      	adds	r2, r3, #1
 8006366:	627a      	str	r2, [r7, #36]	; 0x24
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	4413      	add	r3, r2
 800636c:	460a      	mov	r2, r1
 800636e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006372:	2b07      	cmp	r3, #7
 8006374:	d9e9      	bls.n	800634a <gen_numname+0xe6>
}
 8006376:	bf00      	nop
 8006378:	bf00      	nop
 800637a:	3730      	adds	r7, #48	; 0x30
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006388:	2300      	movs	r3, #0
 800638a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800638c:	230b      	movs	r3, #11
 800638e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006390:	7bfb      	ldrb	r3, [r7, #15]
 8006392:	b2da      	uxtb	r2, r3
 8006394:	0852      	lsrs	r2, r2, #1
 8006396:	01db      	lsls	r3, r3, #7
 8006398:	4313      	orrs	r3, r2
 800639a:	b2da      	uxtb	r2, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	1c59      	adds	r1, r3, #1
 80063a0:	6079      	str	r1, [r7, #4]
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	4413      	add	r3, r2
 80063a6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	3b01      	subs	r3, #1
 80063ac:	60bb      	str	r3, [r7, #8]
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1ed      	bne.n	8006390 <sum_sfn+0x10>
	return sum;
 80063b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3714      	adds	r7, #20
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr

080063c2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b086      	sub	sp, #24
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80063d0:	2100      	movs	r1, #0
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f7ff fc88 	bl	8005ce8 <dir_sdi>
 80063d8:	4603      	mov	r3, r0
 80063da:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80063dc:	7dfb      	ldrb	r3, [r7, #23]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d001      	beq.n	80063e6 <dir_find+0x24>
 80063e2:	7dfb      	ldrb	r3, [r7, #23]
 80063e4:	e0a9      	b.n	800653a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80063e6:	23ff      	movs	r3, #255	; 0xff
 80063e8:	753b      	strb	r3, [r7, #20]
 80063ea:	7d3b      	ldrb	r3, [r7, #20]
 80063ec:	757b      	strb	r3, [r7, #21]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f04f 32ff 	mov.w	r2, #4294967295
 80063f4:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	69db      	ldr	r3, [r3, #28]
 80063fa:	4619      	mov	r1, r3
 80063fc:	6938      	ldr	r0, [r7, #16]
 80063fe:	f7ff f891 	bl	8005524 <move_window>
 8006402:	4603      	mov	r3, r0
 8006404:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006406:	7dfb      	ldrb	r3, [r7, #23]
 8006408:	2b00      	cmp	r3, #0
 800640a:	f040 8090 	bne.w	800652e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a1b      	ldr	r3, [r3, #32]
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006416:	7dbb      	ldrb	r3, [r7, #22]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d102      	bne.n	8006422 <dir_find+0x60>
 800641c:	2304      	movs	r3, #4
 800641e:	75fb      	strb	r3, [r7, #23]
 8006420:	e08a      	b.n	8006538 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6a1b      	ldr	r3, [r3, #32]
 8006426:	330b      	adds	r3, #11
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800642e:	73fb      	strb	r3, [r7, #15]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	7bfa      	ldrb	r2, [r7, #15]
 8006434:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006436:	7dbb      	ldrb	r3, [r7, #22]
 8006438:	2be5      	cmp	r3, #229	; 0xe5
 800643a:	d007      	beq.n	800644c <dir_find+0x8a>
 800643c:	7bfb      	ldrb	r3, [r7, #15]
 800643e:	f003 0308 	and.w	r3, r3, #8
 8006442:	2b00      	cmp	r3, #0
 8006444:	d009      	beq.n	800645a <dir_find+0x98>
 8006446:	7bfb      	ldrb	r3, [r7, #15]
 8006448:	2b0f      	cmp	r3, #15
 800644a:	d006      	beq.n	800645a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800644c:	23ff      	movs	r3, #255	; 0xff
 800644e:	757b      	strb	r3, [r7, #21]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f04f 32ff 	mov.w	r2, #4294967295
 8006456:	631a      	str	r2, [r3, #48]	; 0x30
 8006458:	e05e      	b.n	8006518 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800645a:	7bfb      	ldrb	r3, [r7, #15]
 800645c:	2b0f      	cmp	r3, #15
 800645e:	d136      	bne.n	80064ce <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800646a:	2b00      	cmp	r3, #0
 800646c:	d154      	bne.n	8006518 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800646e:	7dbb      	ldrb	r3, [r7, #22]
 8006470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006474:	2b00      	cmp	r3, #0
 8006476:	d00d      	beq.n	8006494 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6a1b      	ldr	r3, [r3, #32]
 800647c:	7b5b      	ldrb	r3, [r3, #13]
 800647e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006480:	7dbb      	ldrb	r3, [r7, #22]
 8006482:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006486:	75bb      	strb	r3, [r7, #22]
 8006488:	7dbb      	ldrb	r3, [r7, #22]
 800648a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	695a      	ldr	r2, [r3, #20]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006494:	7dba      	ldrb	r2, [r7, #22]
 8006496:	7d7b      	ldrb	r3, [r7, #21]
 8006498:	429a      	cmp	r2, r3
 800649a:	d115      	bne.n	80064c8 <dir_find+0x106>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a1b      	ldr	r3, [r3, #32]
 80064a0:	330d      	adds	r3, #13
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	7d3a      	ldrb	r2, [r7, #20]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d10e      	bne.n	80064c8 <dir_find+0x106>
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	691a      	ldr	r2, [r3, #16]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	4619      	mov	r1, r3
 80064b4:	4610      	mov	r0, r2
 80064b6:	f7ff fdfd 	bl	80060b4 <cmp_lfn>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d003      	beq.n	80064c8 <dir_find+0x106>
 80064c0:	7d7b      	ldrb	r3, [r7, #21]
 80064c2:	3b01      	subs	r3, #1
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	e000      	b.n	80064ca <dir_find+0x108>
 80064c8:	23ff      	movs	r3, #255	; 0xff
 80064ca:	757b      	strb	r3, [r7, #21]
 80064cc:	e024      	b.n	8006518 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80064ce:	7d7b      	ldrb	r3, [r7, #21]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d109      	bne.n	80064e8 <dir_find+0x126>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6a1b      	ldr	r3, [r3, #32]
 80064d8:	4618      	mov	r0, r3
 80064da:	f7ff ff51 	bl	8006380 <sum_sfn>
 80064de:	4603      	mov	r3, r0
 80064e0:	461a      	mov	r2, r3
 80064e2:	7d3b      	ldrb	r3, [r7, #20]
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d024      	beq.n	8006532 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80064ee:	f003 0301 	and.w	r3, r3, #1
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10a      	bne.n	800650c <dir_find+0x14a>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a18      	ldr	r0, [r3, #32]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	3324      	adds	r3, #36	; 0x24
 80064fe:	220b      	movs	r2, #11
 8006500:	4619      	mov	r1, r3
 8006502:	f7fe fe1d 	bl	8005140 <mem_cmp>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d014      	beq.n	8006536 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800650c:	23ff      	movs	r3, #255	; 0xff
 800650e:	757b      	strb	r3, [r7, #21]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f04f 32ff 	mov.w	r2, #4294967295
 8006516:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006518:	2100      	movs	r1, #0
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f7ff fc6d 	bl	8005dfa <dir_next>
 8006520:	4603      	mov	r3, r0
 8006522:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006524:	7dfb      	ldrb	r3, [r7, #23]
 8006526:	2b00      	cmp	r3, #0
 8006528:	f43f af65 	beq.w	80063f6 <dir_find+0x34>
 800652c:	e004      	b.n	8006538 <dir_find+0x176>
		if (res != FR_OK) break;
 800652e:	bf00      	nop
 8006530:	e002      	b.n	8006538 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006532:	bf00      	nop
 8006534:	e000      	b.n	8006538 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006536:	bf00      	nop

	return res;
 8006538:	7dfb      	ldrb	r3, [r7, #23]
}
 800653a:	4618      	mov	r0, r3
 800653c:	3718      	adds	r7, #24
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
	...

08006544 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b08c      	sub	sp, #48	; 0x30
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006558:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d001      	beq.n	8006564 <dir_register+0x20>
 8006560:	2306      	movs	r3, #6
 8006562:	e0e0      	b.n	8006726 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006564:	2300      	movs	r3, #0
 8006566:	627b      	str	r3, [r7, #36]	; 0x24
 8006568:	e002      	b.n	8006570 <dir_register+0x2c>
 800656a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656c:	3301      	adds	r3, #1
 800656e:	627b      	str	r3, [r7, #36]	; 0x24
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	691a      	ldr	r2, [r3, #16]
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	005b      	lsls	r3, r3, #1
 8006578:	4413      	add	r3, r2
 800657a:	881b      	ldrh	r3, [r3, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d1f4      	bne.n	800656a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006586:	f107 030c 	add.w	r3, r7, #12
 800658a:	220c      	movs	r2, #12
 800658c:	4618      	mov	r0, r3
 800658e:	f7fe fd9b 	bl	80050c8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006592:	7dfb      	ldrb	r3, [r7, #23]
 8006594:	f003 0301 	and.w	r3, r3, #1
 8006598:	2b00      	cmp	r3, #0
 800659a:	d032      	beq.n	8006602 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2240      	movs	r2, #64	; 0x40
 80065a0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80065a4:	2301      	movs	r3, #1
 80065a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80065a8:	e016      	b.n	80065d8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	691a      	ldr	r2, [r3, #16]
 80065b4:	f107 010c 	add.w	r1, r7, #12
 80065b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ba:	f7ff fe53 	bl	8006264 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f7ff feff 	bl	80063c2 <dir_find>
 80065c4:	4603      	mov	r3, r0
 80065c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80065ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d106      	bne.n	80065e0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80065d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d4:	3301      	adds	r3, #1
 80065d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80065d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065da:	2b63      	cmp	r3, #99	; 0x63
 80065dc:	d9e5      	bls.n	80065aa <dir_register+0x66>
 80065de:	e000      	b.n	80065e2 <dir_register+0x9e>
			if (res != FR_OK) break;
 80065e0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80065e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e4:	2b64      	cmp	r3, #100	; 0x64
 80065e6:	d101      	bne.n	80065ec <dir_register+0xa8>
 80065e8:	2307      	movs	r3, #7
 80065ea:	e09c      	b.n	8006726 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80065ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80065f0:	2b04      	cmp	r3, #4
 80065f2:	d002      	beq.n	80065fa <dir_register+0xb6>
 80065f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80065f8:	e095      	b.n	8006726 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80065fa:	7dfa      	ldrb	r2, [r7, #23]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006602:	7dfb      	ldrb	r3, [r7, #23]
 8006604:	f003 0302 	and.w	r3, r3, #2
 8006608:	2b00      	cmp	r3, #0
 800660a:	d007      	beq.n	800661c <dir_register+0xd8>
 800660c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660e:	330c      	adds	r3, #12
 8006610:	4a47      	ldr	r2, [pc, #284]	; (8006730 <dir_register+0x1ec>)
 8006612:	fba2 2303 	umull	r2, r3, r2, r3
 8006616:	089b      	lsrs	r3, r3, #2
 8006618:	3301      	adds	r3, #1
 800661a:	e000      	b.n	800661e <dir_register+0xda>
 800661c:	2301      	movs	r3, #1
 800661e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006620:	6a39      	ldr	r1, [r7, #32]
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f7ff fcbf 	bl	8005fa6 <dir_alloc>
 8006628:	4603      	mov	r3, r0
 800662a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800662e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006632:	2b00      	cmp	r3, #0
 8006634:	d148      	bne.n	80066c8 <dir_register+0x184>
 8006636:	6a3b      	ldr	r3, [r7, #32]
 8006638:	3b01      	subs	r3, #1
 800663a:	623b      	str	r3, [r7, #32]
 800663c:	6a3b      	ldr	r3, [r7, #32]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d042      	beq.n	80066c8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	695a      	ldr	r2, [r3, #20]
 8006646:	6a3b      	ldr	r3, [r7, #32]
 8006648:	015b      	lsls	r3, r3, #5
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	4619      	mov	r1, r3
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f7ff fb4a 	bl	8005ce8 <dir_sdi>
 8006654:	4603      	mov	r3, r0
 8006656:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800665a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800665e:	2b00      	cmp	r3, #0
 8006660:	d132      	bne.n	80066c8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	3324      	adds	r3, #36	; 0x24
 8006666:	4618      	mov	r0, r3
 8006668:	f7ff fe8a 	bl	8006380 <sum_sfn>
 800666c:	4603      	mov	r3, r0
 800666e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	69db      	ldr	r3, [r3, #28]
 8006674:	4619      	mov	r1, r3
 8006676:	69f8      	ldr	r0, [r7, #28]
 8006678:	f7fe ff54 	bl	8005524 <move_window>
 800667c:	4603      	mov	r3, r0
 800667e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8006682:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006686:	2b00      	cmp	r3, #0
 8006688:	d11d      	bne.n	80066c6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	6918      	ldr	r0, [r3, #16]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a19      	ldr	r1, [r3, #32]
 8006692:	6a3b      	ldr	r3, [r7, #32]
 8006694:	b2da      	uxtb	r2, r3
 8006696:	7efb      	ldrb	r3, [r7, #27]
 8006698:	f7ff fd7c 	bl	8006194 <put_lfn>
				fs->wflag = 1;
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	2201      	movs	r2, #1
 80066a0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80066a2:	2100      	movs	r1, #0
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f7ff fba8 	bl	8005dfa <dir_next>
 80066aa:	4603      	mov	r3, r0
 80066ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80066b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d107      	bne.n	80066c8 <dir_register+0x184>
 80066b8:	6a3b      	ldr	r3, [r7, #32]
 80066ba:	3b01      	subs	r3, #1
 80066bc:	623b      	str	r3, [r7, #32]
 80066be:	6a3b      	ldr	r3, [r7, #32]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d1d5      	bne.n	8006670 <dir_register+0x12c>
 80066c4:	e000      	b.n	80066c8 <dir_register+0x184>
				if (res != FR_OK) break;
 80066c6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80066c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d128      	bne.n	8006722 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	69db      	ldr	r3, [r3, #28]
 80066d4:	4619      	mov	r1, r3
 80066d6:	69f8      	ldr	r0, [r7, #28]
 80066d8:	f7fe ff24 	bl	8005524 <move_window>
 80066dc:	4603      	mov	r3, r0
 80066de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80066e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d11b      	bne.n	8006722 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a1b      	ldr	r3, [r3, #32]
 80066ee:	2220      	movs	r2, #32
 80066f0:	2100      	movs	r1, #0
 80066f2:	4618      	mov	r0, r3
 80066f4:	f7fe fd09 	bl	800510a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6a18      	ldr	r0, [r3, #32]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	3324      	adds	r3, #36	; 0x24
 8006700:	220b      	movs	r2, #11
 8006702:	4619      	mov	r1, r3
 8006704:	f7fe fce0 	bl	80050c8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	330c      	adds	r3, #12
 8006714:	f002 0218 	and.w	r2, r2, #24
 8006718:	b2d2      	uxtb	r2, r2
 800671a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	2201      	movs	r2, #1
 8006720:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006722:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006726:	4618      	mov	r0, r3
 8006728:	3730      	adds	r7, #48	; 0x30
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	4ec4ec4f 	.word	0x4ec4ec4f

08006734 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b08a      	sub	sp, #40	; 0x28
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	613b      	str	r3, [r7, #16]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	60fb      	str	r3, [r7, #12]
 800674c:	2300      	movs	r3, #0
 800674e:	617b      	str	r3, [r7, #20]
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	1c5a      	adds	r2, r3, #1
 8006758:	61ba      	str	r2, [r7, #24]
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	4413      	add	r3, r2
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8006762:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006764:	2b1f      	cmp	r3, #31
 8006766:	d940      	bls.n	80067ea <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006768:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800676a:	2b2f      	cmp	r3, #47	; 0x2f
 800676c:	d006      	beq.n	800677c <create_name+0x48>
 800676e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006770:	2b5c      	cmp	r3, #92	; 0x5c
 8006772:	d110      	bne.n	8006796 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006774:	e002      	b.n	800677c <create_name+0x48>
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	3301      	adds	r3, #1
 800677a:	61bb      	str	r3, [r7, #24]
 800677c:	693a      	ldr	r2, [r7, #16]
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	4413      	add	r3, r2
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	2b2f      	cmp	r3, #47	; 0x2f
 8006786:	d0f6      	beq.n	8006776 <create_name+0x42>
 8006788:	693a      	ldr	r2, [r7, #16]
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	4413      	add	r3, r2
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	2b5c      	cmp	r3, #92	; 0x5c
 8006792:	d0f0      	beq.n	8006776 <create_name+0x42>
			break;
 8006794:	e02a      	b.n	80067ec <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	2bfe      	cmp	r3, #254	; 0xfe
 800679a:	d901      	bls.n	80067a0 <create_name+0x6c>
 800679c:	2306      	movs	r3, #6
 800679e:	e17d      	b.n	8006a9c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80067a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80067a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067a8:	2101      	movs	r1, #1
 80067aa:	4618      	mov	r0, r3
 80067ac:	f001 f9bc 	bl	8007b28 <ff_convert>
 80067b0:	4603      	mov	r3, r0
 80067b2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80067b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d101      	bne.n	80067be <create_name+0x8a>
 80067ba:	2306      	movs	r3, #6
 80067bc:	e16e      	b.n	8006a9c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80067be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067c0:	2b7f      	cmp	r3, #127	; 0x7f
 80067c2:	d809      	bhi.n	80067d8 <create_name+0xa4>
 80067c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067c6:	4619      	mov	r1, r3
 80067c8:	488d      	ldr	r0, [pc, #564]	; (8006a00 <create_name+0x2cc>)
 80067ca:	f7fe fce0 	bl	800518e <chk_chr>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d001      	beq.n	80067d8 <create_name+0xa4>
 80067d4:	2306      	movs	r3, #6
 80067d6:	e161      	b.n	8006a9c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	1c5a      	adds	r2, r3, #1
 80067dc:	617a      	str	r2, [r7, #20]
 80067de:	005b      	lsls	r3, r3, #1
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	4413      	add	r3, r2
 80067e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80067e6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80067e8:	e7b4      	b.n	8006754 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80067ea:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	441a      	add	r2, r3
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80067f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067f8:	2b1f      	cmp	r3, #31
 80067fa:	d801      	bhi.n	8006800 <create_name+0xcc>
 80067fc:	2304      	movs	r3, #4
 80067fe:	e000      	b.n	8006802 <create_name+0xce>
 8006800:	2300      	movs	r3, #0
 8006802:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006806:	e011      	b.n	800682c <create_name+0xf8>
		w = lfn[di - 1];
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800680e:	3b01      	subs	r3, #1
 8006810:	005b      	lsls	r3, r3, #1
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	4413      	add	r3, r2
 8006816:	881b      	ldrh	r3, [r3, #0]
 8006818:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800681a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800681c:	2b20      	cmp	r3, #32
 800681e:	d002      	beq.n	8006826 <create_name+0xf2>
 8006820:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006822:	2b2e      	cmp	r3, #46	; 0x2e
 8006824:	d106      	bne.n	8006834 <create_name+0x100>
		di--;
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	3b01      	subs	r3, #1
 800682a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1ea      	bne.n	8006808 <create_name+0xd4>
 8006832:	e000      	b.n	8006836 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8006834:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	005b      	lsls	r3, r3, #1
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	4413      	add	r3, r2
 800683e:	2200      	movs	r2, #0
 8006840:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d101      	bne.n	800684c <create_name+0x118>
 8006848:	2306      	movs	r3, #6
 800684a:	e127      	b.n	8006a9c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	3324      	adds	r3, #36	; 0x24
 8006850:	220b      	movs	r2, #11
 8006852:	2120      	movs	r1, #32
 8006854:	4618      	mov	r0, r3
 8006856:	f7fe fc58 	bl	800510a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800685a:	2300      	movs	r3, #0
 800685c:	61bb      	str	r3, [r7, #24]
 800685e:	e002      	b.n	8006866 <create_name+0x132>
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	3301      	adds	r3, #1
 8006864:	61bb      	str	r3, [r7, #24]
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	005b      	lsls	r3, r3, #1
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	4413      	add	r3, r2
 800686e:	881b      	ldrh	r3, [r3, #0]
 8006870:	2b20      	cmp	r3, #32
 8006872:	d0f5      	beq.n	8006860 <create_name+0x12c>
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	005b      	lsls	r3, r3, #1
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	4413      	add	r3, r2
 800687c:	881b      	ldrh	r3, [r3, #0]
 800687e:	2b2e      	cmp	r3, #46	; 0x2e
 8006880:	d0ee      	beq.n	8006860 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d009      	beq.n	800689c <create_name+0x168>
 8006888:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800688c:	f043 0303 	orr.w	r3, r3, #3
 8006890:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006894:	e002      	b.n	800689c <create_name+0x168>
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	3b01      	subs	r3, #1
 800689a:	617b      	str	r3, [r7, #20]
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d009      	beq.n	80068b6 <create_name+0x182>
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80068a8:	3b01      	subs	r3, #1
 80068aa:	005b      	lsls	r3, r3, #1
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	4413      	add	r3, r2
 80068b0:	881b      	ldrh	r3, [r3, #0]
 80068b2:	2b2e      	cmp	r3, #46	; 0x2e
 80068b4:	d1ef      	bne.n	8006896 <create_name+0x162>

	i = b = 0; ni = 8;
 80068b6:	2300      	movs	r3, #0
 80068b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80068bc:	2300      	movs	r3, #0
 80068be:	623b      	str	r3, [r7, #32]
 80068c0:	2308      	movs	r3, #8
 80068c2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	1c5a      	adds	r2, r3, #1
 80068c8:	61ba      	str	r2, [r7, #24]
 80068ca:	005b      	lsls	r3, r3, #1
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	4413      	add	r3, r2
 80068d0:	881b      	ldrh	r3, [r3, #0]
 80068d2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80068d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	f000 8090 	beq.w	80069fc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80068dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068de:	2b20      	cmp	r3, #32
 80068e0:	d006      	beq.n	80068f0 <create_name+0x1bc>
 80068e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068e4:	2b2e      	cmp	r3, #46	; 0x2e
 80068e6:	d10a      	bne.n	80068fe <create_name+0x1ca>
 80068e8:	69ba      	ldr	r2, [r7, #24]
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d006      	beq.n	80068fe <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80068f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80068f4:	f043 0303 	orr.w	r3, r3, #3
 80068f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80068fc:	e07d      	b.n	80069fa <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80068fe:	6a3a      	ldr	r2, [r7, #32]
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	429a      	cmp	r2, r3
 8006904:	d203      	bcs.n	800690e <create_name+0x1da>
 8006906:	69ba      	ldr	r2, [r7, #24]
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	429a      	cmp	r2, r3
 800690c:	d123      	bne.n	8006956 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	2b0b      	cmp	r3, #11
 8006912:	d106      	bne.n	8006922 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8006914:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006918:	f043 0303 	orr.w	r3, r3, #3
 800691c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006920:	e075      	b.n	8006a0e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006922:	69ba      	ldr	r2, [r7, #24]
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	429a      	cmp	r2, r3
 8006928:	d005      	beq.n	8006936 <create_name+0x202>
 800692a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800692e:	f043 0303 	orr.w	r3, r3, #3
 8006932:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8006936:	69ba      	ldr	r2, [r7, #24]
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	429a      	cmp	r2, r3
 800693c:	d866      	bhi.n	8006a0c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	61bb      	str	r3, [r7, #24]
 8006942:	2308      	movs	r3, #8
 8006944:	623b      	str	r3, [r7, #32]
 8006946:	230b      	movs	r3, #11
 8006948:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800694a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006954:	e051      	b.n	80069fa <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8006956:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006958:	2b7f      	cmp	r3, #127	; 0x7f
 800695a:	d914      	bls.n	8006986 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800695c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800695e:	2100      	movs	r1, #0
 8006960:	4618      	mov	r0, r3
 8006962:	f001 f8e1 	bl	8007b28 <ff_convert>
 8006966:	4603      	mov	r3, r0
 8006968:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800696a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800696c:	2b00      	cmp	r3, #0
 800696e:	d004      	beq.n	800697a <create_name+0x246>
 8006970:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006972:	3b80      	subs	r3, #128	; 0x80
 8006974:	4a23      	ldr	r2, [pc, #140]	; (8006a04 <create_name+0x2d0>)
 8006976:	5cd3      	ldrb	r3, [r2, r3]
 8006978:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800697a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800697e:	f043 0302 	orr.w	r3, r3, #2
 8006982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006986:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006988:	2b00      	cmp	r3, #0
 800698a:	d007      	beq.n	800699c <create_name+0x268>
 800698c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800698e:	4619      	mov	r1, r3
 8006990:	481d      	ldr	r0, [pc, #116]	; (8006a08 <create_name+0x2d4>)
 8006992:	f7fe fbfc 	bl	800518e <chk_chr>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d008      	beq.n	80069ae <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800699c:	235f      	movs	r3, #95	; 0x5f
 800699e:	84bb      	strh	r3, [r7, #36]	; 0x24
 80069a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069a4:	f043 0303 	orr.w	r3, r3, #3
 80069a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80069ac:	e01b      	b.n	80069e6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80069ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069b0:	2b40      	cmp	r3, #64	; 0x40
 80069b2:	d909      	bls.n	80069c8 <create_name+0x294>
 80069b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069b6:	2b5a      	cmp	r3, #90	; 0x5a
 80069b8:	d806      	bhi.n	80069c8 <create_name+0x294>
					b |= 2;
 80069ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80069be:	f043 0302 	orr.w	r3, r3, #2
 80069c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80069c6:	e00e      	b.n	80069e6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80069c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069ca:	2b60      	cmp	r3, #96	; 0x60
 80069cc:	d90b      	bls.n	80069e6 <create_name+0x2b2>
 80069ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069d0:	2b7a      	cmp	r3, #122	; 0x7a
 80069d2:	d808      	bhi.n	80069e6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80069d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80069d8:	f043 0301 	orr.w	r3, r3, #1
 80069dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80069e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069e2:	3b20      	subs	r3, #32
 80069e4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80069e6:	6a3b      	ldr	r3, [r7, #32]
 80069e8:	1c5a      	adds	r2, r3, #1
 80069ea:	623a      	str	r2, [r7, #32]
 80069ec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80069ee:	b2d1      	uxtb	r1, r2
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	4413      	add	r3, r2
 80069f4:	460a      	mov	r2, r1
 80069f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80069fa:	e763      	b.n	80068c4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80069fc:	bf00      	nop
 80069fe:	e006      	b.n	8006a0e <create_name+0x2da>
 8006a00:	08009154 	.word	0x08009154
 8006a04:	080091b4 	.word	0x080091b4
 8006a08:	08009160 	.word	0x08009160
			if (si > di) break;			/* No extension */
 8006a0c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006a14:	2be5      	cmp	r3, #229	; 0xe5
 8006a16:	d103      	bne.n	8006a20 <create_name+0x2ec>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2205      	movs	r2, #5
 8006a1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	2b08      	cmp	r3, #8
 8006a24:	d104      	bne.n	8006a30 <create_name+0x2fc>
 8006a26:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006a30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006a34:	f003 030c 	and.w	r3, r3, #12
 8006a38:	2b0c      	cmp	r3, #12
 8006a3a:	d005      	beq.n	8006a48 <create_name+0x314>
 8006a3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006a40:	f003 0303 	and.w	r3, r3, #3
 8006a44:	2b03      	cmp	r3, #3
 8006a46:	d105      	bne.n	8006a54 <create_name+0x320>
 8006a48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a4c:	f043 0302 	orr.w	r3, r3, #2
 8006a50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006a54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a58:	f003 0302 	and.w	r3, r3, #2
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d117      	bne.n	8006a90 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006a60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006a64:	f003 0303 	and.w	r3, r3, #3
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d105      	bne.n	8006a78 <create_name+0x344>
 8006a6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a70:	f043 0310 	orr.w	r3, r3, #16
 8006a74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006a78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006a7c:	f003 030c 	and.w	r3, r3, #12
 8006a80:	2b04      	cmp	r3, #4
 8006a82:	d105      	bne.n	8006a90 <create_name+0x35c>
 8006a84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a88:	f043 0308 	orr.w	r3, r3, #8
 8006a8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006a96:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8006a9a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3728      	adds	r7, #40	; 0x28
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b086      	sub	sp, #24
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006ab8:	e002      	b.n	8006ac0 <follow_path+0x1c>
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	3301      	adds	r3, #1
 8006abe:	603b      	str	r3, [r7, #0]
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	2b2f      	cmp	r3, #47	; 0x2f
 8006ac6:	d0f8      	beq.n	8006aba <follow_path+0x16>
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	2b5c      	cmp	r3, #92	; 0x5c
 8006ace:	d0f4      	beq.n	8006aba <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	2b1f      	cmp	r3, #31
 8006adc:	d80a      	bhi.n	8006af4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2280      	movs	r2, #128	; 0x80
 8006ae2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006ae6:	2100      	movs	r1, #0
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f7ff f8fd 	bl	8005ce8 <dir_sdi>
 8006aee:	4603      	mov	r3, r0
 8006af0:	75fb      	strb	r3, [r7, #23]
 8006af2:	e048      	b.n	8006b86 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006af4:	463b      	mov	r3, r7
 8006af6:	4619      	mov	r1, r3
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f7ff fe1b 	bl	8006734 <create_name>
 8006afe:	4603      	mov	r3, r0
 8006b00:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006b02:	7dfb      	ldrb	r3, [r7, #23]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d139      	bne.n	8006b7c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f7ff fc5a 	bl	80063c2 <dir_find>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006b18:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006b1a:	7dfb      	ldrb	r3, [r7, #23]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d00a      	beq.n	8006b36 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006b20:	7dfb      	ldrb	r3, [r7, #23]
 8006b22:	2b04      	cmp	r3, #4
 8006b24:	d12c      	bne.n	8006b80 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006b26:	7afb      	ldrb	r3, [r7, #11]
 8006b28:	f003 0304 	and.w	r3, r3, #4
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d127      	bne.n	8006b80 <follow_path+0xdc>
 8006b30:	2305      	movs	r3, #5
 8006b32:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006b34:	e024      	b.n	8006b80 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006b36:	7afb      	ldrb	r3, [r7, #11]
 8006b38:	f003 0304 	and.w	r3, r3, #4
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d121      	bne.n	8006b84 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	799b      	ldrb	r3, [r3, #6]
 8006b44:	f003 0310 	and.w	r3, r3, #16
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d102      	bne.n	8006b52 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006b4c:	2305      	movs	r3, #5
 8006b4e:	75fb      	strb	r3, [r7, #23]
 8006b50:	e019      	b.n	8006b86 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	695b      	ldr	r3, [r3, #20]
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	8992      	ldrh	r2, [r2, #12]
 8006b60:	fbb3 f0f2 	udiv	r0, r3, r2
 8006b64:	fb00 f202 	mul.w	r2, r0, r2
 8006b68:	1a9b      	subs	r3, r3, r2
 8006b6a:	440b      	add	r3, r1
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	68f8      	ldr	r0, [r7, #12]
 8006b70:	f7ff fa60 	bl	8006034 <ld_clust>
 8006b74:	4602      	mov	r2, r0
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006b7a:	e7bb      	b.n	8006af4 <follow_path+0x50>
			if (res != FR_OK) break;
 8006b7c:	bf00      	nop
 8006b7e:	e002      	b.n	8006b86 <follow_path+0xe2>
				break;
 8006b80:	bf00      	nop
 8006b82:	e000      	b.n	8006b86 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006b84:	bf00      	nop
			}
		}
	}

	return res;
 8006b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3718      	adds	r7, #24
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b087      	sub	sp, #28
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006b98:	f04f 33ff 	mov.w	r3, #4294967295
 8006b9c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d031      	beq.n	8006c0a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	617b      	str	r3, [r7, #20]
 8006bac:	e002      	b.n	8006bb4 <get_ldnumber+0x24>
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	617b      	str	r3, [r7, #20]
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	2b1f      	cmp	r3, #31
 8006bba:	d903      	bls.n	8006bc4 <get_ldnumber+0x34>
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	2b3a      	cmp	r3, #58	; 0x3a
 8006bc2:	d1f4      	bne.n	8006bae <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	2b3a      	cmp	r3, #58	; 0x3a
 8006bca:	d11c      	bne.n	8006c06 <get_ldnumber+0x76>
			tp = *path;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	1c5a      	adds	r2, r3, #1
 8006bd6:	60fa      	str	r2, [r7, #12]
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	3b30      	subs	r3, #48	; 0x30
 8006bdc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	2b09      	cmp	r3, #9
 8006be2:	d80e      	bhi.n	8006c02 <get_ldnumber+0x72>
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d10a      	bne.n	8006c02 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d107      	bne.n	8006c02 <get_ldnumber+0x72>
					vol = (int)i;
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	617b      	str	r3, [r7, #20]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	697a      	ldr	r2, [r7, #20]
 8006c00:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	e002      	b.n	8006c0c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006c06:	2300      	movs	r3, #0
 8006c08:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006c0a:	693b      	ldr	r3, [r7, #16]
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	371c      	adds	r7, #28
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b082      	sub	sp, #8
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	70da      	strb	r2, [r3, #3]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c2e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006c30:	6839      	ldr	r1, [r7, #0]
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f7fe fc76 	bl	8005524 <move_window>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d001      	beq.n	8006c42 <check_fs+0x2a>
 8006c3e:	2304      	movs	r3, #4
 8006c40:	e038      	b.n	8006cb4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	3338      	adds	r3, #56	; 0x38
 8006c46:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f7fe f9ba 	bl	8004fc4 <ld_word>
 8006c50:	4603      	mov	r3, r0
 8006c52:	461a      	mov	r2, r3
 8006c54:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d001      	beq.n	8006c60 <check_fs+0x48>
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	e029      	b.n	8006cb4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006c66:	2be9      	cmp	r3, #233	; 0xe9
 8006c68:	d009      	beq.n	8006c7e <check_fs+0x66>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006c70:	2beb      	cmp	r3, #235	; 0xeb
 8006c72:	d11e      	bne.n	8006cb2 <check_fs+0x9a>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006c7a:	2b90      	cmp	r3, #144	; 0x90
 8006c7c:	d119      	bne.n	8006cb2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	3338      	adds	r3, #56	; 0x38
 8006c82:	3336      	adds	r3, #54	; 0x36
 8006c84:	4618      	mov	r0, r3
 8006c86:	f7fe f9b5 	bl	8004ff4 <ld_dword>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006c90:	4a0a      	ldr	r2, [pc, #40]	; (8006cbc <check_fs+0xa4>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d101      	bne.n	8006c9a <check_fs+0x82>
 8006c96:	2300      	movs	r3, #0
 8006c98:	e00c      	b.n	8006cb4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	3338      	adds	r3, #56	; 0x38
 8006c9e:	3352      	adds	r3, #82	; 0x52
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f7fe f9a7 	bl	8004ff4 <ld_dword>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	4a05      	ldr	r2, [pc, #20]	; (8006cc0 <check_fs+0xa8>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d101      	bne.n	8006cb2 <check_fs+0x9a>
 8006cae:	2300      	movs	r3, #0
 8006cb0:	e000      	b.n	8006cb4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006cb2:	2302      	movs	r3, #2
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3708      	adds	r7, #8
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}
 8006cbc:	00544146 	.word	0x00544146
 8006cc0:	33544146 	.word	0x33544146

08006cc4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b096      	sub	sp, #88	; 0x58
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	4613      	mov	r3, r2
 8006cd0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006cd8:	68f8      	ldr	r0, [r7, #12]
 8006cda:	f7ff ff59 	bl	8006b90 <get_ldnumber>
 8006cde:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	da01      	bge.n	8006cea <find_volume+0x26>
 8006ce6:	230b      	movs	r3, #11
 8006ce8:	e265      	b.n	80071b6 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006cea:	4a9f      	ldr	r2, [pc, #636]	; (8006f68 <find_volume+0x2a4>)
 8006cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cf2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d101      	bne.n	8006cfe <find_volume+0x3a>
 8006cfa:	230c      	movs	r3, #12
 8006cfc:	e25b      	b.n	80071b6 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d02:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006d04:	79fb      	ldrb	r3, [r7, #7]
 8006d06:	f023 0301 	bic.w	r3, r3, #1
 8006d0a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d01a      	beq.n	8006d4a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d16:	785b      	ldrb	r3, [r3, #1]
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f7fe f8b5 	bl	8004e88 <disk_status>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006d24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006d28:	f003 0301 	and.w	r3, r3, #1
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d10c      	bne.n	8006d4a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006d30:	79fb      	ldrb	r3, [r7, #7]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d007      	beq.n	8006d46 <find_volume+0x82>
 8006d36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006d3a:	f003 0304 	and.w	r3, r3, #4
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d001      	beq.n	8006d46 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006d42:	230a      	movs	r3, #10
 8006d44:	e237      	b.n	80071b6 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8006d46:	2300      	movs	r3, #0
 8006d48:	e235      	b.n	80071b6 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d52:	b2da      	uxtb	r2, r3
 8006d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d56:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d5a:	785b      	ldrb	r3, [r3, #1]
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f7fe f8ad 	bl	8004ebc <disk_initialize>
 8006d62:	4603      	mov	r3, r0
 8006d64:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006d68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006d6c:	f003 0301 	and.w	r3, r3, #1
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d001      	beq.n	8006d78 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006d74:	2303      	movs	r3, #3
 8006d76:	e21e      	b.n	80071b6 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006d78:	79fb      	ldrb	r3, [r7, #7]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d007      	beq.n	8006d8e <find_volume+0xca>
 8006d7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006d82:	f003 0304 	and.w	r3, r3, #4
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d001      	beq.n	8006d8e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006d8a:	230a      	movs	r3, #10
 8006d8c:	e213      	b.n	80071b6 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d90:	7858      	ldrb	r0, [r3, #1]
 8006d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d94:	330c      	adds	r3, #12
 8006d96:	461a      	mov	r2, r3
 8006d98:	2102      	movs	r1, #2
 8006d9a:	f7fe f8f5 	bl	8004f88 <disk_ioctl>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d001      	beq.n	8006da8 <find_volume+0xe4>
 8006da4:	2301      	movs	r3, #1
 8006da6:	e206      	b.n	80071b6 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006daa:	899b      	ldrh	r3, [r3, #12]
 8006dac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006db0:	d80d      	bhi.n	8006dce <find_volume+0x10a>
 8006db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db4:	899b      	ldrh	r3, [r3, #12]
 8006db6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dba:	d308      	bcc.n	8006dce <find_volume+0x10a>
 8006dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dbe:	899b      	ldrh	r3, [r3, #12]
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc4:	899b      	ldrh	r3, [r3, #12]
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	4013      	ands	r3, r2
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d001      	beq.n	8006dd2 <find_volume+0x10e>
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e1f1      	b.n	80071b6 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006dd6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006dd8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006dda:	f7ff ff1d 	bl	8006c18 <check_fs>
 8006dde:	4603      	mov	r3, r0
 8006de0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006de4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	d149      	bne.n	8006e80 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006dec:	2300      	movs	r3, #0
 8006dee:	643b      	str	r3, [r7, #64]	; 0x40
 8006df0:	e01e      	b.n	8006e30 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006df8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dfa:	011b      	lsls	r3, r3, #4
 8006dfc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006e00:	4413      	add	r3, r2
 8006e02:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e06:	3304      	adds	r3, #4
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d006      	beq.n	8006e1c <find_volume+0x158>
 8006e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e10:	3308      	adds	r3, #8
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7fe f8ee 	bl	8004ff4 <ld_dword>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	e000      	b.n	8006e1e <find_volume+0x15a>
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	3358      	adds	r3, #88	; 0x58
 8006e24:	443b      	add	r3, r7
 8006e26:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006e2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	643b      	str	r3, [r7, #64]	; 0x40
 8006e30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e32:	2b03      	cmp	r3, #3
 8006e34:	d9dd      	bls.n	8006df2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006e36:	2300      	movs	r3, #0
 8006e38:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006e3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d002      	beq.n	8006e46 <find_volume+0x182>
 8006e40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e42:	3b01      	subs	r3, #1
 8006e44:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006e46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	3358      	adds	r3, #88	; 0x58
 8006e4c:	443b      	add	r3, r7
 8006e4e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006e52:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006e54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d005      	beq.n	8006e66 <find_volume+0x1a2>
 8006e5a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006e5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006e5e:	f7ff fedb 	bl	8006c18 <check_fs>
 8006e62:	4603      	mov	r3, r0
 8006e64:	e000      	b.n	8006e68 <find_volume+0x1a4>
 8006e66:	2303      	movs	r3, #3
 8006e68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006e6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d905      	bls.n	8006e80 <find_volume+0x1bc>
 8006e74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e76:	3301      	adds	r3, #1
 8006e78:	643b      	str	r3, [r7, #64]	; 0x40
 8006e7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e7c:	2b03      	cmp	r3, #3
 8006e7e:	d9e2      	bls.n	8006e46 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006e80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e84:	2b04      	cmp	r3, #4
 8006e86:	d101      	bne.n	8006e8c <find_volume+0x1c8>
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e194      	b.n	80071b6 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006e8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d901      	bls.n	8006e98 <find_volume+0x1d4>
 8006e94:	230d      	movs	r3, #13
 8006e96:	e18e      	b.n	80071b6 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e9a:	3338      	adds	r3, #56	; 0x38
 8006e9c:	330b      	adds	r3, #11
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7fe f890 	bl	8004fc4 <ld_word>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eaa:	899b      	ldrh	r3, [r3, #12]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d001      	beq.n	8006eb4 <find_volume+0x1f0>
 8006eb0:	230d      	movs	r3, #13
 8006eb2:	e180      	b.n	80071b6 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb6:	3338      	adds	r3, #56	; 0x38
 8006eb8:	3316      	adds	r3, #22
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7fe f882 	bl	8004fc4 <ld_word>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006ec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d106      	bne.n	8006ed8 <find_volume+0x214>
 8006eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ecc:	3338      	adds	r3, #56	; 0x38
 8006ece:	3324      	adds	r3, #36	; 0x24
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f7fe f88f 	bl	8004ff4 <ld_dword>
 8006ed6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006edc:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8006ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eea:	789b      	ldrb	r3, [r3, #2]
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d005      	beq.n	8006efc <find_volume+0x238>
 8006ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef2:	789b      	ldrb	r3, [r3, #2]
 8006ef4:	2b02      	cmp	r3, #2
 8006ef6:	d001      	beq.n	8006efc <find_volume+0x238>
 8006ef8:	230d      	movs	r3, #13
 8006efa:	e15c      	b.n	80071b6 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efe:	789b      	ldrb	r3, [r3, #2]
 8006f00:	461a      	mov	r2, r3
 8006f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f04:	fb02 f303 	mul.w	r3, r2, r3
 8006f08:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f14:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f18:	895b      	ldrh	r3, [r3, #10]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d008      	beq.n	8006f30 <find_volume+0x26c>
 8006f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f20:	895b      	ldrh	r3, [r3, #10]
 8006f22:	461a      	mov	r2, r3
 8006f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f26:	895b      	ldrh	r3, [r3, #10]
 8006f28:	3b01      	subs	r3, #1
 8006f2a:	4013      	ands	r3, r2
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d001      	beq.n	8006f34 <find_volume+0x270>
 8006f30:	230d      	movs	r3, #13
 8006f32:	e140      	b.n	80071b6 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f36:	3338      	adds	r3, #56	; 0x38
 8006f38:	3311      	adds	r3, #17
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7fe f842 	bl	8004fc4 <ld_word>
 8006f40:	4603      	mov	r3, r0
 8006f42:	461a      	mov	r2, r3
 8006f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f46:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f4a:	891b      	ldrh	r3, [r3, #8]
 8006f4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f4e:	8992      	ldrh	r2, [r2, #12]
 8006f50:	0952      	lsrs	r2, r2, #5
 8006f52:	b292      	uxth	r2, r2
 8006f54:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f58:	fb01 f202 	mul.w	r2, r1, r2
 8006f5c:	1a9b      	subs	r3, r3, r2
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d003      	beq.n	8006f6c <find_volume+0x2a8>
 8006f64:	230d      	movs	r3, #13
 8006f66:	e126      	b.n	80071b6 <find_volume+0x4f2>
 8006f68:	20003230 	.word	0x20003230

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6e:	3338      	adds	r3, #56	; 0x38
 8006f70:	3313      	adds	r3, #19
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7fe f826 	bl	8004fc4 <ld_word>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006f7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d106      	bne.n	8006f90 <find_volume+0x2cc>
 8006f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f84:	3338      	adds	r3, #56	; 0x38
 8006f86:	3320      	adds	r3, #32
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f7fe f833 	bl	8004ff4 <ld_dword>
 8006f8e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f92:	3338      	adds	r3, #56	; 0x38
 8006f94:	330e      	adds	r3, #14
 8006f96:	4618      	mov	r0, r3
 8006f98:	f7fe f814 	bl	8004fc4 <ld_word>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006fa0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d101      	bne.n	8006faa <find_volume+0x2e6>
 8006fa6:	230d      	movs	r3, #13
 8006fa8:	e105      	b.n	80071b6 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006faa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fae:	4413      	add	r3, r2
 8006fb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fb2:	8911      	ldrh	r1, [r2, #8]
 8006fb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fb6:	8992      	ldrh	r2, [r2, #12]
 8006fb8:	0952      	lsrs	r2, r2, #5
 8006fba:	b292      	uxth	r2, r2
 8006fbc:	fbb1 f2f2 	udiv	r2, r1, r2
 8006fc0:	b292      	uxth	r2, r2
 8006fc2:	4413      	add	r3, r2
 8006fc4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006fc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d201      	bcs.n	8006fd2 <find_volume+0x30e>
 8006fce:	230d      	movs	r3, #13
 8006fd0:	e0f1      	b.n	80071b6 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006fd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd6:	1ad3      	subs	r3, r2, r3
 8006fd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fda:	8952      	ldrh	r2, [r2, #10]
 8006fdc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fe0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d101      	bne.n	8006fec <find_volume+0x328>
 8006fe8:	230d      	movs	r3, #13
 8006fea:	e0e4      	b.n	80071b6 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8006fec:	2303      	movs	r3, #3
 8006fee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d802      	bhi.n	8007002 <find_volume+0x33e>
 8006ffc:	2302      	movs	r3, #2
 8006ffe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007004:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007008:	4293      	cmp	r3, r2
 800700a:	d802      	bhi.n	8007012 <find_volume+0x34e>
 800700c:	2301      	movs	r3, #1
 800700e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007014:	1c9a      	adds	r2, r3, #2
 8007016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007018:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800701a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800701e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007020:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007022:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007024:	441a      	add	r2, r3
 8007026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007028:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800702a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800702c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702e:	441a      	add	r2, r3
 8007030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007032:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8007034:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007038:	2b03      	cmp	r3, #3
 800703a:	d11e      	bne.n	800707a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800703c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800703e:	3338      	adds	r3, #56	; 0x38
 8007040:	332a      	adds	r3, #42	; 0x2a
 8007042:	4618      	mov	r0, r3
 8007044:	f7fd ffbe 	bl	8004fc4 <ld_word>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d001      	beq.n	8007052 <find_volume+0x38e>
 800704e:	230d      	movs	r3, #13
 8007050:	e0b1      	b.n	80071b6 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007054:	891b      	ldrh	r3, [r3, #8]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d001      	beq.n	800705e <find_volume+0x39a>
 800705a:	230d      	movs	r3, #13
 800705c:	e0ab      	b.n	80071b6 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800705e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007060:	3338      	adds	r3, #56	; 0x38
 8007062:	332c      	adds	r3, #44	; 0x2c
 8007064:	4618      	mov	r0, r3
 8007066:	f7fd ffc5 	bl	8004ff4 <ld_dword>
 800706a:	4602      	mov	r2, r0
 800706c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007072:	69db      	ldr	r3, [r3, #28]
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	647b      	str	r3, [r7, #68]	; 0x44
 8007078:	e01f      	b.n	80070ba <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800707a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707c:	891b      	ldrh	r3, [r3, #8]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d101      	bne.n	8007086 <find_volume+0x3c2>
 8007082:	230d      	movs	r3, #13
 8007084:	e097      	b.n	80071b6 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007088:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800708a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800708c:	441a      	add	r2, r3
 800708e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007090:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007092:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007096:	2b02      	cmp	r3, #2
 8007098:	d103      	bne.n	80070a2 <find_volume+0x3de>
 800709a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709c:	69db      	ldr	r3, [r3, #28]
 800709e:	005b      	lsls	r3, r3, #1
 80070a0:	e00a      	b.n	80070b8 <find_volume+0x3f4>
 80070a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a4:	69da      	ldr	r2, [r3, #28]
 80070a6:	4613      	mov	r3, r2
 80070a8:	005b      	lsls	r3, r3, #1
 80070aa:	4413      	add	r3, r2
 80070ac:	085a      	lsrs	r2, r3, #1
 80070ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b0:	69db      	ldr	r3, [r3, #28]
 80070b2:	f003 0301 	and.w	r3, r3, #1
 80070b6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80070b8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80070ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070bc:	6a1a      	ldr	r2, [r3, #32]
 80070be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c0:	899b      	ldrh	r3, [r3, #12]
 80070c2:	4619      	mov	r1, r3
 80070c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070c6:	440b      	add	r3, r1
 80070c8:	3b01      	subs	r3, #1
 80070ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80070cc:	8989      	ldrh	r1, [r1, #12]
 80070ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d201      	bcs.n	80070da <find_volume+0x416>
 80070d6:	230d      	movs	r3, #13
 80070d8:	e06d      	b.n	80071b6 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80070da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070dc:	f04f 32ff 	mov.w	r2, #4294967295
 80070e0:	619a      	str	r2, [r3, #24]
 80070e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e4:	699a      	ldr	r2, [r3, #24]
 80070e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80070ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ec:	2280      	movs	r2, #128	; 0x80
 80070ee:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80070f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80070f4:	2b03      	cmp	r3, #3
 80070f6:	d149      	bne.n	800718c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80070f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fa:	3338      	adds	r3, #56	; 0x38
 80070fc:	3330      	adds	r3, #48	; 0x30
 80070fe:	4618      	mov	r0, r3
 8007100:	f7fd ff60 	bl	8004fc4 <ld_word>
 8007104:	4603      	mov	r3, r0
 8007106:	2b01      	cmp	r3, #1
 8007108:	d140      	bne.n	800718c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800710a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800710c:	3301      	adds	r3, #1
 800710e:	4619      	mov	r1, r3
 8007110:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007112:	f7fe fa07 	bl	8005524 <move_window>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d137      	bne.n	800718c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800711c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711e:	2200      	movs	r2, #0
 8007120:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007124:	3338      	adds	r3, #56	; 0x38
 8007126:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800712a:	4618      	mov	r0, r3
 800712c:	f7fd ff4a 	bl	8004fc4 <ld_word>
 8007130:	4603      	mov	r3, r0
 8007132:	461a      	mov	r2, r3
 8007134:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007138:	429a      	cmp	r2, r3
 800713a:	d127      	bne.n	800718c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800713c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800713e:	3338      	adds	r3, #56	; 0x38
 8007140:	4618      	mov	r0, r3
 8007142:	f7fd ff57 	bl	8004ff4 <ld_dword>
 8007146:	4603      	mov	r3, r0
 8007148:	4a1d      	ldr	r2, [pc, #116]	; (80071c0 <find_volume+0x4fc>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d11e      	bne.n	800718c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800714e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007150:	3338      	adds	r3, #56	; 0x38
 8007152:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007156:	4618      	mov	r0, r3
 8007158:	f7fd ff4c 	bl	8004ff4 <ld_dword>
 800715c:	4603      	mov	r3, r0
 800715e:	4a19      	ldr	r2, [pc, #100]	; (80071c4 <find_volume+0x500>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d113      	bne.n	800718c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007166:	3338      	adds	r3, #56	; 0x38
 8007168:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800716c:	4618      	mov	r0, r3
 800716e:	f7fd ff41 	bl	8004ff4 <ld_dword>
 8007172:	4602      	mov	r2, r0
 8007174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007176:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717a:	3338      	adds	r3, #56	; 0x38
 800717c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007180:	4618      	mov	r0, r3
 8007182:	f7fd ff37 	bl	8004ff4 <ld_dword>
 8007186:	4602      	mov	r2, r0
 8007188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800718c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007192:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007194:	4b0c      	ldr	r3, [pc, #48]	; (80071c8 <find_volume+0x504>)
 8007196:	881b      	ldrh	r3, [r3, #0]
 8007198:	3301      	adds	r3, #1
 800719a:	b29a      	uxth	r2, r3
 800719c:	4b0a      	ldr	r3, [pc, #40]	; (80071c8 <find_volume+0x504>)
 800719e:	801a      	strh	r2, [r3, #0]
 80071a0:	4b09      	ldr	r3, [pc, #36]	; (80071c8 <find_volume+0x504>)
 80071a2:	881a      	ldrh	r2, [r3, #0]
 80071a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a6:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80071a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071aa:	4a08      	ldr	r2, [pc, #32]	; (80071cc <find_volume+0x508>)
 80071ac:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80071ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80071b0:	f7fe f950 	bl	8005454 <clear_lock>
#endif
	return FR_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3758      	adds	r7, #88	; 0x58
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	41615252 	.word	0x41615252
 80071c4:	61417272 	.word	0x61417272
 80071c8:	20003234 	.word	0x20003234
 80071cc:	20003258 	.word	0x20003258

080071d0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80071da:	2309      	movs	r3, #9
 80071dc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d01c      	beq.n	800721e <validate+0x4e>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d018      	beq.n	800721e <validate+0x4e>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d013      	beq.n	800721e <validate+0x4e>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	889a      	ldrh	r2, [r3, #4]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	88db      	ldrh	r3, [r3, #6]
 8007200:	429a      	cmp	r2, r3
 8007202:	d10c      	bne.n	800721e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	785b      	ldrb	r3, [r3, #1]
 800720a:	4618      	mov	r0, r3
 800720c:	f7fd fe3c 	bl	8004e88 <disk_status>
 8007210:	4603      	mov	r3, r0
 8007212:	f003 0301 	and.w	r3, r3, #1
 8007216:	2b00      	cmp	r3, #0
 8007218:	d101      	bne.n	800721e <validate+0x4e>
			res = FR_OK;
 800721a:	2300      	movs	r3, #0
 800721c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800721e:	7bfb      	ldrb	r3, [r7, #15]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d102      	bne.n	800722a <validate+0x5a>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	e000      	b.n	800722c <validate+0x5c>
 800722a:	2300      	movs	r3, #0
 800722c:	683a      	ldr	r2, [r7, #0]
 800722e:	6013      	str	r3, [r2, #0]
	return res;
 8007230:	7bfb      	ldrb	r3, [r7, #15]
}
 8007232:	4618      	mov	r0, r3
 8007234:	3710      	adds	r7, #16
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
	...

0800723c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b088      	sub	sp, #32
 8007240:	af00      	add	r7, sp, #0
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	4613      	mov	r3, r2
 8007248:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800724e:	f107 0310 	add.w	r3, r7, #16
 8007252:	4618      	mov	r0, r3
 8007254:	f7ff fc9c 	bl	8006b90 <get_ldnumber>
 8007258:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	2b00      	cmp	r3, #0
 800725e:	da01      	bge.n	8007264 <f_mount+0x28>
 8007260:	230b      	movs	r3, #11
 8007262:	e02b      	b.n	80072bc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007264:	4a17      	ldr	r2, [pc, #92]	; (80072c4 <f_mount+0x88>)
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800726c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d005      	beq.n	8007280 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007274:	69b8      	ldr	r0, [r7, #24]
 8007276:	f7fe f8ed 	bl	8005454 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	2200      	movs	r2, #0
 800727e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d002      	beq.n	800728c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2200      	movs	r2, #0
 800728a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800728c:	68fa      	ldr	r2, [r7, #12]
 800728e:	490d      	ldr	r1, [pc, #52]	; (80072c4 <f_mount+0x88>)
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d002      	beq.n	80072a2 <f_mount+0x66>
 800729c:	79fb      	ldrb	r3, [r7, #7]
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d001      	beq.n	80072a6 <f_mount+0x6a>
 80072a2:	2300      	movs	r3, #0
 80072a4:	e00a      	b.n	80072bc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80072a6:	f107 010c 	add.w	r1, r7, #12
 80072aa:	f107 0308 	add.w	r3, r7, #8
 80072ae:	2200      	movs	r2, #0
 80072b0:	4618      	mov	r0, r3
 80072b2:	f7ff fd07 	bl	8006cc4 <find_volume>
 80072b6:	4603      	mov	r3, r0
 80072b8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80072ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3720      	adds	r7, #32
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}
 80072c4:	20003230 	.word	0x20003230

080072c8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b09a      	sub	sp, #104	; 0x68
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	4613      	mov	r3, r2
 80072d4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d101      	bne.n	80072e0 <f_open+0x18>
 80072dc:	2309      	movs	r3, #9
 80072de:	e1bb      	b.n	8007658 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80072e0:	79fb      	ldrb	r3, [r7, #7]
 80072e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072e6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80072e8:	79fa      	ldrb	r2, [r7, #7]
 80072ea:	f107 0114 	add.w	r1, r7, #20
 80072ee:	f107 0308 	add.w	r3, r7, #8
 80072f2:	4618      	mov	r0, r3
 80072f4:	f7ff fce6 	bl	8006cc4 <find_volume>
 80072f8:	4603      	mov	r3, r0
 80072fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80072fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007302:	2b00      	cmp	r3, #0
 8007304:	f040 819f 	bne.w	8007646 <f_open+0x37e>
		dj.obj.fs = fs;
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800730c:	68ba      	ldr	r2, [r7, #8]
 800730e:	f107 0318 	add.w	r3, r7, #24
 8007312:	4611      	mov	r1, r2
 8007314:	4618      	mov	r0, r3
 8007316:	f7ff fbc5 	bl	8006aa4 <follow_path>
 800731a:	4603      	mov	r3, r0
 800731c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007320:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007324:	2b00      	cmp	r3, #0
 8007326:	d11a      	bne.n	800735e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007328:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800732c:	b25b      	sxtb	r3, r3
 800732e:	2b00      	cmp	r3, #0
 8007330:	da03      	bge.n	800733a <f_open+0x72>
				res = FR_INVALID_NAME;
 8007332:	2306      	movs	r3, #6
 8007334:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007338:	e011      	b.n	800735e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800733a:	79fb      	ldrb	r3, [r7, #7]
 800733c:	f023 0301 	bic.w	r3, r3, #1
 8007340:	2b00      	cmp	r3, #0
 8007342:	bf14      	ite	ne
 8007344:	2301      	movne	r3, #1
 8007346:	2300      	moveq	r3, #0
 8007348:	b2db      	uxtb	r3, r3
 800734a:	461a      	mov	r2, r3
 800734c:	f107 0318 	add.w	r3, r7, #24
 8007350:	4611      	mov	r1, r2
 8007352:	4618      	mov	r0, r3
 8007354:	f7fd ff36 	bl	80051c4 <chk_lock>
 8007358:	4603      	mov	r3, r0
 800735a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800735e:	79fb      	ldrb	r3, [r7, #7]
 8007360:	f003 031c 	and.w	r3, r3, #28
 8007364:	2b00      	cmp	r3, #0
 8007366:	d07f      	beq.n	8007468 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007368:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800736c:	2b00      	cmp	r3, #0
 800736e:	d017      	beq.n	80073a0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007370:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007374:	2b04      	cmp	r3, #4
 8007376:	d10e      	bne.n	8007396 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007378:	f7fd ff80 	bl	800527c <enq_lock>
 800737c:	4603      	mov	r3, r0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d006      	beq.n	8007390 <f_open+0xc8>
 8007382:	f107 0318 	add.w	r3, r7, #24
 8007386:	4618      	mov	r0, r3
 8007388:	f7ff f8dc 	bl	8006544 <dir_register>
 800738c:	4603      	mov	r3, r0
 800738e:	e000      	b.n	8007392 <f_open+0xca>
 8007390:	2312      	movs	r3, #18
 8007392:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007396:	79fb      	ldrb	r3, [r7, #7]
 8007398:	f043 0308 	orr.w	r3, r3, #8
 800739c:	71fb      	strb	r3, [r7, #7]
 800739e:	e010      	b.n	80073c2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80073a0:	7fbb      	ldrb	r3, [r7, #30]
 80073a2:	f003 0311 	and.w	r3, r3, #17
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d003      	beq.n	80073b2 <f_open+0xea>
					res = FR_DENIED;
 80073aa:	2307      	movs	r3, #7
 80073ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80073b0:	e007      	b.n	80073c2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80073b2:	79fb      	ldrb	r3, [r7, #7]
 80073b4:	f003 0304 	and.w	r3, r3, #4
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d002      	beq.n	80073c2 <f_open+0xfa>
 80073bc:	2308      	movs	r3, #8
 80073be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80073c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d168      	bne.n	800749c <f_open+0x1d4>
 80073ca:	79fb      	ldrb	r3, [r7, #7]
 80073cc:	f003 0308 	and.w	r3, r3, #8
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d063      	beq.n	800749c <f_open+0x1d4>
				dw = GET_FATTIME();
 80073d4:	f7fd fcf6 	bl	8004dc4 <get_fattime>
 80073d8:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80073da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073dc:	330e      	adds	r3, #14
 80073de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80073e0:	4618      	mov	r0, r3
 80073e2:	f7fd fe45 	bl	8005070 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80073e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e8:	3316      	adds	r3, #22
 80073ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80073ec:	4618      	mov	r0, r3
 80073ee:	f7fd fe3f 	bl	8005070 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80073f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f4:	330b      	adds	r3, #11
 80073f6:	2220      	movs	r2, #32
 80073f8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073fe:	4611      	mov	r1, r2
 8007400:	4618      	mov	r0, r3
 8007402:	f7fe fe17 	bl	8006034 <ld_clust>
 8007406:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800740c:	2200      	movs	r2, #0
 800740e:	4618      	mov	r0, r3
 8007410:	f7fe fe2f 	bl	8006072 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007416:	331c      	adds	r3, #28
 8007418:	2100      	movs	r1, #0
 800741a:	4618      	mov	r0, r3
 800741c:	f7fd fe28 	bl	8005070 <st_dword>
					fs->wflag = 1;
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	2201      	movs	r2, #1
 8007424:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007426:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007428:	2b00      	cmp	r3, #0
 800742a:	d037      	beq.n	800749c <f_open+0x1d4>
						dw = fs->winsect;
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007430:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8007432:	f107 0318 	add.w	r3, r7, #24
 8007436:	2200      	movs	r2, #0
 8007438:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800743a:	4618      	mov	r0, r3
 800743c:	f7fe fb1f 	bl	8005a7e <remove_chain>
 8007440:	4603      	mov	r3, r0
 8007442:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8007446:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800744a:	2b00      	cmp	r3, #0
 800744c:	d126      	bne.n	800749c <f_open+0x1d4>
							res = move_window(fs, dw);
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007452:	4618      	mov	r0, r3
 8007454:	f7fe f866 	bl	8005524 <move_window>
 8007458:	4603      	mov	r3, r0
 800745a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007462:	3a01      	subs	r2, #1
 8007464:	615a      	str	r2, [r3, #20]
 8007466:	e019      	b.n	800749c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007468:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800746c:	2b00      	cmp	r3, #0
 800746e:	d115      	bne.n	800749c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007470:	7fbb      	ldrb	r3, [r7, #30]
 8007472:	f003 0310 	and.w	r3, r3, #16
 8007476:	2b00      	cmp	r3, #0
 8007478:	d003      	beq.n	8007482 <f_open+0x1ba>
					res = FR_NO_FILE;
 800747a:	2304      	movs	r3, #4
 800747c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007480:	e00c      	b.n	800749c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007482:	79fb      	ldrb	r3, [r7, #7]
 8007484:	f003 0302 	and.w	r3, r3, #2
 8007488:	2b00      	cmp	r3, #0
 800748a:	d007      	beq.n	800749c <f_open+0x1d4>
 800748c:	7fbb      	ldrb	r3, [r7, #30]
 800748e:	f003 0301 	and.w	r3, r3, #1
 8007492:	2b00      	cmp	r3, #0
 8007494:	d002      	beq.n	800749c <f_open+0x1d4>
						res = FR_DENIED;
 8007496:	2307      	movs	r3, #7
 8007498:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800749c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d128      	bne.n	80074f6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80074a4:	79fb      	ldrb	r3, [r7, #7]
 80074a6:	f003 0308 	and.w	r3, r3, #8
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d003      	beq.n	80074b6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80074ae:	79fb      	ldrb	r3, [r7, #7]
 80074b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074b4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80074be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80074c4:	79fb      	ldrb	r3, [r7, #7]
 80074c6:	f023 0301 	bic.w	r3, r3, #1
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	bf14      	ite	ne
 80074ce:	2301      	movne	r3, #1
 80074d0:	2300      	moveq	r3, #0
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	461a      	mov	r2, r3
 80074d6:	f107 0318 	add.w	r3, r7, #24
 80074da:	4611      	mov	r1, r2
 80074dc:	4618      	mov	r0, r3
 80074de:	f7fd feef 	bl	80052c0 <inc_lock>
 80074e2:	4602      	mov	r2, r0
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	691b      	ldr	r3, [r3, #16]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d102      	bne.n	80074f6 <f_open+0x22e>
 80074f0:	2302      	movs	r3, #2
 80074f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80074f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	f040 80a3 	bne.w	8007646 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007504:	4611      	mov	r1, r2
 8007506:	4618      	mov	r0, r3
 8007508:	f7fe fd94 	bl	8006034 <ld_clust>
 800750c:	4602      	mov	r2, r0
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007514:	331c      	adds	r3, #28
 8007516:	4618      	mov	r0, r3
 8007518:	f7fd fd6c 	bl	8004ff4 <ld_dword>
 800751c:	4602      	mov	r2, r0
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2200      	movs	r2, #0
 8007526:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007528:	697a      	ldr	r2, [r7, #20]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	88da      	ldrh	r2, [r3, #6]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	79fa      	ldrb	r2, [r7, #7]
 800753a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2200      	movs	r2, #0
 8007540:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2200      	movs	r2, #0
 8007546:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2200      	movs	r2, #0
 800754c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	3330      	adds	r3, #48	; 0x30
 8007552:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007556:	2100      	movs	r1, #0
 8007558:	4618      	mov	r0, r3
 800755a:	f7fd fdd6 	bl	800510a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800755e:	79fb      	ldrb	r3, [r7, #7]
 8007560:	f003 0320 	and.w	r3, r3, #32
 8007564:	2b00      	cmp	r3, #0
 8007566:	d06e      	beq.n	8007646 <f_open+0x37e>
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d06a      	beq.n	8007646 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	68da      	ldr	r2, [r3, #12]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	895b      	ldrh	r3, [r3, #10]
 800757c:	461a      	mov	r2, r3
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	899b      	ldrh	r3, [r3, #12]
 8007582:	fb02 f303 	mul.w	r3, r2, r3
 8007586:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007594:	e016      	b.n	80075c4 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800759a:	4618      	mov	r0, r3
 800759c:	f7fe f87f 	bl	800569e <get_fat>
 80075a0:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80075a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d802      	bhi.n	80075ae <f_open+0x2e6>
 80075a8:	2302      	movs	r3, #2
 80075aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80075ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075b4:	d102      	bne.n	80075bc <f_open+0x2f4>
 80075b6:	2301      	movs	r3, #1
 80075b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80075bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80075be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075c0:	1ad3      	subs	r3, r2, r3
 80075c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d103      	bne.n	80075d4 <f_open+0x30c>
 80075cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80075ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d8e0      	bhi.n	8007596 <f_open+0x2ce>
				}
				fp->clust = clst;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80075d8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80075da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d131      	bne.n	8007646 <f_open+0x37e>
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	899b      	ldrh	r3, [r3, #12]
 80075e6:	461a      	mov	r2, r3
 80075e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80075ee:	fb01 f202 	mul.w	r2, r1, r2
 80075f2:	1a9b      	subs	r3, r3, r2
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d026      	beq.n	8007646 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80075fc:	4618      	mov	r0, r3
 80075fe:	f7fe f82f 	bl	8005660 <clust2sect>
 8007602:	64f8      	str	r0, [r7, #76]	; 0x4c
 8007604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007606:	2b00      	cmp	r3, #0
 8007608:	d103      	bne.n	8007612 <f_open+0x34a>
						res = FR_INT_ERR;
 800760a:	2302      	movs	r3, #2
 800760c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007610:	e019      	b.n	8007646 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	899b      	ldrh	r3, [r3, #12]
 8007616:	461a      	mov	r2, r3
 8007618:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800761a:	fbb3 f2f2 	udiv	r2, r3, r2
 800761e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007620:	441a      	add	r2, r3
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	7858      	ldrb	r0, [r3, #1]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6a1a      	ldr	r2, [r3, #32]
 8007634:	2301      	movs	r3, #1
 8007636:	f7fd fc67 	bl	8004f08 <disk_read>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d002      	beq.n	8007646 <f_open+0x37e>
 8007640:	2301      	movs	r3, #1
 8007642:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007646:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800764a:	2b00      	cmp	r3, #0
 800764c:	d002      	beq.n	8007654 <f_open+0x38c>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2200      	movs	r2, #0
 8007652:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007654:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007658:	4618      	mov	r0, r3
 800765a:	3768      	adds	r7, #104	; 0x68
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b08e      	sub	sp, #56	; 0x38
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	607a      	str	r2, [r7, #4]
 800766c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	2200      	movs	r2, #0
 8007676:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f107 0214 	add.w	r2, r7, #20
 800767e:	4611      	mov	r1, r2
 8007680:	4618      	mov	r0, r3
 8007682:	f7ff fda5 	bl	80071d0 <validate>
 8007686:	4603      	mov	r3, r0
 8007688:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800768c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007690:	2b00      	cmp	r3, #0
 8007692:	d107      	bne.n	80076a4 <f_read+0x44>
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	7d5b      	ldrb	r3, [r3, #21]
 8007698:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800769c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d002      	beq.n	80076aa <f_read+0x4a>
 80076a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80076a8:	e135      	b.n	8007916 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	7d1b      	ldrb	r3, [r3, #20]
 80076ae:	f003 0301 	and.w	r3, r3, #1
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d101      	bne.n	80076ba <f_read+0x5a>
 80076b6:	2307      	movs	r3, #7
 80076b8:	e12d      	b.n	8007916 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	68da      	ldr	r2, [r3, #12]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	699b      	ldr	r3, [r3, #24]
 80076c2:	1ad3      	subs	r3, r2, r3
 80076c4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	6a3b      	ldr	r3, [r7, #32]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	f240 811e 	bls.w	800790c <f_read+0x2ac>
 80076d0:	6a3b      	ldr	r3, [r7, #32]
 80076d2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80076d4:	e11a      	b.n	800790c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	699b      	ldr	r3, [r3, #24]
 80076da:	697a      	ldr	r2, [r7, #20]
 80076dc:	8992      	ldrh	r2, [r2, #12]
 80076de:	fbb3 f1f2 	udiv	r1, r3, r2
 80076e2:	fb01 f202 	mul.w	r2, r1, r2
 80076e6:	1a9b      	subs	r3, r3, r2
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	f040 80d5 	bne.w	8007898 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	699b      	ldr	r3, [r3, #24]
 80076f2:	697a      	ldr	r2, [r7, #20]
 80076f4:	8992      	ldrh	r2, [r2, #12]
 80076f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80076fa:	697a      	ldr	r2, [r7, #20]
 80076fc:	8952      	ldrh	r2, [r2, #10]
 80076fe:	3a01      	subs	r2, #1
 8007700:	4013      	ands	r3, r2
 8007702:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d12f      	bne.n	800776a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	699b      	ldr	r3, [r3, #24]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d103      	bne.n	800771a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	633b      	str	r3, [r7, #48]	; 0x30
 8007718:	e013      	b.n	8007742 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800771e:	2b00      	cmp	r3, #0
 8007720:	d007      	beq.n	8007732 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	699b      	ldr	r3, [r3, #24]
 8007726:	4619      	mov	r1, r3
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f7fe faa5 	bl	8005c78 <clmt_clust>
 800772e:	6338      	str	r0, [r7, #48]	; 0x30
 8007730:	e007      	b.n	8007742 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	69db      	ldr	r3, [r3, #28]
 8007738:	4619      	mov	r1, r3
 800773a:	4610      	mov	r0, r2
 800773c:	f7fd ffaf 	bl	800569e <get_fat>
 8007740:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007744:	2b01      	cmp	r3, #1
 8007746:	d804      	bhi.n	8007752 <f_read+0xf2>
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2202      	movs	r2, #2
 800774c:	755a      	strb	r2, [r3, #21]
 800774e:	2302      	movs	r3, #2
 8007750:	e0e1      	b.n	8007916 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007758:	d104      	bne.n	8007764 <f_read+0x104>
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2201      	movs	r2, #1
 800775e:	755a      	strb	r2, [r3, #21]
 8007760:	2301      	movs	r3, #1
 8007762:	e0d8      	b.n	8007916 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007768:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800776a:	697a      	ldr	r2, [r7, #20]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	69db      	ldr	r3, [r3, #28]
 8007770:	4619      	mov	r1, r3
 8007772:	4610      	mov	r0, r2
 8007774:	f7fd ff74 	bl	8005660 <clust2sect>
 8007778:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d104      	bne.n	800778a <f_read+0x12a>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2202      	movs	r2, #2
 8007784:	755a      	strb	r2, [r3, #21]
 8007786:	2302      	movs	r3, #2
 8007788:	e0c5      	b.n	8007916 <f_read+0x2b6>
			sect += csect;
 800778a:	69ba      	ldr	r2, [r7, #24]
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	4413      	add	r3, r2
 8007790:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	899b      	ldrh	r3, [r3, #12]
 8007796:	461a      	mov	r2, r3
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	fbb3 f3f2 	udiv	r3, r3, r2
 800779e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80077a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d041      	beq.n	800782a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80077a6:	69fa      	ldr	r2, [r7, #28]
 80077a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077aa:	4413      	add	r3, r2
 80077ac:	697a      	ldr	r2, [r7, #20]
 80077ae:	8952      	ldrh	r2, [r2, #10]
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d905      	bls.n	80077c0 <f_read+0x160>
					cc = fs->csize - csect;
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	895b      	ldrh	r3, [r3, #10]
 80077b8:	461a      	mov	r2, r3
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	1ad3      	subs	r3, r2, r3
 80077be:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	7858      	ldrb	r0, [r3, #1]
 80077c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c6:	69ba      	ldr	r2, [r7, #24]
 80077c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80077ca:	f7fd fb9d 	bl	8004f08 <disk_read>
 80077ce:	4603      	mov	r3, r0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d004      	beq.n	80077de <f_read+0x17e>
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2201      	movs	r2, #1
 80077d8:	755a      	strb	r2, [r3, #21]
 80077da:	2301      	movs	r3, #1
 80077dc:	e09b      	b.n	8007916 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	7d1b      	ldrb	r3, [r3, #20]
 80077e2:	b25b      	sxtb	r3, r3
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	da18      	bge.n	800781a <f_read+0x1ba>
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6a1a      	ldr	r2, [r3, #32]
 80077ec:	69bb      	ldr	r3, [r7, #24]
 80077ee:	1ad3      	subs	r3, r2, r3
 80077f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d911      	bls.n	800781a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6a1a      	ldr	r2, [r3, #32]
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	1ad3      	subs	r3, r2, r3
 80077fe:	697a      	ldr	r2, [r7, #20]
 8007800:	8992      	ldrh	r2, [r2, #12]
 8007802:	fb02 f303 	mul.w	r3, r2, r3
 8007806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007808:	18d0      	adds	r0, r2, r3
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	899b      	ldrh	r3, [r3, #12]
 8007814:	461a      	mov	r2, r3
 8007816:	f7fd fc57 	bl	80050c8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	899b      	ldrh	r3, [r3, #12]
 800781e:	461a      	mov	r2, r3
 8007820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007822:	fb02 f303 	mul.w	r3, r2, r3
 8007826:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8007828:	e05c      	b.n	80078e4 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6a1b      	ldr	r3, [r3, #32]
 800782e:	69ba      	ldr	r2, [r7, #24]
 8007830:	429a      	cmp	r2, r3
 8007832:	d02e      	beq.n	8007892 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	7d1b      	ldrb	r3, [r3, #20]
 8007838:	b25b      	sxtb	r3, r3
 800783a:	2b00      	cmp	r3, #0
 800783c:	da18      	bge.n	8007870 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	7858      	ldrb	r0, [r3, #1]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6a1a      	ldr	r2, [r3, #32]
 800784c:	2301      	movs	r3, #1
 800784e:	f7fd fb7b 	bl	8004f48 <disk_write>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d004      	beq.n	8007862 <f_read+0x202>
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2201      	movs	r2, #1
 800785c:	755a      	strb	r2, [r3, #21]
 800785e:	2301      	movs	r3, #1
 8007860:	e059      	b.n	8007916 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	7d1b      	ldrb	r3, [r3, #20]
 8007866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800786a:	b2da      	uxtb	r2, r3
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	7858      	ldrb	r0, [r3, #1]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800787a:	2301      	movs	r3, #1
 800787c:	69ba      	ldr	r2, [r7, #24]
 800787e:	f7fd fb43 	bl	8004f08 <disk_read>
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d004      	beq.n	8007892 <f_read+0x232>
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2201      	movs	r2, #1
 800788c:	755a      	strb	r2, [r3, #21]
 800788e:	2301      	movs	r3, #1
 8007890:	e041      	b.n	8007916 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	69ba      	ldr	r2, [r7, #24]
 8007896:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	899b      	ldrh	r3, [r3, #12]
 800789c:	4618      	mov	r0, r3
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	699b      	ldr	r3, [r3, #24]
 80078a2:	697a      	ldr	r2, [r7, #20]
 80078a4:	8992      	ldrh	r2, [r2, #12]
 80078a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80078aa:	fb01 f202 	mul.w	r2, r1, r2
 80078ae:	1a9b      	subs	r3, r3, r2
 80078b0:	1ac3      	subs	r3, r0, r3
 80078b2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80078b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d901      	bls.n	80078c0 <f_read+0x260>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	699b      	ldr	r3, [r3, #24]
 80078ca:	697a      	ldr	r2, [r7, #20]
 80078cc:	8992      	ldrh	r2, [r2, #12]
 80078ce:	fbb3 f0f2 	udiv	r0, r3, r2
 80078d2:	fb00 f202 	mul.w	r2, r0, r2
 80078d6:	1a9b      	subs	r3, r3, r2
 80078d8:	440b      	add	r3, r1
 80078da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078dc:	4619      	mov	r1, r3
 80078de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078e0:	f7fd fbf2 	bl	80050c8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80078e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e8:	4413      	add	r3, r2
 80078ea:	627b      	str	r3, [r7, #36]	; 0x24
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	699a      	ldr	r2, [r3, #24]
 80078f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f2:	441a      	add	r2, r3
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	619a      	str	r2, [r3, #24]
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078fe:	441a      	add	r2, r3
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	601a      	str	r2, [r3, #0]
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2b00      	cmp	r3, #0
 8007910:	f47f aee1 	bne.w	80076d6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3738      	adds	r7, #56	; 0x38
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b086      	sub	sp, #24
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f107 0208 	add.w	r2, r7, #8
 800792c:	4611      	mov	r1, r2
 800792e:	4618      	mov	r0, r3
 8007930:	f7ff fc4e 	bl	80071d0 <validate>
 8007934:	4603      	mov	r3, r0
 8007936:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007938:	7dfb      	ldrb	r3, [r7, #23]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d168      	bne.n	8007a10 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	7d1b      	ldrb	r3, [r3, #20]
 8007942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007946:	2b00      	cmp	r3, #0
 8007948:	d062      	beq.n	8007a10 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	7d1b      	ldrb	r3, [r3, #20]
 800794e:	b25b      	sxtb	r3, r3
 8007950:	2b00      	cmp	r3, #0
 8007952:	da15      	bge.n	8007980 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	7858      	ldrb	r0, [r3, #1]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6a1a      	ldr	r2, [r3, #32]
 8007962:	2301      	movs	r3, #1
 8007964:	f7fd faf0 	bl	8004f48 <disk_write>
 8007968:	4603      	mov	r3, r0
 800796a:	2b00      	cmp	r3, #0
 800796c:	d001      	beq.n	8007972 <f_sync+0x54>
 800796e:	2301      	movs	r3, #1
 8007970:	e04f      	b.n	8007a12 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	7d1b      	ldrb	r3, [r3, #20]
 8007976:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800797a:	b2da      	uxtb	r2, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007980:	f7fd fa20 	bl	8004dc4 <get_fattime>
 8007984:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007986:	68ba      	ldr	r2, [r7, #8]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798c:	4619      	mov	r1, r3
 800798e:	4610      	mov	r0, r2
 8007990:	f7fd fdc8 	bl	8005524 <move_window>
 8007994:	4603      	mov	r3, r0
 8007996:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007998:	7dfb      	ldrb	r3, [r7, #23]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d138      	bne.n	8007a10 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	330b      	adds	r3, #11
 80079a8:	781a      	ldrb	r2, [r3, #0]
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	330b      	adds	r3, #11
 80079ae:	f042 0220 	orr.w	r2, r2, #32
 80079b2:	b2d2      	uxtb	r2, r2
 80079b4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6818      	ldr	r0, [r3, #0]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	461a      	mov	r2, r3
 80079c0:	68f9      	ldr	r1, [r7, #12]
 80079c2:	f7fe fb56 	bl	8006072 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f103 021c 	add.w	r2, r3, #28
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	4619      	mov	r1, r3
 80079d2:	4610      	mov	r0, r2
 80079d4:	f7fd fb4c 	bl	8005070 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	3316      	adds	r3, #22
 80079dc:	6939      	ldr	r1, [r7, #16]
 80079de:	4618      	mov	r0, r3
 80079e0:	f7fd fb46 	bl	8005070 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	3312      	adds	r3, #18
 80079e8:	2100      	movs	r1, #0
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7fd fb25 	bl	800503a <st_word>
					fs->wflag = 1;
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	2201      	movs	r2, #1
 80079f4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	4618      	mov	r0, r3
 80079fa:	f7fd fdc1 	bl	8005580 <sync_fs>
 80079fe:	4603      	mov	r3, r0
 8007a00:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	7d1b      	ldrb	r3, [r3, #20]
 8007a06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a0a:	b2da      	uxtb	r2, r3
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007a10:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3718      	adds	r7, #24
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b084      	sub	sp, #16
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f7ff ff7b 	bl	800791e <f_sync>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007a2c:	7bfb      	ldrb	r3, [r7, #15]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d118      	bne.n	8007a64 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f107 0208 	add.w	r2, r7, #8
 8007a38:	4611      	mov	r1, r2
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f7ff fbc8 	bl	80071d0 <validate>
 8007a40:	4603      	mov	r3, r0
 8007a42:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007a44:	7bfb      	ldrb	r3, [r7, #15]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d10c      	bne.n	8007a64 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	691b      	ldr	r3, [r3, #16]
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f7fd fcc4 	bl	80053dc <dec_lock>
 8007a54:	4603      	mov	r3, r0
 8007a56:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007a58:	7bfb      	ldrb	r3, [r7, #15]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d102      	bne.n	8007a64 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3710      	adds	r7, #16
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
	...

08007a70 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b087      	sub	sp, #28
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007a82:	2300      	movs	r3, #0
 8007a84:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007a86:	4b1f      	ldr	r3, [pc, #124]	; (8007b04 <FATFS_LinkDriverEx+0x94>)
 8007a88:	7a5b      	ldrb	r3, [r3, #9]
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d131      	bne.n	8007af4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007a90:	4b1c      	ldr	r3, [pc, #112]	; (8007b04 <FATFS_LinkDriverEx+0x94>)
 8007a92:	7a5b      	ldrb	r3, [r3, #9]
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	461a      	mov	r2, r3
 8007a98:	4b1a      	ldr	r3, [pc, #104]	; (8007b04 <FATFS_LinkDriverEx+0x94>)
 8007a9a:	2100      	movs	r1, #0
 8007a9c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007a9e:	4b19      	ldr	r3, [pc, #100]	; (8007b04 <FATFS_LinkDriverEx+0x94>)
 8007aa0:	7a5b      	ldrb	r3, [r3, #9]
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	4a17      	ldr	r2, [pc, #92]	; (8007b04 <FATFS_LinkDriverEx+0x94>)
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	4413      	add	r3, r2
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007aae:	4b15      	ldr	r3, [pc, #84]	; (8007b04 <FATFS_LinkDriverEx+0x94>)
 8007ab0:	7a5b      	ldrb	r3, [r3, #9]
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	4b13      	ldr	r3, [pc, #76]	; (8007b04 <FATFS_LinkDriverEx+0x94>)
 8007ab8:	4413      	add	r3, r2
 8007aba:	79fa      	ldrb	r2, [r7, #7]
 8007abc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007abe:	4b11      	ldr	r3, [pc, #68]	; (8007b04 <FATFS_LinkDriverEx+0x94>)
 8007ac0:	7a5b      	ldrb	r3, [r3, #9]
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	1c5a      	adds	r2, r3, #1
 8007ac6:	b2d1      	uxtb	r1, r2
 8007ac8:	4a0e      	ldr	r2, [pc, #56]	; (8007b04 <FATFS_LinkDriverEx+0x94>)
 8007aca:	7251      	strb	r1, [r2, #9]
 8007acc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007ace:	7dbb      	ldrb	r3, [r7, #22]
 8007ad0:	3330      	adds	r3, #48	; 0x30
 8007ad2:	b2da      	uxtb	r2, r3
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	3301      	adds	r3, #1
 8007adc:	223a      	movs	r2, #58	; 0x3a
 8007ade:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	3302      	adds	r3, #2
 8007ae4:	222f      	movs	r2, #47	; 0x2f
 8007ae6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	3303      	adds	r3, #3
 8007aec:	2200      	movs	r2, #0
 8007aee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007af0:	2300      	movs	r3, #0
 8007af2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007af4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	371c      	adds	r7, #28
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	20003458 	.word	0x20003458

08007b08 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007b12:	2200      	movs	r2, #0
 8007b14:	6839      	ldr	r1, [r7, #0]
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f7ff ffaa 	bl	8007a70 <FATFS_LinkDriverEx>
 8007b1c:	4603      	mov	r3, r0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3708      	adds	r7, #8
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
	...

08007b28 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	4603      	mov	r3, r0
 8007b30:	6039      	str	r1, [r7, #0]
 8007b32:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007b34:	88fb      	ldrh	r3, [r7, #6]
 8007b36:	2b7f      	cmp	r3, #127	; 0x7f
 8007b38:	d802      	bhi.n	8007b40 <ff_convert+0x18>
		c = chr;
 8007b3a:	88fb      	ldrh	r3, [r7, #6]
 8007b3c:	81fb      	strh	r3, [r7, #14]
 8007b3e:	e025      	b.n	8007b8c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d00b      	beq.n	8007b5e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007b46:	88fb      	ldrh	r3, [r7, #6]
 8007b48:	2bff      	cmp	r3, #255	; 0xff
 8007b4a:	d805      	bhi.n	8007b58 <ff_convert+0x30>
 8007b4c:	88fb      	ldrh	r3, [r7, #6]
 8007b4e:	3b80      	subs	r3, #128	; 0x80
 8007b50:	4a12      	ldr	r2, [pc, #72]	; (8007b9c <ff_convert+0x74>)
 8007b52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b56:	e000      	b.n	8007b5a <ff_convert+0x32>
 8007b58:	2300      	movs	r3, #0
 8007b5a:	81fb      	strh	r3, [r7, #14]
 8007b5c:	e016      	b.n	8007b8c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8007b5e:	2300      	movs	r3, #0
 8007b60:	81fb      	strh	r3, [r7, #14]
 8007b62:	e009      	b.n	8007b78 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007b64:	89fb      	ldrh	r3, [r7, #14]
 8007b66:	4a0d      	ldr	r2, [pc, #52]	; (8007b9c <ff_convert+0x74>)
 8007b68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b6c:	88fa      	ldrh	r2, [r7, #6]
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d006      	beq.n	8007b80 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8007b72:	89fb      	ldrh	r3, [r7, #14]
 8007b74:	3301      	adds	r3, #1
 8007b76:	81fb      	strh	r3, [r7, #14]
 8007b78:	89fb      	ldrh	r3, [r7, #14]
 8007b7a:	2b7f      	cmp	r3, #127	; 0x7f
 8007b7c:	d9f2      	bls.n	8007b64 <ff_convert+0x3c>
 8007b7e:	e000      	b.n	8007b82 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007b80:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8007b82:	89fb      	ldrh	r3, [r7, #14]
 8007b84:	3380      	adds	r3, #128	; 0x80
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007b8c:	89fb      	ldrh	r3, [r7, #14]
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3714      	adds	r7, #20
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	08009244 	.word	0x08009244

08007ba0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b087      	sub	sp, #28
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8007baa:	88fb      	ldrh	r3, [r7, #6]
 8007bac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bb0:	d201      	bcs.n	8007bb6 <ff_wtoupper+0x16>
 8007bb2:	4b3e      	ldr	r3, [pc, #248]	; (8007cac <ff_wtoupper+0x10c>)
 8007bb4:	e000      	b.n	8007bb8 <ff_wtoupper+0x18>
 8007bb6:	4b3e      	ldr	r3, [pc, #248]	; (8007cb0 <ff_wtoupper+0x110>)
 8007bb8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	1c9a      	adds	r2, r3, #2
 8007bbe:	617a      	str	r2, [r7, #20]
 8007bc0:	881b      	ldrh	r3, [r3, #0]
 8007bc2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8007bc4:	8a7b      	ldrh	r3, [r7, #18]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d068      	beq.n	8007c9c <ff_wtoupper+0xfc>
 8007bca:	88fa      	ldrh	r2, [r7, #6]
 8007bcc:	8a7b      	ldrh	r3, [r7, #18]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d364      	bcc.n	8007c9c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	1c9a      	adds	r2, r3, #2
 8007bd6:	617a      	str	r2, [r7, #20]
 8007bd8:	881b      	ldrh	r3, [r3, #0]
 8007bda:	823b      	strh	r3, [r7, #16]
 8007bdc:	8a3b      	ldrh	r3, [r7, #16]
 8007bde:	0a1b      	lsrs	r3, r3, #8
 8007be0:	81fb      	strh	r3, [r7, #14]
 8007be2:	8a3b      	ldrh	r3, [r7, #16]
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8007be8:	88fa      	ldrh	r2, [r7, #6]
 8007bea:	8a79      	ldrh	r1, [r7, #18]
 8007bec:	8a3b      	ldrh	r3, [r7, #16]
 8007bee:	440b      	add	r3, r1
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	da49      	bge.n	8007c88 <ff_wtoupper+0xe8>
			switch (cmd) {
 8007bf4:	89fb      	ldrh	r3, [r7, #14]
 8007bf6:	2b08      	cmp	r3, #8
 8007bf8:	d84f      	bhi.n	8007c9a <ff_wtoupper+0xfa>
 8007bfa:	a201      	add	r2, pc, #4	; (adr r2, 8007c00 <ff_wtoupper+0x60>)
 8007bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c00:	08007c25 	.word	0x08007c25
 8007c04:	08007c37 	.word	0x08007c37
 8007c08:	08007c4d 	.word	0x08007c4d
 8007c0c:	08007c55 	.word	0x08007c55
 8007c10:	08007c5d 	.word	0x08007c5d
 8007c14:	08007c65 	.word	0x08007c65
 8007c18:	08007c6d 	.word	0x08007c6d
 8007c1c:	08007c75 	.word	0x08007c75
 8007c20:	08007c7d 	.word	0x08007c7d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007c24:	88fa      	ldrh	r2, [r7, #6]
 8007c26:	8a7b      	ldrh	r3, [r7, #18]
 8007c28:	1ad3      	subs	r3, r2, r3
 8007c2a:	005b      	lsls	r3, r3, #1
 8007c2c:	697a      	ldr	r2, [r7, #20]
 8007c2e:	4413      	add	r3, r2
 8007c30:	881b      	ldrh	r3, [r3, #0]
 8007c32:	80fb      	strh	r3, [r7, #6]
 8007c34:	e027      	b.n	8007c86 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8007c36:	88fa      	ldrh	r2, [r7, #6]
 8007c38:	8a7b      	ldrh	r3, [r7, #18]
 8007c3a:	1ad3      	subs	r3, r2, r3
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	f003 0301 	and.w	r3, r3, #1
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	88fa      	ldrh	r2, [r7, #6]
 8007c46:	1ad3      	subs	r3, r2, r3
 8007c48:	80fb      	strh	r3, [r7, #6]
 8007c4a:	e01c      	b.n	8007c86 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007c4c:	88fb      	ldrh	r3, [r7, #6]
 8007c4e:	3b10      	subs	r3, #16
 8007c50:	80fb      	strh	r3, [r7, #6]
 8007c52:	e018      	b.n	8007c86 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007c54:	88fb      	ldrh	r3, [r7, #6]
 8007c56:	3b20      	subs	r3, #32
 8007c58:	80fb      	strh	r3, [r7, #6]
 8007c5a:	e014      	b.n	8007c86 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007c5c:	88fb      	ldrh	r3, [r7, #6]
 8007c5e:	3b30      	subs	r3, #48	; 0x30
 8007c60:	80fb      	strh	r3, [r7, #6]
 8007c62:	e010      	b.n	8007c86 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8007c64:	88fb      	ldrh	r3, [r7, #6]
 8007c66:	3b1a      	subs	r3, #26
 8007c68:	80fb      	strh	r3, [r7, #6]
 8007c6a:	e00c      	b.n	8007c86 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007c6c:	88fb      	ldrh	r3, [r7, #6]
 8007c6e:	3308      	adds	r3, #8
 8007c70:	80fb      	strh	r3, [r7, #6]
 8007c72:	e008      	b.n	8007c86 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8007c74:	88fb      	ldrh	r3, [r7, #6]
 8007c76:	3b50      	subs	r3, #80	; 0x50
 8007c78:	80fb      	strh	r3, [r7, #6]
 8007c7a:	e004      	b.n	8007c86 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8007c7c:	88fb      	ldrh	r3, [r7, #6]
 8007c7e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8007c82:	80fb      	strh	r3, [r7, #6]
 8007c84:	bf00      	nop
			}
			break;
 8007c86:	e008      	b.n	8007c9a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8007c88:	89fb      	ldrh	r3, [r7, #14]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d195      	bne.n	8007bba <ff_wtoupper+0x1a>
 8007c8e:	8a3b      	ldrh	r3, [r7, #16]
 8007c90:	005b      	lsls	r3, r3, #1
 8007c92:	697a      	ldr	r2, [r7, #20]
 8007c94:	4413      	add	r3, r2
 8007c96:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8007c98:	e78f      	b.n	8007bba <ff_wtoupper+0x1a>
			break;
 8007c9a:	bf00      	nop
	}

	return chr;
 8007c9c:	88fb      	ldrh	r3, [r7, #6]
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	371c      	adds	r7, #28
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr
 8007caa:	bf00      	nop
 8007cac:	08009344 	.word	0x08009344
 8007cb0:	08009538 	.word	0x08009538

08007cb4 <__errno>:
 8007cb4:	4b01      	ldr	r3, [pc, #4]	; (8007cbc <__errno+0x8>)
 8007cb6:	6818      	ldr	r0, [r3, #0]
 8007cb8:	4770      	bx	lr
 8007cba:	bf00      	nop
 8007cbc:	20000028 	.word	0x20000028

08007cc0 <__libc_init_array>:
 8007cc0:	b570      	push	{r4, r5, r6, lr}
 8007cc2:	4d0d      	ldr	r5, [pc, #52]	; (8007cf8 <__libc_init_array+0x38>)
 8007cc4:	4c0d      	ldr	r4, [pc, #52]	; (8007cfc <__libc_init_array+0x3c>)
 8007cc6:	1b64      	subs	r4, r4, r5
 8007cc8:	10a4      	asrs	r4, r4, #2
 8007cca:	2600      	movs	r6, #0
 8007ccc:	42a6      	cmp	r6, r4
 8007cce:	d109      	bne.n	8007ce4 <__libc_init_array+0x24>
 8007cd0:	4d0b      	ldr	r5, [pc, #44]	; (8007d00 <__libc_init_array+0x40>)
 8007cd2:	4c0c      	ldr	r4, [pc, #48]	; (8007d04 <__libc_init_array+0x44>)
 8007cd4:	f001 f824 	bl	8008d20 <_init>
 8007cd8:	1b64      	subs	r4, r4, r5
 8007cda:	10a4      	asrs	r4, r4, #2
 8007cdc:	2600      	movs	r6, #0
 8007cde:	42a6      	cmp	r6, r4
 8007ce0:	d105      	bne.n	8007cee <__libc_init_array+0x2e>
 8007ce2:	bd70      	pop	{r4, r5, r6, pc}
 8007ce4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ce8:	4798      	blx	r3
 8007cea:	3601      	adds	r6, #1
 8007cec:	e7ee      	b.n	8007ccc <__libc_init_array+0xc>
 8007cee:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cf2:	4798      	blx	r3
 8007cf4:	3601      	adds	r6, #1
 8007cf6:	e7f2      	b.n	8007cde <__libc_init_array+0x1e>
 8007cf8:	08009694 	.word	0x08009694
 8007cfc:	08009694 	.word	0x08009694
 8007d00:	08009694 	.word	0x08009694
 8007d04:	08009698 	.word	0x08009698

08007d08 <memset>:
 8007d08:	4402      	add	r2, r0
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d100      	bne.n	8007d12 <memset+0xa>
 8007d10:	4770      	bx	lr
 8007d12:	f803 1b01 	strb.w	r1, [r3], #1
 8007d16:	e7f9      	b.n	8007d0c <memset+0x4>

08007d18 <iprintf>:
 8007d18:	b40f      	push	{r0, r1, r2, r3}
 8007d1a:	4b0a      	ldr	r3, [pc, #40]	; (8007d44 <iprintf+0x2c>)
 8007d1c:	b513      	push	{r0, r1, r4, lr}
 8007d1e:	681c      	ldr	r4, [r3, #0]
 8007d20:	b124      	cbz	r4, 8007d2c <iprintf+0x14>
 8007d22:	69a3      	ldr	r3, [r4, #24]
 8007d24:	b913      	cbnz	r3, 8007d2c <iprintf+0x14>
 8007d26:	4620      	mov	r0, r4
 8007d28:	f000 fa5e 	bl	80081e8 <__sinit>
 8007d2c:	ab05      	add	r3, sp, #20
 8007d2e:	9a04      	ldr	r2, [sp, #16]
 8007d30:	68a1      	ldr	r1, [r4, #8]
 8007d32:	9301      	str	r3, [sp, #4]
 8007d34:	4620      	mov	r0, r4
 8007d36:	f000 fc67 	bl	8008608 <_vfiprintf_r>
 8007d3a:	b002      	add	sp, #8
 8007d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d40:	b004      	add	sp, #16
 8007d42:	4770      	bx	lr
 8007d44:	20000028 	.word	0x20000028

08007d48 <_puts_r>:
 8007d48:	b570      	push	{r4, r5, r6, lr}
 8007d4a:	460e      	mov	r6, r1
 8007d4c:	4605      	mov	r5, r0
 8007d4e:	b118      	cbz	r0, 8007d58 <_puts_r+0x10>
 8007d50:	6983      	ldr	r3, [r0, #24]
 8007d52:	b90b      	cbnz	r3, 8007d58 <_puts_r+0x10>
 8007d54:	f000 fa48 	bl	80081e8 <__sinit>
 8007d58:	69ab      	ldr	r3, [r5, #24]
 8007d5a:	68ac      	ldr	r4, [r5, #8]
 8007d5c:	b913      	cbnz	r3, 8007d64 <_puts_r+0x1c>
 8007d5e:	4628      	mov	r0, r5
 8007d60:	f000 fa42 	bl	80081e8 <__sinit>
 8007d64:	4b2c      	ldr	r3, [pc, #176]	; (8007e18 <_puts_r+0xd0>)
 8007d66:	429c      	cmp	r4, r3
 8007d68:	d120      	bne.n	8007dac <_puts_r+0x64>
 8007d6a:	686c      	ldr	r4, [r5, #4]
 8007d6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d6e:	07db      	lsls	r3, r3, #31
 8007d70:	d405      	bmi.n	8007d7e <_puts_r+0x36>
 8007d72:	89a3      	ldrh	r3, [r4, #12]
 8007d74:	0598      	lsls	r0, r3, #22
 8007d76:	d402      	bmi.n	8007d7e <_puts_r+0x36>
 8007d78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d7a:	f000 fad3 	bl	8008324 <__retarget_lock_acquire_recursive>
 8007d7e:	89a3      	ldrh	r3, [r4, #12]
 8007d80:	0719      	lsls	r1, r3, #28
 8007d82:	d51d      	bpl.n	8007dc0 <_puts_r+0x78>
 8007d84:	6923      	ldr	r3, [r4, #16]
 8007d86:	b1db      	cbz	r3, 8007dc0 <_puts_r+0x78>
 8007d88:	3e01      	subs	r6, #1
 8007d8a:	68a3      	ldr	r3, [r4, #8]
 8007d8c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007d90:	3b01      	subs	r3, #1
 8007d92:	60a3      	str	r3, [r4, #8]
 8007d94:	bb39      	cbnz	r1, 8007de6 <_puts_r+0x9e>
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	da38      	bge.n	8007e0c <_puts_r+0xc4>
 8007d9a:	4622      	mov	r2, r4
 8007d9c:	210a      	movs	r1, #10
 8007d9e:	4628      	mov	r0, r5
 8007da0:	f000 f848 	bl	8007e34 <__swbuf_r>
 8007da4:	3001      	adds	r0, #1
 8007da6:	d011      	beq.n	8007dcc <_puts_r+0x84>
 8007da8:	250a      	movs	r5, #10
 8007daa:	e011      	b.n	8007dd0 <_puts_r+0x88>
 8007dac:	4b1b      	ldr	r3, [pc, #108]	; (8007e1c <_puts_r+0xd4>)
 8007dae:	429c      	cmp	r4, r3
 8007db0:	d101      	bne.n	8007db6 <_puts_r+0x6e>
 8007db2:	68ac      	ldr	r4, [r5, #8]
 8007db4:	e7da      	b.n	8007d6c <_puts_r+0x24>
 8007db6:	4b1a      	ldr	r3, [pc, #104]	; (8007e20 <_puts_r+0xd8>)
 8007db8:	429c      	cmp	r4, r3
 8007dba:	bf08      	it	eq
 8007dbc:	68ec      	ldreq	r4, [r5, #12]
 8007dbe:	e7d5      	b.n	8007d6c <_puts_r+0x24>
 8007dc0:	4621      	mov	r1, r4
 8007dc2:	4628      	mov	r0, r5
 8007dc4:	f000 f888 	bl	8007ed8 <__swsetup_r>
 8007dc8:	2800      	cmp	r0, #0
 8007dca:	d0dd      	beq.n	8007d88 <_puts_r+0x40>
 8007dcc:	f04f 35ff 	mov.w	r5, #4294967295
 8007dd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007dd2:	07da      	lsls	r2, r3, #31
 8007dd4:	d405      	bmi.n	8007de2 <_puts_r+0x9a>
 8007dd6:	89a3      	ldrh	r3, [r4, #12]
 8007dd8:	059b      	lsls	r3, r3, #22
 8007dda:	d402      	bmi.n	8007de2 <_puts_r+0x9a>
 8007ddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dde:	f000 faa2 	bl	8008326 <__retarget_lock_release_recursive>
 8007de2:	4628      	mov	r0, r5
 8007de4:	bd70      	pop	{r4, r5, r6, pc}
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	da04      	bge.n	8007df4 <_puts_r+0xac>
 8007dea:	69a2      	ldr	r2, [r4, #24]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	dc06      	bgt.n	8007dfe <_puts_r+0xb6>
 8007df0:	290a      	cmp	r1, #10
 8007df2:	d004      	beq.n	8007dfe <_puts_r+0xb6>
 8007df4:	6823      	ldr	r3, [r4, #0]
 8007df6:	1c5a      	adds	r2, r3, #1
 8007df8:	6022      	str	r2, [r4, #0]
 8007dfa:	7019      	strb	r1, [r3, #0]
 8007dfc:	e7c5      	b.n	8007d8a <_puts_r+0x42>
 8007dfe:	4622      	mov	r2, r4
 8007e00:	4628      	mov	r0, r5
 8007e02:	f000 f817 	bl	8007e34 <__swbuf_r>
 8007e06:	3001      	adds	r0, #1
 8007e08:	d1bf      	bne.n	8007d8a <_puts_r+0x42>
 8007e0a:	e7df      	b.n	8007dcc <_puts_r+0x84>
 8007e0c:	6823      	ldr	r3, [r4, #0]
 8007e0e:	250a      	movs	r5, #10
 8007e10:	1c5a      	adds	r2, r3, #1
 8007e12:	6022      	str	r2, [r4, #0]
 8007e14:	701d      	strb	r5, [r3, #0]
 8007e16:	e7db      	b.n	8007dd0 <_puts_r+0x88>
 8007e18:	08009618 	.word	0x08009618
 8007e1c:	08009638 	.word	0x08009638
 8007e20:	080095f8 	.word	0x080095f8

08007e24 <puts>:
 8007e24:	4b02      	ldr	r3, [pc, #8]	; (8007e30 <puts+0xc>)
 8007e26:	4601      	mov	r1, r0
 8007e28:	6818      	ldr	r0, [r3, #0]
 8007e2a:	f7ff bf8d 	b.w	8007d48 <_puts_r>
 8007e2e:	bf00      	nop
 8007e30:	20000028 	.word	0x20000028

08007e34 <__swbuf_r>:
 8007e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e36:	460e      	mov	r6, r1
 8007e38:	4614      	mov	r4, r2
 8007e3a:	4605      	mov	r5, r0
 8007e3c:	b118      	cbz	r0, 8007e46 <__swbuf_r+0x12>
 8007e3e:	6983      	ldr	r3, [r0, #24]
 8007e40:	b90b      	cbnz	r3, 8007e46 <__swbuf_r+0x12>
 8007e42:	f000 f9d1 	bl	80081e8 <__sinit>
 8007e46:	4b21      	ldr	r3, [pc, #132]	; (8007ecc <__swbuf_r+0x98>)
 8007e48:	429c      	cmp	r4, r3
 8007e4a:	d12b      	bne.n	8007ea4 <__swbuf_r+0x70>
 8007e4c:	686c      	ldr	r4, [r5, #4]
 8007e4e:	69a3      	ldr	r3, [r4, #24]
 8007e50:	60a3      	str	r3, [r4, #8]
 8007e52:	89a3      	ldrh	r3, [r4, #12]
 8007e54:	071a      	lsls	r2, r3, #28
 8007e56:	d52f      	bpl.n	8007eb8 <__swbuf_r+0x84>
 8007e58:	6923      	ldr	r3, [r4, #16]
 8007e5a:	b36b      	cbz	r3, 8007eb8 <__swbuf_r+0x84>
 8007e5c:	6923      	ldr	r3, [r4, #16]
 8007e5e:	6820      	ldr	r0, [r4, #0]
 8007e60:	1ac0      	subs	r0, r0, r3
 8007e62:	6963      	ldr	r3, [r4, #20]
 8007e64:	b2f6      	uxtb	r6, r6
 8007e66:	4283      	cmp	r3, r0
 8007e68:	4637      	mov	r7, r6
 8007e6a:	dc04      	bgt.n	8007e76 <__swbuf_r+0x42>
 8007e6c:	4621      	mov	r1, r4
 8007e6e:	4628      	mov	r0, r5
 8007e70:	f000 f926 	bl	80080c0 <_fflush_r>
 8007e74:	bb30      	cbnz	r0, 8007ec4 <__swbuf_r+0x90>
 8007e76:	68a3      	ldr	r3, [r4, #8]
 8007e78:	3b01      	subs	r3, #1
 8007e7a:	60a3      	str	r3, [r4, #8]
 8007e7c:	6823      	ldr	r3, [r4, #0]
 8007e7e:	1c5a      	adds	r2, r3, #1
 8007e80:	6022      	str	r2, [r4, #0]
 8007e82:	701e      	strb	r6, [r3, #0]
 8007e84:	6963      	ldr	r3, [r4, #20]
 8007e86:	3001      	adds	r0, #1
 8007e88:	4283      	cmp	r3, r0
 8007e8a:	d004      	beq.n	8007e96 <__swbuf_r+0x62>
 8007e8c:	89a3      	ldrh	r3, [r4, #12]
 8007e8e:	07db      	lsls	r3, r3, #31
 8007e90:	d506      	bpl.n	8007ea0 <__swbuf_r+0x6c>
 8007e92:	2e0a      	cmp	r6, #10
 8007e94:	d104      	bne.n	8007ea0 <__swbuf_r+0x6c>
 8007e96:	4621      	mov	r1, r4
 8007e98:	4628      	mov	r0, r5
 8007e9a:	f000 f911 	bl	80080c0 <_fflush_r>
 8007e9e:	b988      	cbnz	r0, 8007ec4 <__swbuf_r+0x90>
 8007ea0:	4638      	mov	r0, r7
 8007ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ea4:	4b0a      	ldr	r3, [pc, #40]	; (8007ed0 <__swbuf_r+0x9c>)
 8007ea6:	429c      	cmp	r4, r3
 8007ea8:	d101      	bne.n	8007eae <__swbuf_r+0x7a>
 8007eaa:	68ac      	ldr	r4, [r5, #8]
 8007eac:	e7cf      	b.n	8007e4e <__swbuf_r+0x1a>
 8007eae:	4b09      	ldr	r3, [pc, #36]	; (8007ed4 <__swbuf_r+0xa0>)
 8007eb0:	429c      	cmp	r4, r3
 8007eb2:	bf08      	it	eq
 8007eb4:	68ec      	ldreq	r4, [r5, #12]
 8007eb6:	e7ca      	b.n	8007e4e <__swbuf_r+0x1a>
 8007eb8:	4621      	mov	r1, r4
 8007eba:	4628      	mov	r0, r5
 8007ebc:	f000 f80c 	bl	8007ed8 <__swsetup_r>
 8007ec0:	2800      	cmp	r0, #0
 8007ec2:	d0cb      	beq.n	8007e5c <__swbuf_r+0x28>
 8007ec4:	f04f 37ff 	mov.w	r7, #4294967295
 8007ec8:	e7ea      	b.n	8007ea0 <__swbuf_r+0x6c>
 8007eca:	bf00      	nop
 8007ecc:	08009618 	.word	0x08009618
 8007ed0:	08009638 	.word	0x08009638
 8007ed4:	080095f8 	.word	0x080095f8

08007ed8 <__swsetup_r>:
 8007ed8:	4b32      	ldr	r3, [pc, #200]	; (8007fa4 <__swsetup_r+0xcc>)
 8007eda:	b570      	push	{r4, r5, r6, lr}
 8007edc:	681d      	ldr	r5, [r3, #0]
 8007ede:	4606      	mov	r6, r0
 8007ee0:	460c      	mov	r4, r1
 8007ee2:	b125      	cbz	r5, 8007eee <__swsetup_r+0x16>
 8007ee4:	69ab      	ldr	r3, [r5, #24]
 8007ee6:	b913      	cbnz	r3, 8007eee <__swsetup_r+0x16>
 8007ee8:	4628      	mov	r0, r5
 8007eea:	f000 f97d 	bl	80081e8 <__sinit>
 8007eee:	4b2e      	ldr	r3, [pc, #184]	; (8007fa8 <__swsetup_r+0xd0>)
 8007ef0:	429c      	cmp	r4, r3
 8007ef2:	d10f      	bne.n	8007f14 <__swsetup_r+0x3c>
 8007ef4:	686c      	ldr	r4, [r5, #4]
 8007ef6:	89a3      	ldrh	r3, [r4, #12]
 8007ef8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007efc:	0719      	lsls	r1, r3, #28
 8007efe:	d42c      	bmi.n	8007f5a <__swsetup_r+0x82>
 8007f00:	06dd      	lsls	r5, r3, #27
 8007f02:	d411      	bmi.n	8007f28 <__swsetup_r+0x50>
 8007f04:	2309      	movs	r3, #9
 8007f06:	6033      	str	r3, [r6, #0]
 8007f08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007f0c:	81a3      	strh	r3, [r4, #12]
 8007f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8007f12:	e03e      	b.n	8007f92 <__swsetup_r+0xba>
 8007f14:	4b25      	ldr	r3, [pc, #148]	; (8007fac <__swsetup_r+0xd4>)
 8007f16:	429c      	cmp	r4, r3
 8007f18:	d101      	bne.n	8007f1e <__swsetup_r+0x46>
 8007f1a:	68ac      	ldr	r4, [r5, #8]
 8007f1c:	e7eb      	b.n	8007ef6 <__swsetup_r+0x1e>
 8007f1e:	4b24      	ldr	r3, [pc, #144]	; (8007fb0 <__swsetup_r+0xd8>)
 8007f20:	429c      	cmp	r4, r3
 8007f22:	bf08      	it	eq
 8007f24:	68ec      	ldreq	r4, [r5, #12]
 8007f26:	e7e6      	b.n	8007ef6 <__swsetup_r+0x1e>
 8007f28:	0758      	lsls	r0, r3, #29
 8007f2a:	d512      	bpl.n	8007f52 <__swsetup_r+0x7a>
 8007f2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f2e:	b141      	cbz	r1, 8007f42 <__swsetup_r+0x6a>
 8007f30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f34:	4299      	cmp	r1, r3
 8007f36:	d002      	beq.n	8007f3e <__swsetup_r+0x66>
 8007f38:	4630      	mov	r0, r6
 8007f3a:	f000 fa5b 	bl	80083f4 <_free_r>
 8007f3e:	2300      	movs	r3, #0
 8007f40:	6363      	str	r3, [r4, #52]	; 0x34
 8007f42:	89a3      	ldrh	r3, [r4, #12]
 8007f44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007f48:	81a3      	strh	r3, [r4, #12]
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	6063      	str	r3, [r4, #4]
 8007f4e:	6923      	ldr	r3, [r4, #16]
 8007f50:	6023      	str	r3, [r4, #0]
 8007f52:	89a3      	ldrh	r3, [r4, #12]
 8007f54:	f043 0308 	orr.w	r3, r3, #8
 8007f58:	81a3      	strh	r3, [r4, #12]
 8007f5a:	6923      	ldr	r3, [r4, #16]
 8007f5c:	b94b      	cbnz	r3, 8007f72 <__swsetup_r+0x9a>
 8007f5e:	89a3      	ldrh	r3, [r4, #12]
 8007f60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007f64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f68:	d003      	beq.n	8007f72 <__swsetup_r+0x9a>
 8007f6a:	4621      	mov	r1, r4
 8007f6c:	4630      	mov	r0, r6
 8007f6e:	f000 fa01 	bl	8008374 <__smakebuf_r>
 8007f72:	89a0      	ldrh	r0, [r4, #12]
 8007f74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f78:	f010 0301 	ands.w	r3, r0, #1
 8007f7c:	d00a      	beq.n	8007f94 <__swsetup_r+0xbc>
 8007f7e:	2300      	movs	r3, #0
 8007f80:	60a3      	str	r3, [r4, #8]
 8007f82:	6963      	ldr	r3, [r4, #20]
 8007f84:	425b      	negs	r3, r3
 8007f86:	61a3      	str	r3, [r4, #24]
 8007f88:	6923      	ldr	r3, [r4, #16]
 8007f8a:	b943      	cbnz	r3, 8007f9e <__swsetup_r+0xc6>
 8007f8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007f90:	d1ba      	bne.n	8007f08 <__swsetup_r+0x30>
 8007f92:	bd70      	pop	{r4, r5, r6, pc}
 8007f94:	0781      	lsls	r1, r0, #30
 8007f96:	bf58      	it	pl
 8007f98:	6963      	ldrpl	r3, [r4, #20]
 8007f9a:	60a3      	str	r3, [r4, #8]
 8007f9c:	e7f4      	b.n	8007f88 <__swsetup_r+0xb0>
 8007f9e:	2000      	movs	r0, #0
 8007fa0:	e7f7      	b.n	8007f92 <__swsetup_r+0xba>
 8007fa2:	bf00      	nop
 8007fa4:	20000028 	.word	0x20000028
 8007fa8:	08009618 	.word	0x08009618
 8007fac:	08009638 	.word	0x08009638
 8007fb0:	080095f8 	.word	0x080095f8

08007fb4 <__sflush_r>:
 8007fb4:	898a      	ldrh	r2, [r1, #12]
 8007fb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fba:	4605      	mov	r5, r0
 8007fbc:	0710      	lsls	r0, r2, #28
 8007fbe:	460c      	mov	r4, r1
 8007fc0:	d458      	bmi.n	8008074 <__sflush_r+0xc0>
 8007fc2:	684b      	ldr	r3, [r1, #4]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	dc05      	bgt.n	8007fd4 <__sflush_r+0x20>
 8007fc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	dc02      	bgt.n	8007fd4 <__sflush_r+0x20>
 8007fce:	2000      	movs	r0, #0
 8007fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007fd6:	2e00      	cmp	r6, #0
 8007fd8:	d0f9      	beq.n	8007fce <__sflush_r+0x1a>
 8007fda:	2300      	movs	r3, #0
 8007fdc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007fe0:	682f      	ldr	r7, [r5, #0]
 8007fe2:	602b      	str	r3, [r5, #0]
 8007fe4:	d032      	beq.n	800804c <__sflush_r+0x98>
 8007fe6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007fe8:	89a3      	ldrh	r3, [r4, #12]
 8007fea:	075a      	lsls	r2, r3, #29
 8007fec:	d505      	bpl.n	8007ffa <__sflush_r+0x46>
 8007fee:	6863      	ldr	r3, [r4, #4]
 8007ff0:	1ac0      	subs	r0, r0, r3
 8007ff2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ff4:	b10b      	cbz	r3, 8007ffa <__sflush_r+0x46>
 8007ff6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ff8:	1ac0      	subs	r0, r0, r3
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008000:	6a21      	ldr	r1, [r4, #32]
 8008002:	4628      	mov	r0, r5
 8008004:	47b0      	blx	r6
 8008006:	1c43      	adds	r3, r0, #1
 8008008:	89a3      	ldrh	r3, [r4, #12]
 800800a:	d106      	bne.n	800801a <__sflush_r+0x66>
 800800c:	6829      	ldr	r1, [r5, #0]
 800800e:	291d      	cmp	r1, #29
 8008010:	d82c      	bhi.n	800806c <__sflush_r+0xb8>
 8008012:	4a2a      	ldr	r2, [pc, #168]	; (80080bc <__sflush_r+0x108>)
 8008014:	40ca      	lsrs	r2, r1
 8008016:	07d6      	lsls	r6, r2, #31
 8008018:	d528      	bpl.n	800806c <__sflush_r+0xb8>
 800801a:	2200      	movs	r2, #0
 800801c:	6062      	str	r2, [r4, #4]
 800801e:	04d9      	lsls	r1, r3, #19
 8008020:	6922      	ldr	r2, [r4, #16]
 8008022:	6022      	str	r2, [r4, #0]
 8008024:	d504      	bpl.n	8008030 <__sflush_r+0x7c>
 8008026:	1c42      	adds	r2, r0, #1
 8008028:	d101      	bne.n	800802e <__sflush_r+0x7a>
 800802a:	682b      	ldr	r3, [r5, #0]
 800802c:	b903      	cbnz	r3, 8008030 <__sflush_r+0x7c>
 800802e:	6560      	str	r0, [r4, #84]	; 0x54
 8008030:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008032:	602f      	str	r7, [r5, #0]
 8008034:	2900      	cmp	r1, #0
 8008036:	d0ca      	beq.n	8007fce <__sflush_r+0x1a>
 8008038:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800803c:	4299      	cmp	r1, r3
 800803e:	d002      	beq.n	8008046 <__sflush_r+0x92>
 8008040:	4628      	mov	r0, r5
 8008042:	f000 f9d7 	bl	80083f4 <_free_r>
 8008046:	2000      	movs	r0, #0
 8008048:	6360      	str	r0, [r4, #52]	; 0x34
 800804a:	e7c1      	b.n	8007fd0 <__sflush_r+0x1c>
 800804c:	6a21      	ldr	r1, [r4, #32]
 800804e:	2301      	movs	r3, #1
 8008050:	4628      	mov	r0, r5
 8008052:	47b0      	blx	r6
 8008054:	1c41      	adds	r1, r0, #1
 8008056:	d1c7      	bne.n	8007fe8 <__sflush_r+0x34>
 8008058:	682b      	ldr	r3, [r5, #0]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d0c4      	beq.n	8007fe8 <__sflush_r+0x34>
 800805e:	2b1d      	cmp	r3, #29
 8008060:	d001      	beq.n	8008066 <__sflush_r+0xb2>
 8008062:	2b16      	cmp	r3, #22
 8008064:	d101      	bne.n	800806a <__sflush_r+0xb6>
 8008066:	602f      	str	r7, [r5, #0]
 8008068:	e7b1      	b.n	8007fce <__sflush_r+0x1a>
 800806a:	89a3      	ldrh	r3, [r4, #12]
 800806c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008070:	81a3      	strh	r3, [r4, #12]
 8008072:	e7ad      	b.n	8007fd0 <__sflush_r+0x1c>
 8008074:	690f      	ldr	r7, [r1, #16]
 8008076:	2f00      	cmp	r7, #0
 8008078:	d0a9      	beq.n	8007fce <__sflush_r+0x1a>
 800807a:	0793      	lsls	r3, r2, #30
 800807c:	680e      	ldr	r6, [r1, #0]
 800807e:	bf08      	it	eq
 8008080:	694b      	ldreq	r3, [r1, #20]
 8008082:	600f      	str	r7, [r1, #0]
 8008084:	bf18      	it	ne
 8008086:	2300      	movne	r3, #0
 8008088:	eba6 0807 	sub.w	r8, r6, r7
 800808c:	608b      	str	r3, [r1, #8]
 800808e:	f1b8 0f00 	cmp.w	r8, #0
 8008092:	dd9c      	ble.n	8007fce <__sflush_r+0x1a>
 8008094:	6a21      	ldr	r1, [r4, #32]
 8008096:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008098:	4643      	mov	r3, r8
 800809a:	463a      	mov	r2, r7
 800809c:	4628      	mov	r0, r5
 800809e:	47b0      	blx	r6
 80080a0:	2800      	cmp	r0, #0
 80080a2:	dc06      	bgt.n	80080b2 <__sflush_r+0xfe>
 80080a4:	89a3      	ldrh	r3, [r4, #12]
 80080a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080aa:	81a3      	strh	r3, [r4, #12]
 80080ac:	f04f 30ff 	mov.w	r0, #4294967295
 80080b0:	e78e      	b.n	8007fd0 <__sflush_r+0x1c>
 80080b2:	4407      	add	r7, r0
 80080b4:	eba8 0800 	sub.w	r8, r8, r0
 80080b8:	e7e9      	b.n	800808e <__sflush_r+0xda>
 80080ba:	bf00      	nop
 80080bc:	20400001 	.word	0x20400001

080080c0 <_fflush_r>:
 80080c0:	b538      	push	{r3, r4, r5, lr}
 80080c2:	690b      	ldr	r3, [r1, #16]
 80080c4:	4605      	mov	r5, r0
 80080c6:	460c      	mov	r4, r1
 80080c8:	b913      	cbnz	r3, 80080d0 <_fflush_r+0x10>
 80080ca:	2500      	movs	r5, #0
 80080cc:	4628      	mov	r0, r5
 80080ce:	bd38      	pop	{r3, r4, r5, pc}
 80080d0:	b118      	cbz	r0, 80080da <_fflush_r+0x1a>
 80080d2:	6983      	ldr	r3, [r0, #24]
 80080d4:	b90b      	cbnz	r3, 80080da <_fflush_r+0x1a>
 80080d6:	f000 f887 	bl	80081e8 <__sinit>
 80080da:	4b14      	ldr	r3, [pc, #80]	; (800812c <_fflush_r+0x6c>)
 80080dc:	429c      	cmp	r4, r3
 80080de:	d11b      	bne.n	8008118 <_fflush_r+0x58>
 80080e0:	686c      	ldr	r4, [r5, #4]
 80080e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d0ef      	beq.n	80080ca <_fflush_r+0xa>
 80080ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80080ec:	07d0      	lsls	r0, r2, #31
 80080ee:	d404      	bmi.n	80080fa <_fflush_r+0x3a>
 80080f0:	0599      	lsls	r1, r3, #22
 80080f2:	d402      	bmi.n	80080fa <_fflush_r+0x3a>
 80080f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080f6:	f000 f915 	bl	8008324 <__retarget_lock_acquire_recursive>
 80080fa:	4628      	mov	r0, r5
 80080fc:	4621      	mov	r1, r4
 80080fe:	f7ff ff59 	bl	8007fb4 <__sflush_r>
 8008102:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008104:	07da      	lsls	r2, r3, #31
 8008106:	4605      	mov	r5, r0
 8008108:	d4e0      	bmi.n	80080cc <_fflush_r+0xc>
 800810a:	89a3      	ldrh	r3, [r4, #12]
 800810c:	059b      	lsls	r3, r3, #22
 800810e:	d4dd      	bmi.n	80080cc <_fflush_r+0xc>
 8008110:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008112:	f000 f908 	bl	8008326 <__retarget_lock_release_recursive>
 8008116:	e7d9      	b.n	80080cc <_fflush_r+0xc>
 8008118:	4b05      	ldr	r3, [pc, #20]	; (8008130 <_fflush_r+0x70>)
 800811a:	429c      	cmp	r4, r3
 800811c:	d101      	bne.n	8008122 <_fflush_r+0x62>
 800811e:	68ac      	ldr	r4, [r5, #8]
 8008120:	e7df      	b.n	80080e2 <_fflush_r+0x22>
 8008122:	4b04      	ldr	r3, [pc, #16]	; (8008134 <_fflush_r+0x74>)
 8008124:	429c      	cmp	r4, r3
 8008126:	bf08      	it	eq
 8008128:	68ec      	ldreq	r4, [r5, #12]
 800812a:	e7da      	b.n	80080e2 <_fflush_r+0x22>
 800812c:	08009618 	.word	0x08009618
 8008130:	08009638 	.word	0x08009638
 8008134:	080095f8 	.word	0x080095f8

08008138 <std>:
 8008138:	2300      	movs	r3, #0
 800813a:	b510      	push	{r4, lr}
 800813c:	4604      	mov	r4, r0
 800813e:	e9c0 3300 	strd	r3, r3, [r0]
 8008142:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008146:	6083      	str	r3, [r0, #8]
 8008148:	8181      	strh	r1, [r0, #12]
 800814a:	6643      	str	r3, [r0, #100]	; 0x64
 800814c:	81c2      	strh	r2, [r0, #14]
 800814e:	6183      	str	r3, [r0, #24]
 8008150:	4619      	mov	r1, r3
 8008152:	2208      	movs	r2, #8
 8008154:	305c      	adds	r0, #92	; 0x5c
 8008156:	f7ff fdd7 	bl	8007d08 <memset>
 800815a:	4b05      	ldr	r3, [pc, #20]	; (8008170 <std+0x38>)
 800815c:	6263      	str	r3, [r4, #36]	; 0x24
 800815e:	4b05      	ldr	r3, [pc, #20]	; (8008174 <std+0x3c>)
 8008160:	62a3      	str	r3, [r4, #40]	; 0x28
 8008162:	4b05      	ldr	r3, [pc, #20]	; (8008178 <std+0x40>)
 8008164:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008166:	4b05      	ldr	r3, [pc, #20]	; (800817c <std+0x44>)
 8008168:	6224      	str	r4, [r4, #32]
 800816a:	6323      	str	r3, [r4, #48]	; 0x30
 800816c:	bd10      	pop	{r4, pc}
 800816e:	bf00      	nop
 8008170:	08008bb1 	.word	0x08008bb1
 8008174:	08008bd3 	.word	0x08008bd3
 8008178:	08008c0b 	.word	0x08008c0b
 800817c:	08008c2f 	.word	0x08008c2f

08008180 <_cleanup_r>:
 8008180:	4901      	ldr	r1, [pc, #4]	; (8008188 <_cleanup_r+0x8>)
 8008182:	f000 b8af 	b.w	80082e4 <_fwalk_reent>
 8008186:	bf00      	nop
 8008188:	080080c1 	.word	0x080080c1

0800818c <__sfmoreglue>:
 800818c:	b570      	push	{r4, r5, r6, lr}
 800818e:	2268      	movs	r2, #104	; 0x68
 8008190:	1e4d      	subs	r5, r1, #1
 8008192:	4355      	muls	r5, r2
 8008194:	460e      	mov	r6, r1
 8008196:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800819a:	f000 f997 	bl	80084cc <_malloc_r>
 800819e:	4604      	mov	r4, r0
 80081a0:	b140      	cbz	r0, 80081b4 <__sfmoreglue+0x28>
 80081a2:	2100      	movs	r1, #0
 80081a4:	e9c0 1600 	strd	r1, r6, [r0]
 80081a8:	300c      	adds	r0, #12
 80081aa:	60a0      	str	r0, [r4, #8]
 80081ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80081b0:	f7ff fdaa 	bl	8007d08 <memset>
 80081b4:	4620      	mov	r0, r4
 80081b6:	bd70      	pop	{r4, r5, r6, pc}

080081b8 <__sfp_lock_acquire>:
 80081b8:	4801      	ldr	r0, [pc, #4]	; (80081c0 <__sfp_lock_acquire+0x8>)
 80081ba:	f000 b8b3 	b.w	8008324 <__retarget_lock_acquire_recursive>
 80081be:	bf00      	nop
 80081c0:	20003465 	.word	0x20003465

080081c4 <__sfp_lock_release>:
 80081c4:	4801      	ldr	r0, [pc, #4]	; (80081cc <__sfp_lock_release+0x8>)
 80081c6:	f000 b8ae 	b.w	8008326 <__retarget_lock_release_recursive>
 80081ca:	bf00      	nop
 80081cc:	20003465 	.word	0x20003465

080081d0 <__sinit_lock_acquire>:
 80081d0:	4801      	ldr	r0, [pc, #4]	; (80081d8 <__sinit_lock_acquire+0x8>)
 80081d2:	f000 b8a7 	b.w	8008324 <__retarget_lock_acquire_recursive>
 80081d6:	bf00      	nop
 80081d8:	20003466 	.word	0x20003466

080081dc <__sinit_lock_release>:
 80081dc:	4801      	ldr	r0, [pc, #4]	; (80081e4 <__sinit_lock_release+0x8>)
 80081de:	f000 b8a2 	b.w	8008326 <__retarget_lock_release_recursive>
 80081e2:	bf00      	nop
 80081e4:	20003466 	.word	0x20003466

080081e8 <__sinit>:
 80081e8:	b510      	push	{r4, lr}
 80081ea:	4604      	mov	r4, r0
 80081ec:	f7ff fff0 	bl	80081d0 <__sinit_lock_acquire>
 80081f0:	69a3      	ldr	r3, [r4, #24]
 80081f2:	b11b      	cbz	r3, 80081fc <__sinit+0x14>
 80081f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081f8:	f7ff bff0 	b.w	80081dc <__sinit_lock_release>
 80081fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008200:	6523      	str	r3, [r4, #80]	; 0x50
 8008202:	4b13      	ldr	r3, [pc, #76]	; (8008250 <__sinit+0x68>)
 8008204:	4a13      	ldr	r2, [pc, #76]	; (8008254 <__sinit+0x6c>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	62a2      	str	r2, [r4, #40]	; 0x28
 800820a:	42a3      	cmp	r3, r4
 800820c:	bf04      	itt	eq
 800820e:	2301      	moveq	r3, #1
 8008210:	61a3      	streq	r3, [r4, #24]
 8008212:	4620      	mov	r0, r4
 8008214:	f000 f820 	bl	8008258 <__sfp>
 8008218:	6060      	str	r0, [r4, #4]
 800821a:	4620      	mov	r0, r4
 800821c:	f000 f81c 	bl	8008258 <__sfp>
 8008220:	60a0      	str	r0, [r4, #8]
 8008222:	4620      	mov	r0, r4
 8008224:	f000 f818 	bl	8008258 <__sfp>
 8008228:	2200      	movs	r2, #0
 800822a:	60e0      	str	r0, [r4, #12]
 800822c:	2104      	movs	r1, #4
 800822e:	6860      	ldr	r0, [r4, #4]
 8008230:	f7ff ff82 	bl	8008138 <std>
 8008234:	68a0      	ldr	r0, [r4, #8]
 8008236:	2201      	movs	r2, #1
 8008238:	2109      	movs	r1, #9
 800823a:	f7ff ff7d 	bl	8008138 <std>
 800823e:	68e0      	ldr	r0, [r4, #12]
 8008240:	2202      	movs	r2, #2
 8008242:	2112      	movs	r1, #18
 8008244:	f7ff ff78 	bl	8008138 <std>
 8008248:	2301      	movs	r3, #1
 800824a:	61a3      	str	r3, [r4, #24]
 800824c:	e7d2      	b.n	80081f4 <__sinit+0xc>
 800824e:	bf00      	nop
 8008250:	080095f4 	.word	0x080095f4
 8008254:	08008181 	.word	0x08008181

08008258 <__sfp>:
 8008258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800825a:	4607      	mov	r7, r0
 800825c:	f7ff ffac 	bl	80081b8 <__sfp_lock_acquire>
 8008260:	4b1e      	ldr	r3, [pc, #120]	; (80082dc <__sfp+0x84>)
 8008262:	681e      	ldr	r6, [r3, #0]
 8008264:	69b3      	ldr	r3, [r6, #24]
 8008266:	b913      	cbnz	r3, 800826e <__sfp+0x16>
 8008268:	4630      	mov	r0, r6
 800826a:	f7ff ffbd 	bl	80081e8 <__sinit>
 800826e:	3648      	adds	r6, #72	; 0x48
 8008270:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008274:	3b01      	subs	r3, #1
 8008276:	d503      	bpl.n	8008280 <__sfp+0x28>
 8008278:	6833      	ldr	r3, [r6, #0]
 800827a:	b30b      	cbz	r3, 80082c0 <__sfp+0x68>
 800827c:	6836      	ldr	r6, [r6, #0]
 800827e:	e7f7      	b.n	8008270 <__sfp+0x18>
 8008280:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008284:	b9d5      	cbnz	r5, 80082bc <__sfp+0x64>
 8008286:	4b16      	ldr	r3, [pc, #88]	; (80082e0 <__sfp+0x88>)
 8008288:	60e3      	str	r3, [r4, #12]
 800828a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800828e:	6665      	str	r5, [r4, #100]	; 0x64
 8008290:	f000 f847 	bl	8008322 <__retarget_lock_init_recursive>
 8008294:	f7ff ff96 	bl	80081c4 <__sfp_lock_release>
 8008298:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800829c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80082a0:	6025      	str	r5, [r4, #0]
 80082a2:	61a5      	str	r5, [r4, #24]
 80082a4:	2208      	movs	r2, #8
 80082a6:	4629      	mov	r1, r5
 80082a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80082ac:	f7ff fd2c 	bl	8007d08 <memset>
 80082b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80082b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80082b8:	4620      	mov	r0, r4
 80082ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082bc:	3468      	adds	r4, #104	; 0x68
 80082be:	e7d9      	b.n	8008274 <__sfp+0x1c>
 80082c0:	2104      	movs	r1, #4
 80082c2:	4638      	mov	r0, r7
 80082c4:	f7ff ff62 	bl	800818c <__sfmoreglue>
 80082c8:	4604      	mov	r4, r0
 80082ca:	6030      	str	r0, [r6, #0]
 80082cc:	2800      	cmp	r0, #0
 80082ce:	d1d5      	bne.n	800827c <__sfp+0x24>
 80082d0:	f7ff ff78 	bl	80081c4 <__sfp_lock_release>
 80082d4:	230c      	movs	r3, #12
 80082d6:	603b      	str	r3, [r7, #0]
 80082d8:	e7ee      	b.n	80082b8 <__sfp+0x60>
 80082da:	bf00      	nop
 80082dc:	080095f4 	.word	0x080095f4
 80082e0:	ffff0001 	.word	0xffff0001

080082e4 <_fwalk_reent>:
 80082e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082e8:	4606      	mov	r6, r0
 80082ea:	4688      	mov	r8, r1
 80082ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80082f0:	2700      	movs	r7, #0
 80082f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80082f6:	f1b9 0901 	subs.w	r9, r9, #1
 80082fa:	d505      	bpl.n	8008308 <_fwalk_reent+0x24>
 80082fc:	6824      	ldr	r4, [r4, #0]
 80082fe:	2c00      	cmp	r4, #0
 8008300:	d1f7      	bne.n	80082f2 <_fwalk_reent+0xe>
 8008302:	4638      	mov	r0, r7
 8008304:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008308:	89ab      	ldrh	r3, [r5, #12]
 800830a:	2b01      	cmp	r3, #1
 800830c:	d907      	bls.n	800831e <_fwalk_reent+0x3a>
 800830e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008312:	3301      	adds	r3, #1
 8008314:	d003      	beq.n	800831e <_fwalk_reent+0x3a>
 8008316:	4629      	mov	r1, r5
 8008318:	4630      	mov	r0, r6
 800831a:	47c0      	blx	r8
 800831c:	4307      	orrs	r7, r0
 800831e:	3568      	adds	r5, #104	; 0x68
 8008320:	e7e9      	b.n	80082f6 <_fwalk_reent+0x12>

08008322 <__retarget_lock_init_recursive>:
 8008322:	4770      	bx	lr

08008324 <__retarget_lock_acquire_recursive>:
 8008324:	4770      	bx	lr

08008326 <__retarget_lock_release_recursive>:
 8008326:	4770      	bx	lr

08008328 <__swhatbuf_r>:
 8008328:	b570      	push	{r4, r5, r6, lr}
 800832a:	460e      	mov	r6, r1
 800832c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008330:	2900      	cmp	r1, #0
 8008332:	b096      	sub	sp, #88	; 0x58
 8008334:	4614      	mov	r4, r2
 8008336:	461d      	mov	r5, r3
 8008338:	da08      	bge.n	800834c <__swhatbuf_r+0x24>
 800833a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800833e:	2200      	movs	r2, #0
 8008340:	602a      	str	r2, [r5, #0]
 8008342:	061a      	lsls	r2, r3, #24
 8008344:	d410      	bmi.n	8008368 <__swhatbuf_r+0x40>
 8008346:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800834a:	e00e      	b.n	800836a <__swhatbuf_r+0x42>
 800834c:	466a      	mov	r2, sp
 800834e:	f000 fc95 	bl	8008c7c <_fstat_r>
 8008352:	2800      	cmp	r0, #0
 8008354:	dbf1      	blt.n	800833a <__swhatbuf_r+0x12>
 8008356:	9a01      	ldr	r2, [sp, #4]
 8008358:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800835c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008360:	425a      	negs	r2, r3
 8008362:	415a      	adcs	r2, r3
 8008364:	602a      	str	r2, [r5, #0]
 8008366:	e7ee      	b.n	8008346 <__swhatbuf_r+0x1e>
 8008368:	2340      	movs	r3, #64	; 0x40
 800836a:	2000      	movs	r0, #0
 800836c:	6023      	str	r3, [r4, #0]
 800836e:	b016      	add	sp, #88	; 0x58
 8008370:	bd70      	pop	{r4, r5, r6, pc}
	...

08008374 <__smakebuf_r>:
 8008374:	898b      	ldrh	r3, [r1, #12]
 8008376:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008378:	079d      	lsls	r5, r3, #30
 800837a:	4606      	mov	r6, r0
 800837c:	460c      	mov	r4, r1
 800837e:	d507      	bpl.n	8008390 <__smakebuf_r+0x1c>
 8008380:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008384:	6023      	str	r3, [r4, #0]
 8008386:	6123      	str	r3, [r4, #16]
 8008388:	2301      	movs	r3, #1
 800838a:	6163      	str	r3, [r4, #20]
 800838c:	b002      	add	sp, #8
 800838e:	bd70      	pop	{r4, r5, r6, pc}
 8008390:	ab01      	add	r3, sp, #4
 8008392:	466a      	mov	r2, sp
 8008394:	f7ff ffc8 	bl	8008328 <__swhatbuf_r>
 8008398:	9900      	ldr	r1, [sp, #0]
 800839a:	4605      	mov	r5, r0
 800839c:	4630      	mov	r0, r6
 800839e:	f000 f895 	bl	80084cc <_malloc_r>
 80083a2:	b948      	cbnz	r0, 80083b8 <__smakebuf_r+0x44>
 80083a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083a8:	059a      	lsls	r2, r3, #22
 80083aa:	d4ef      	bmi.n	800838c <__smakebuf_r+0x18>
 80083ac:	f023 0303 	bic.w	r3, r3, #3
 80083b0:	f043 0302 	orr.w	r3, r3, #2
 80083b4:	81a3      	strh	r3, [r4, #12]
 80083b6:	e7e3      	b.n	8008380 <__smakebuf_r+0xc>
 80083b8:	4b0d      	ldr	r3, [pc, #52]	; (80083f0 <__smakebuf_r+0x7c>)
 80083ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80083bc:	89a3      	ldrh	r3, [r4, #12]
 80083be:	6020      	str	r0, [r4, #0]
 80083c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083c4:	81a3      	strh	r3, [r4, #12]
 80083c6:	9b00      	ldr	r3, [sp, #0]
 80083c8:	6163      	str	r3, [r4, #20]
 80083ca:	9b01      	ldr	r3, [sp, #4]
 80083cc:	6120      	str	r0, [r4, #16]
 80083ce:	b15b      	cbz	r3, 80083e8 <__smakebuf_r+0x74>
 80083d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083d4:	4630      	mov	r0, r6
 80083d6:	f000 fc63 	bl	8008ca0 <_isatty_r>
 80083da:	b128      	cbz	r0, 80083e8 <__smakebuf_r+0x74>
 80083dc:	89a3      	ldrh	r3, [r4, #12]
 80083de:	f023 0303 	bic.w	r3, r3, #3
 80083e2:	f043 0301 	orr.w	r3, r3, #1
 80083e6:	81a3      	strh	r3, [r4, #12]
 80083e8:	89a0      	ldrh	r0, [r4, #12]
 80083ea:	4305      	orrs	r5, r0
 80083ec:	81a5      	strh	r5, [r4, #12]
 80083ee:	e7cd      	b.n	800838c <__smakebuf_r+0x18>
 80083f0:	08008181 	.word	0x08008181

080083f4 <_free_r>:
 80083f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083f6:	2900      	cmp	r1, #0
 80083f8:	d044      	beq.n	8008484 <_free_r+0x90>
 80083fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083fe:	9001      	str	r0, [sp, #4]
 8008400:	2b00      	cmp	r3, #0
 8008402:	f1a1 0404 	sub.w	r4, r1, #4
 8008406:	bfb8      	it	lt
 8008408:	18e4      	addlt	r4, r4, r3
 800840a:	f000 fc6b 	bl	8008ce4 <__malloc_lock>
 800840e:	4a1e      	ldr	r2, [pc, #120]	; (8008488 <_free_r+0x94>)
 8008410:	9801      	ldr	r0, [sp, #4]
 8008412:	6813      	ldr	r3, [r2, #0]
 8008414:	b933      	cbnz	r3, 8008424 <_free_r+0x30>
 8008416:	6063      	str	r3, [r4, #4]
 8008418:	6014      	str	r4, [r2, #0]
 800841a:	b003      	add	sp, #12
 800841c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008420:	f000 bc66 	b.w	8008cf0 <__malloc_unlock>
 8008424:	42a3      	cmp	r3, r4
 8008426:	d908      	bls.n	800843a <_free_r+0x46>
 8008428:	6825      	ldr	r5, [r4, #0]
 800842a:	1961      	adds	r1, r4, r5
 800842c:	428b      	cmp	r3, r1
 800842e:	bf01      	itttt	eq
 8008430:	6819      	ldreq	r1, [r3, #0]
 8008432:	685b      	ldreq	r3, [r3, #4]
 8008434:	1949      	addeq	r1, r1, r5
 8008436:	6021      	streq	r1, [r4, #0]
 8008438:	e7ed      	b.n	8008416 <_free_r+0x22>
 800843a:	461a      	mov	r2, r3
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	b10b      	cbz	r3, 8008444 <_free_r+0x50>
 8008440:	42a3      	cmp	r3, r4
 8008442:	d9fa      	bls.n	800843a <_free_r+0x46>
 8008444:	6811      	ldr	r1, [r2, #0]
 8008446:	1855      	adds	r5, r2, r1
 8008448:	42a5      	cmp	r5, r4
 800844a:	d10b      	bne.n	8008464 <_free_r+0x70>
 800844c:	6824      	ldr	r4, [r4, #0]
 800844e:	4421      	add	r1, r4
 8008450:	1854      	adds	r4, r2, r1
 8008452:	42a3      	cmp	r3, r4
 8008454:	6011      	str	r1, [r2, #0]
 8008456:	d1e0      	bne.n	800841a <_free_r+0x26>
 8008458:	681c      	ldr	r4, [r3, #0]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	6053      	str	r3, [r2, #4]
 800845e:	4421      	add	r1, r4
 8008460:	6011      	str	r1, [r2, #0]
 8008462:	e7da      	b.n	800841a <_free_r+0x26>
 8008464:	d902      	bls.n	800846c <_free_r+0x78>
 8008466:	230c      	movs	r3, #12
 8008468:	6003      	str	r3, [r0, #0]
 800846a:	e7d6      	b.n	800841a <_free_r+0x26>
 800846c:	6825      	ldr	r5, [r4, #0]
 800846e:	1961      	adds	r1, r4, r5
 8008470:	428b      	cmp	r3, r1
 8008472:	bf04      	itt	eq
 8008474:	6819      	ldreq	r1, [r3, #0]
 8008476:	685b      	ldreq	r3, [r3, #4]
 8008478:	6063      	str	r3, [r4, #4]
 800847a:	bf04      	itt	eq
 800847c:	1949      	addeq	r1, r1, r5
 800847e:	6021      	streq	r1, [r4, #0]
 8008480:	6054      	str	r4, [r2, #4]
 8008482:	e7ca      	b.n	800841a <_free_r+0x26>
 8008484:	b003      	add	sp, #12
 8008486:	bd30      	pop	{r4, r5, pc}
 8008488:	20003468 	.word	0x20003468

0800848c <sbrk_aligned>:
 800848c:	b570      	push	{r4, r5, r6, lr}
 800848e:	4e0e      	ldr	r6, [pc, #56]	; (80084c8 <sbrk_aligned+0x3c>)
 8008490:	460c      	mov	r4, r1
 8008492:	6831      	ldr	r1, [r6, #0]
 8008494:	4605      	mov	r5, r0
 8008496:	b911      	cbnz	r1, 800849e <sbrk_aligned+0x12>
 8008498:	f000 fb7a 	bl	8008b90 <_sbrk_r>
 800849c:	6030      	str	r0, [r6, #0]
 800849e:	4621      	mov	r1, r4
 80084a0:	4628      	mov	r0, r5
 80084a2:	f000 fb75 	bl	8008b90 <_sbrk_r>
 80084a6:	1c43      	adds	r3, r0, #1
 80084a8:	d00a      	beq.n	80084c0 <sbrk_aligned+0x34>
 80084aa:	1cc4      	adds	r4, r0, #3
 80084ac:	f024 0403 	bic.w	r4, r4, #3
 80084b0:	42a0      	cmp	r0, r4
 80084b2:	d007      	beq.n	80084c4 <sbrk_aligned+0x38>
 80084b4:	1a21      	subs	r1, r4, r0
 80084b6:	4628      	mov	r0, r5
 80084b8:	f000 fb6a 	bl	8008b90 <_sbrk_r>
 80084bc:	3001      	adds	r0, #1
 80084be:	d101      	bne.n	80084c4 <sbrk_aligned+0x38>
 80084c0:	f04f 34ff 	mov.w	r4, #4294967295
 80084c4:	4620      	mov	r0, r4
 80084c6:	bd70      	pop	{r4, r5, r6, pc}
 80084c8:	2000346c 	.word	0x2000346c

080084cc <_malloc_r>:
 80084cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084d0:	1ccd      	adds	r5, r1, #3
 80084d2:	f025 0503 	bic.w	r5, r5, #3
 80084d6:	3508      	adds	r5, #8
 80084d8:	2d0c      	cmp	r5, #12
 80084da:	bf38      	it	cc
 80084dc:	250c      	movcc	r5, #12
 80084de:	2d00      	cmp	r5, #0
 80084e0:	4607      	mov	r7, r0
 80084e2:	db01      	blt.n	80084e8 <_malloc_r+0x1c>
 80084e4:	42a9      	cmp	r1, r5
 80084e6:	d905      	bls.n	80084f4 <_malloc_r+0x28>
 80084e8:	230c      	movs	r3, #12
 80084ea:	603b      	str	r3, [r7, #0]
 80084ec:	2600      	movs	r6, #0
 80084ee:	4630      	mov	r0, r6
 80084f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084f4:	4e2e      	ldr	r6, [pc, #184]	; (80085b0 <_malloc_r+0xe4>)
 80084f6:	f000 fbf5 	bl	8008ce4 <__malloc_lock>
 80084fa:	6833      	ldr	r3, [r6, #0]
 80084fc:	461c      	mov	r4, r3
 80084fe:	bb34      	cbnz	r4, 800854e <_malloc_r+0x82>
 8008500:	4629      	mov	r1, r5
 8008502:	4638      	mov	r0, r7
 8008504:	f7ff ffc2 	bl	800848c <sbrk_aligned>
 8008508:	1c43      	adds	r3, r0, #1
 800850a:	4604      	mov	r4, r0
 800850c:	d14d      	bne.n	80085aa <_malloc_r+0xde>
 800850e:	6834      	ldr	r4, [r6, #0]
 8008510:	4626      	mov	r6, r4
 8008512:	2e00      	cmp	r6, #0
 8008514:	d140      	bne.n	8008598 <_malloc_r+0xcc>
 8008516:	6823      	ldr	r3, [r4, #0]
 8008518:	4631      	mov	r1, r6
 800851a:	4638      	mov	r0, r7
 800851c:	eb04 0803 	add.w	r8, r4, r3
 8008520:	f000 fb36 	bl	8008b90 <_sbrk_r>
 8008524:	4580      	cmp	r8, r0
 8008526:	d13a      	bne.n	800859e <_malloc_r+0xd2>
 8008528:	6821      	ldr	r1, [r4, #0]
 800852a:	3503      	adds	r5, #3
 800852c:	1a6d      	subs	r5, r5, r1
 800852e:	f025 0503 	bic.w	r5, r5, #3
 8008532:	3508      	adds	r5, #8
 8008534:	2d0c      	cmp	r5, #12
 8008536:	bf38      	it	cc
 8008538:	250c      	movcc	r5, #12
 800853a:	4629      	mov	r1, r5
 800853c:	4638      	mov	r0, r7
 800853e:	f7ff ffa5 	bl	800848c <sbrk_aligned>
 8008542:	3001      	adds	r0, #1
 8008544:	d02b      	beq.n	800859e <_malloc_r+0xd2>
 8008546:	6823      	ldr	r3, [r4, #0]
 8008548:	442b      	add	r3, r5
 800854a:	6023      	str	r3, [r4, #0]
 800854c:	e00e      	b.n	800856c <_malloc_r+0xa0>
 800854e:	6822      	ldr	r2, [r4, #0]
 8008550:	1b52      	subs	r2, r2, r5
 8008552:	d41e      	bmi.n	8008592 <_malloc_r+0xc6>
 8008554:	2a0b      	cmp	r2, #11
 8008556:	d916      	bls.n	8008586 <_malloc_r+0xba>
 8008558:	1961      	adds	r1, r4, r5
 800855a:	42a3      	cmp	r3, r4
 800855c:	6025      	str	r5, [r4, #0]
 800855e:	bf18      	it	ne
 8008560:	6059      	strne	r1, [r3, #4]
 8008562:	6863      	ldr	r3, [r4, #4]
 8008564:	bf08      	it	eq
 8008566:	6031      	streq	r1, [r6, #0]
 8008568:	5162      	str	r2, [r4, r5]
 800856a:	604b      	str	r3, [r1, #4]
 800856c:	4638      	mov	r0, r7
 800856e:	f104 060b 	add.w	r6, r4, #11
 8008572:	f000 fbbd 	bl	8008cf0 <__malloc_unlock>
 8008576:	f026 0607 	bic.w	r6, r6, #7
 800857a:	1d23      	adds	r3, r4, #4
 800857c:	1af2      	subs	r2, r6, r3
 800857e:	d0b6      	beq.n	80084ee <_malloc_r+0x22>
 8008580:	1b9b      	subs	r3, r3, r6
 8008582:	50a3      	str	r3, [r4, r2]
 8008584:	e7b3      	b.n	80084ee <_malloc_r+0x22>
 8008586:	6862      	ldr	r2, [r4, #4]
 8008588:	42a3      	cmp	r3, r4
 800858a:	bf0c      	ite	eq
 800858c:	6032      	streq	r2, [r6, #0]
 800858e:	605a      	strne	r2, [r3, #4]
 8008590:	e7ec      	b.n	800856c <_malloc_r+0xa0>
 8008592:	4623      	mov	r3, r4
 8008594:	6864      	ldr	r4, [r4, #4]
 8008596:	e7b2      	b.n	80084fe <_malloc_r+0x32>
 8008598:	4634      	mov	r4, r6
 800859a:	6876      	ldr	r6, [r6, #4]
 800859c:	e7b9      	b.n	8008512 <_malloc_r+0x46>
 800859e:	230c      	movs	r3, #12
 80085a0:	603b      	str	r3, [r7, #0]
 80085a2:	4638      	mov	r0, r7
 80085a4:	f000 fba4 	bl	8008cf0 <__malloc_unlock>
 80085a8:	e7a1      	b.n	80084ee <_malloc_r+0x22>
 80085aa:	6025      	str	r5, [r4, #0]
 80085ac:	e7de      	b.n	800856c <_malloc_r+0xa0>
 80085ae:	bf00      	nop
 80085b0:	20003468 	.word	0x20003468

080085b4 <__sfputc_r>:
 80085b4:	6893      	ldr	r3, [r2, #8]
 80085b6:	3b01      	subs	r3, #1
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	b410      	push	{r4}
 80085bc:	6093      	str	r3, [r2, #8]
 80085be:	da08      	bge.n	80085d2 <__sfputc_r+0x1e>
 80085c0:	6994      	ldr	r4, [r2, #24]
 80085c2:	42a3      	cmp	r3, r4
 80085c4:	db01      	blt.n	80085ca <__sfputc_r+0x16>
 80085c6:	290a      	cmp	r1, #10
 80085c8:	d103      	bne.n	80085d2 <__sfputc_r+0x1e>
 80085ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085ce:	f7ff bc31 	b.w	8007e34 <__swbuf_r>
 80085d2:	6813      	ldr	r3, [r2, #0]
 80085d4:	1c58      	adds	r0, r3, #1
 80085d6:	6010      	str	r0, [r2, #0]
 80085d8:	7019      	strb	r1, [r3, #0]
 80085da:	4608      	mov	r0, r1
 80085dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085e0:	4770      	bx	lr

080085e2 <__sfputs_r>:
 80085e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085e4:	4606      	mov	r6, r0
 80085e6:	460f      	mov	r7, r1
 80085e8:	4614      	mov	r4, r2
 80085ea:	18d5      	adds	r5, r2, r3
 80085ec:	42ac      	cmp	r4, r5
 80085ee:	d101      	bne.n	80085f4 <__sfputs_r+0x12>
 80085f0:	2000      	movs	r0, #0
 80085f2:	e007      	b.n	8008604 <__sfputs_r+0x22>
 80085f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085f8:	463a      	mov	r2, r7
 80085fa:	4630      	mov	r0, r6
 80085fc:	f7ff ffda 	bl	80085b4 <__sfputc_r>
 8008600:	1c43      	adds	r3, r0, #1
 8008602:	d1f3      	bne.n	80085ec <__sfputs_r+0xa>
 8008604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008608 <_vfiprintf_r>:
 8008608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800860c:	460d      	mov	r5, r1
 800860e:	b09d      	sub	sp, #116	; 0x74
 8008610:	4614      	mov	r4, r2
 8008612:	4698      	mov	r8, r3
 8008614:	4606      	mov	r6, r0
 8008616:	b118      	cbz	r0, 8008620 <_vfiprintf_r+0x18>
 8008618:	6983      	ldr	r3, [r0, #24]
 800861a:	b90b      	cbnz	r3, 8008620 <_vfiprintf_r+0x18>
 800861c:	f7ff fde4 	bl	80081e8 <__sinit>
 8008620:	4b89      	ldr	r3, [pc, #548]	; (8008848 <_vfiprintf_r+0x240>)
 8008622:	429d      	cmp	r5, r3
 8008624:	d11b      	bne.n	800865e <_vfiprintf_r+0x56>
 8008626:	6875      	ldr	r5, [r6, #4]
 8008628:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800862a:	07d9      	lsls	r1, r3, #31
 800862c:	d405      	bmi.n	800863a <_vfiprintf_r+0x32>
 800862e:	89ab      	ldrh	r3, [r5, #12]
 8008630:	059a      	lsls	r2, r3, #22
 8008632:	d402      	bmi.n	800863a <_vfiprintf_r+0x32>
 8008634:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008636:	f7ff fe75 	bl	8008324 <__retarget_lock_acquire_recursive>
 800863a:	89ab      	ldrh	r3, [r5, #12]
 800863c:	071b      	lsls	r3, r3, #28
 800863e:	d501      	bpl.n	8008644 <_vfiprintf_r+0x3c>
 8008640:	692b      	ldr	r3, [r5, #16]
 8008642:	b9eb      	cbnz	r3, 8008680 <_vfiprintf_r+0x78>
 8008644:	4629      	mov	r1, r5
 8008646:	4630      	mov	r0, r6
 8008648:	f7ff fc46 	bl	8007ed8 <__swsetup_r>
 800864c:	b1c0      	cbz	r0, 8008680 <_vfiprintf_r+0x78>
 800864e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008650:	07dc      	lsls	r4, r3, #31
 8008652:	d50e      	bpl.n	8008672 <_vfiprintf_r+0x6a>
 8008654:	f04f 30ff 	mov.w	r0, #4294967295
 8008658:	b01d      	add	sp, #116	; 0x74
 800865a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800865e:	4b7b      	ldr	r3, [pc, #492]	; (800884c <_vfiprintf_r+0x244>)
 8008660:	429d      	cmp	r5, r3
 8008662:	d101      	bne.n	8008668 <_vfiprintf_r+0x60>
 8008664:	68b5      	ldr	r5, [r6, #8]
 8008666:	e7df      	b.n	8008628 <_vfiprintf_r+0x20>
 8008668:	4b79      	ldr	r3, [pc, #484]	; (8008850 <_vfiprintf_r+0x248>)
 800866a:	429d      	cmp	r5, r3
 800866c:	bf08      	it	eq
 800866e:	68f5      	ldreq	r5, [r6, #12]
 8008670:	e7da      	b.n	8008628 <_vfiprintf_r+0x20>
 8008672:	89ab      	ldrh	r3, [r5, #12]
 8008674:	0598      	lsls	r0, r3, #22
 8008676:	d4ed      	bmi.n	8008654 <_vfiprintf_r+0x4c>
 8008678:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800867a:	f7ff fe54 	bl	8008326 <__retarget_lock_release_recursive>
 800867e:	e7e9      	b.n	8008654 <_vfiprintf_r+0x4c>
 8008680:	2300      	movs	r3, #0
 8008682:	9309      	str	r3, [sp, #36]	; 0x24
 8008684:	2320      	movs	r3, #32
 8008686:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800868a:	f8cd 800c 	str.w	r8, [sp, #12]
 800868e:	2330      	movs	r3, #48	; 0x30
 8008690:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008854 <_vfiprintf_r+0x24c>
 8008694:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008698:	f04f 0901 	mov.w	r9, #1
 800869c:	4623      	mov	r3, r4
 800869e:	469a      	mov	sl, r3
 80086a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086a4:	b10a      	cbz	r2, 80086aa <_vfiprintf_r+0xa2>
 80086a6:	2a25      	cmp	r2, #37	; 0x25
 80086a8:	d1f9      	bne.n	800869e <_vfiprintf_r+0x96>
 80086aa:	ebba 0b04 	subs.w	fp, sl, r4
 80086ae:	d00b      	beq.n	80086c8 <_vfiprintf_r+0xc0>
 80086b0:	465b      	mov	r3, fp
 80086b2:	4622      	mov	r2, r4
 80086b4:	4629      	mov	r1, r5
 80086b6:	4630      	mov	r0, r6
 80086b8:	f7ff ff93 	bl	80085e2 <__sfputs_r>
 80086bc:	3001      	adds	r0, #1
 80086be:	f000 80aa 	beq.w	8008816 <_vfiprintf_r+0x20e>
 80086c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086c4:	445a      	add	r2, fp
 80086c6:	9209      	str	r2, [sp, #36]	; 0x24
 80086c8:	f89a 3000 	ldrb.w	r3, [sl]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	f000 80a2 	beq.w	8008816 <_vfiprintf_r+0x20e>
 80086d2:	2300      	movs	r3, #0
 80086d4:	f04f 32ff 	mov.w	r2, #4294967295
 80086d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086dc:	f10a 0a01 	add.w	sl, sl, #1
 80086e0:	9304      	str	r3, [sp, #16]
 80086e2:	9307      	str	r3, [sp, #28]
 80086e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80086e8:	931a      	str	r3, [sp, #104]	; 0x68
 80086ea:	4654      	mov	r4, sl
 80086ec:	2205      	movs	r2, #5
 80086ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086f2:	4858      	ldr	r0, [pc, #352]	; (8008854 <_vfiprintf_r+0x24c>)
 80086f4:	f7f7 fd74 	bl	80001e0 <memchr>
 80086f8:	9a04      	ldr	r2, [sp, #16]
 80086fa:	b9d8      	cbnz	r0, 8008734 <_vfiprintf_r+0x12c>
 80086fc:	06d1      	lsls	r1, r2, #27
 80086fe:	bf44      	itt	mi
 8008700:	2320      	movmi	r3, #32
 8008702:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008706:	0713      	lsls	r3, r2, #28
 8008708:	bf44      	itt	mi
 800870a:	232b      	movmi	r3, #43	; 0x2b
 800870c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008710:	f89a 3000 	ldrb.w	r3, [sl]
 8008714:	2b2a      	cmp	r3, #42	; 0x2a
 8008716:	d015      	beq.n	8008744 <_vfiprintf_r+0x13c>
 8008718:	9a07      	ldr	r2, [sp, #28]
 800871a:	4654      	mov	r4, sl
 800871c:	2000      	movs	r0, #0
 800871e:	f04f 0c0a 	mov.w	ip, #10
 8008722:	4621      	mov	r1, r4
 8008724:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008728:	3b30      	subs	r3, #48	; 0x30
 800872a:	2b09      	cmp	r3, #9
 800872c:	d94e      	bls.n	80087cc <_vfiprintf_r+0x1c4>
 800872e:	b1b0      	cbz	r0, 800875e <_vfiprintf_r+0x156>
 8008730:	9207      	str	r2, [sp, #28]
 8008732:	e014      	b.n	800875e <_vfiprintf_r+0x156>
 8008734:	eba0 0308 	sub.w	r3, r0, r8
 8008738:	fa09 f303 	lsl.w	r3, r9, r3
 800873c:	4313      	orrs	r3, r2
 800873e:	9304      	str	r3, [sp, #16]
 8008740:	46a2      	mov	sl, r4
 8008742:	e7d2      	b.n	80086ea <_vfiprintf_r+0xe2>
 8008744:	9b03      	ldr	r3, [sp, #12]
 8008746:	1d19      	adds	r1, r3, #4
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	9103      	str	r1, [sp, #12]
 800874c:	2b00      	cmp	r3, #0
 800874e:	bfbb      	ittet	lt
 8008750:	425b      	neglt	r3, r3
 8008752:	f042 0202 	orrlt.w	r2, r2, #2
 8008756:	9307      	strge	r3, [sp, #28]
 8008758:	9307      	strlt	r3, [sp, #28]
 800875a:	bfb8      	it	lt
 800875c:	9204      	strlt	r2, [sp, #16]
 800875e:	7823      	ldrb	r3, [r4, #0]
 8008760:	2b2e      	cmp	r3, #46	; 0x2e
 8008762:	d10c      	bne.n	800877e <_vfiprintf_r+0x176>
 8008764:	7863      	ldrb	r3, [r4, #1]
 8008766:	2b2a      	cmp	r3, #42	; 0x2a
 8008768:	d135      	bne.n	80087d6 <_vfiprintf_r+0x1ce>
 800876a:	9b03      	ldr	r3, [sp, #12]
 800876c:	1d1a      	adds	r2, r3, #4
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	9203      	str	r2, [sp, #12]
 8008772:	2b00      	cmp	r3, #0
 8008774:	bfb8      	it	lt
 8008776:	f04f 33ff 	movlt.w	r3, #4294967295
 800877a:	3402      	adds	r4, #2
 800877c:	9305      	str	r3, [sp, #20]
 800877e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008864 <_vfiprintf_r+0x25c>
 8008782:	7821      	ldrb	r1, [r4, #0]
 8008784:	2203      	movs	r2, #3
 8008786:	4650      	mov	r0, sl
 8008788:	f7f7 fd2a 	bl	80001e0 <memchr>
 800878c:	b140      	cbz	r0, 80087a0 <_vfiprintf_r+0x198>
 800878e:	2340      	movs	r3, #64	; 0x40
 8008790:	eba0 000a 	sub.w	r0, r0, sl
 8008794:	fa03 f000 	lsl.w	r0, r3, r0
 8008798:	9b04      	ldr	r3, [sp, #16]
 800879a:	4303      	orrs	r3, r0
 800879c:	3401      	adds	r4, #1
 800879e:	9304      	str	r3, [sp, #16]
 80087a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087a4:	482c      	ldr	r0, [pc, #176]	; (8008858 <_vfiprintf_r+0x250>)
 80087a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087aa:	2206      	movs	r2, #6
 80087ac:	f7f7 fd18 	bl	80001e0 <memchr>
 80087b0:	2800      	cmp	r0, #0
 80087b2:	d03f      	beq.n	8008834 <_vfiprintf_r+0x22c>
 80087b4:	4b29      	ldr	r3, [pc, #164]	; (800885c <_vfiprintf_r+0x254>)
 80087b6:	bb1b      	cbnz	r3, 8008800 <_vfiprintf_r+0x1f8>
 80087b8:	9b03      	ldr	r3, [sp, #12]
 80087ba:	3307      	adds	r3, #7
 80087bc:	f023 0307 	bic.w	r3, r3, #7
 80087c0:	3308      	adds	r3, #8
 80087c2:	9303      	str	r3, [sp, #12]
 80087c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087c6:	443b      	add	r3, r7
 80087c8:	9309      	str	r3, [sp, #36]	; 0x24
 80087ca:	e767      	b.n	800869c <_vfiprintf_r+0x94>
 80087cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80087d0:	460c      	mov	r4, r1
 80087d2:	2001      	movs	r0, #1
 80087d4:	e7a5      	b.n	8008722 <_vfiprintf_r+0x11a>
 80087d6:	2300      	movs	r3, #0
 80087d8:	3401      	adds	r4, #1
 80087da:	9305      	str	r3, [sp, #20]
 80087dc:	4619      	mov	r1, r3
 80087de:	f04f 0c0a 	mov.w	ip, #10
 80087e2:	4620      	mov	r0, r4
 80087e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087e8:	3a30      	subs	r2, #48	; 0x30
 80087ea:	2a09      	cmp	r2, #9
 80087ec:	d903      	bls.n	80087f6 <_vfiprintf_r+0x1ee>
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d0c5      	beq.n	800877e <_vfiprintf_r+0x176>
 80087f2:	9105      	str	r1, [sp, #20]
 80087f4:	e7c3      	b.n	800877e <_vfiprintf_r+0x176>
 80087f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80087fa:	4604      	mov	r4, r0
 80087fc:	2301      	movs	r3, #1
 80087fe:	e7f0      	b.n	80087e2 <_vfiprintf_r+0x1da>
 8008800:	ab03      	add	r3, sp, #12
 8008802:	9300      	str	r3, [sp, #0]
 8008804:	462a      	mov	r2, r5
 8008806:	4b16      	ldr	r3, [pc, #88]	; (8008860 <_vfiprintf_r+0x258>)
 8008808:	a904      	add	r1, sp, #16
 800880a:	4630      	mov	r0, r6
 800880c:	f3af 8000 	nop.w
 8008810:	4607      	mov	r7, r0
 8008812:	1c78      	adds	r0, r7, #1
 8008814:	d1d6      	bne.n	80087c4 <_vfiprintf_r+0x1bc>
 8008816:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008818:	07d9      	lsls	r1, r3, #31
 800881a:	d405      	bmi.n	8008828 <_vfiprintf_r+0x220>
 800881c:	89ab      	ldrh	r3, [r5, #12]
 800881e:	059a      	lsls	r2, r3, #22
 8008820:	d402      	bmi.n	8008828 <_vfiprintf_r+0x220>
 8008822:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008824:	f7ff fd7f 	bl	8008326 <__retarget_lock_release_recursive>
 8008828:	89ab      	ldrh	r3, [r5, #12]
 800882a:	065b      	lsls	r3, r3, #25
 800882c:	f53f af12 	bmi.w	8008654 <_vfiprintf_r+0x4c>
 8008830:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008832:	e711      	b.n	8008658 <_vfiprintf_r+0x50>
 8008834:	ab03      	add	r3, sp, #12
 8008836:	9300      	str	r3, [sp, #0]
 8008838:	462a      	mov	r2, r5
 800883a:	4b09      	ldr	r3, [pc, #36]	; (8008860 <_vfiprintf_r+0x258>)
 800883c:	a904      	add	r1, sp, #16
 800883e:	4630      	mov	r0, r6
 8008840:	f000 f880 	bl	8008944 <_printf_i>
 8008844:	e7e4      	b.n	8008810 <_vfiprintf_r+0x208>
 8008846:	bf00      	nop
 8008848:	08009618 	.word	0x08009618
 800884c:	08009638 	.word	0x08009638
 8008850:	080095f8 	.word	0x080095f8
 8008854:	08009658 	.word	0x08009658
 8008858:	08009662 	.word	0x08009662
 800885c:	00000000 	.word	0x00000000
 8008860:	080085e3 	.word	0x080085e3
 8008864:	0800965e 	.word	0x0800965e

08008868 <_printf_common>:
 8008868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800886c:	4616      	mov	r6, r2
 800886e:	4699      	mov	r9, r3
 8008870:	688a      	ldr	r2, [r1, #8]
 8008872:	690b      	ldr	r3, [r1, #16]
 8008874:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008878:	4293      	cmp	r3, r2
 800887a:	bfb8      	it	lt
 800887c:	4613      	movlt	r3, r2
 800887e:	6033      	str	r3, [r6, #0]
 8008880:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008884:	4607      	mov	r7, r0
 8008886:	460c      	mov	r4, r1
 8008888:	b10a      	cbz	r2, 800888e <_printf_common+0x26>
 800888a:	3301      	adds	r3, #1
 800888c:	6033      	str	r3, [r6, #0]
 800888e:	6823      	ldr	r3, [r4, #0]
 8008890:	0699      	lsls	r1, r3, #26
 8008892:	bf42      	ittt	mi
 8008894:	6833      	ldrmi	r3, [r6, #0]
 8008896:	3302      	addmi	r3, #2
 8008898:	6033      	strmi	r3, [r6, #0]
 800889a:	6825      	ldr	r5, [r4, #0]
 800889c:	f015 0506 	ands.w	r5, r5, #6
 80088a0:	d106      	bne.n	80088b0 <_printf_common+0x48>
 80088a2:	f104 0a19 	add.w	sl, r4, #25
 80088a6:	68e3      	ldr	r3, [r4, #12]
 80088a8:	6832      	ldr	r2, [r6, #0]
 80088aa:	1a9b      	subs	r3, r3, r2
 80088ac:	42ab      	cmp	r3, r5
 80088ae:	dc26      	bgt.n	80088fe <_printf_common+0x96>
 80088b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80088b4:	1e13      	subs	r3, r2, #0
 80088b6:	6822      	ldr	r2, [r4, #0]
 80088b8:	bf18      	it	ne
 80088ba:	2301      	movne	r3, #1
 80088bc:	0692      	lsls	r2, r2, #26
 80088be:	d42b      	bmi.n	8008918 <_printf_common+0xb0>
 80088c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80088c4:	4649      	mov	r1, r9
 80088c6:	4638      	mov	r0, r7
 80088c8:	47c0      	blx	r8
 80088ca:	3001      	adds	r0, #1
 80088cc:	d01e      	beq.n	800890c <_printf_common+0xa4>
 80088ce:	6823      	ldr	r3, [r4, #0]
 80088d0:	68e5      	ldr	r5, [r4, #12]
 80088d2:	6832      	ldr	r2, [r6, #0]
 80088d4:	f003 0306 	and.w	r3, r3, #6
 80088d8:	2b04      	cmp	r3, #4
 80088da:	bf08      	it	eq
 80088dc:	1aad      	subeq	r5, r5, r2
 80088de:	68a3      	ldr	r3, [r4, #8]
 80088e0:	6922      	ldr	r2, [r4, #16]
 80088e2:	bf0c      	ite	eq
 80088e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80088e8:	2500      	movne	r5, #0
 80088ea:	4293      	cmp	r3, r2
 80088ec:	bfc4      	itt	gt
 80088ee:	1a9b      	subgt	r3, r3, r2
 80088f0:	18ed      	addgt	r5, r5, r3
 80088f2:	2600      	movs	r6, #0
 80088f4:	341a      	adds	r4, #26
 80088f6:	42b5      	cmp	r5, r6
 80088f8:	d11a      	bne.n	8008930 <_printf_common+0xc8>
 80088fa:	2000      	movs	r0, #0
 80088fc:	e008      	b.n	8008910 <_printf_common+0xa8>
 80088fe:	2301      	movs	r3, #1
 8008900:	4652      	mov	r2, sl
 8008902:	4649      	mov	r1, r9
 8008904:	4638      	mov	r0, r7
 8008906:	47c0      	blx	r8
 8008908:	3001      	adds	r0, #1
 800890a:	d103      	bne.n	8008914 <_printf_common+0xac>
 800890c:	f04f 30ff 	mov.w	r0, #4294967295
 8008910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008914:	3501      	adds	r5, #1
 8008916:	e7c6      	b.n	80088a6 <_printf_common+0x3e>
 8008918:	18e1      	adds	r1, r4, r3
 800891a:	1c5a      	adds	r2, r3, #1
 800891c:	2030      	movs	r0, #48	; 0x30
 800891e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008922:	4422      	add	r2, r4
 8008924:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008928:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800892c:	3302      	adds	r3, #2
 800892e:	e7c7      	b.n	80088c0 <_printf_common+0x58>
 8008930:	2301      	movs	r3, #1
 8008932:	4622      	mov	r2, r4
 8008934:	4649      	mov	r1, r9
 8008936:	4638      	mov	r0, r7
 8008938:	47c0      	blx	r8
 800893a:	3001      	adds	r0, #1
 800893c:	d0e6      	beq.n	800890c <_printf_common+0xa4>
 800893e:	3601      	adds	r6, #1
 8008940:	e7d9      	b.n	80088f6 <_printf_common+0x8e>
	...

08008944 <_printf_i>:
 8008944:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008948:	7e0f      	ldrb	r7, [r1, #24]
 800894a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800894c:	2f78      	cmp	r7, #120	; 0x78
 800894e:	4691      	mov	r9, r2
 8008950:	4680      	mov	r8, r0
 8008952:	460c      	mov	r4, r1
 8008954:	469a      	mov	sl, r3
 8008956:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800895a:	d807      	bhi.n	800896c <_printf_i+0x28>
 800895c:	2f62      	cmp	r7, #98	; 0x62
 800895e:	d80a      	bhi.n	8008976 <_printf_i+0x32>
 8008960:	2f00      	cmp	r7, #0
 8008962:	f000 80d8 	beq.w	8008b16 <_printf_i+0x1d2>
 8008966:	2f58      	cmp	r7, #88	; 0x58
 8008968:	f000 80a3 	beq.w	8008ab2 <_printf_i+0x16e>
 800896c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008970:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008974:	e03a      	b.n	80089ec <_printf_i+0xa8>
 8008976:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800897a:	2b15      	cmp	r3, #21
 800897c:	d8f6      	bhi.n	800896c <_printf_i+0x28>
 800897e:	a101      	add	r1, pc, #4	; (adr r1, 8008984 <_printf_i+0x40>)
 8008980:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008984:	080089dd 	.word	0x080089dd
 8008988:	080089f1 	.word	0x080089f1
 800898c:	0800896d 	.word	0x0800896d
 8008990:	0800896d 	.word	0x0800896d
 8008994:	0800896d 	.word	0x0800896d
 8008998:	0800896d 	.word	0x0800896d
 800899c:	080089f1 	.word	0x080089f1
 80089a0:	0800896d 	.word	0x0800896d
 80089a4:	0800896d 	.word	0x0800896d
 80089a8:	0800896d 	.word	0x0800896d
 80089ac:	0800896d 	.word	0x0800896d
 80089b0:	08008afd 	.word	0x08008afd
 80089b4:	08008a21 	.word	0x08008a21
 80089b8:	08008adf 	.word	0x08008adf
 80089bc:	0800896d 	.word	0x0800896d
 80089c0:	0800896d 	.word	0x0800896d
 80089c4:	08008b1f 	.word	0x08008b1f
 80089c8:	0800896d 	.word	0x0800896d
 80089cc:	08008a21 	.word	0x08008a21
 80089d0:	0800896d 	.word	0x0800896d
 80089d4:	0800896d 	.word	0x0800896d
 80089d8:	08008ae7 	.word	0x08008ae7
 80089dc:	682b      	ldr	r3, [r5, #0]
 80089de:	1d1a      	adds	r2, r3, #4
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	602a      	str	r2, [r5, #0]
 80089e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80089ec:	2301      	movs	r3, #1
 80089ee:	e0a3      	b.n	8008b38 <_printf_i+0x1f4>
 80089f0:	6820      	ldr	r0, [r4, #0]
 80089f2:	6829      	ldr	r1, [r5, #0]
 80089f4:	0606      	lsls	r6, r0, #24
 80089f6:	f101 0304 	add.w	r3, r1, #4
 80089fa:	d50a      	bpl.n	8008a12 <_printf_i+0xce>
 80089fc:	680e      	ldr	r6, [r1, #0]
 80089fe:	602b      	str	r3, [r5, #0]
 8008a00:	2e00      	cmp	r6, #0
 8008a02:	da03      	bge.n	8008a0c <_printf_i+0xc8>
 8008a04:	232d      	movs	r3, #45	; 0x2d
 8008a06:	4276      	negs	r6, r6
 8008a08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a0c:	485e      	ldr	r0, [pc, #376]	; (8008b88 <_printf_i+0x244>)
 8008a0e:	230a      	movs	r3, #10
 8008a10:	e019      	b.n	8008a46 <_printf_i+0x102>
 8008a12:	680e      	ldr	r6, [r1, #0]
 8008a14:	602b      	str	r3, [r5, #0]
 8008a16:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008a1a:	bf18      	it	ne
 8008a1c:	b236      	sxthne	r6, r6
 8008a1e:	e7ef      	b.n	8008a00 <_printf_i+0xbc>
 8008a20:	682b      	ldr	r3, [r5, #0]
 8008a22:	6820      	ldr	r0, [r4, #0]
 8008a24:	1d19      	adds	r1, r3, #4
 8008a26:	6029      	str	r1, [r5, #0]
 8008a28:	0601      	lsls	r1, r0, #24
 8008a2a:	d501      	bpl.n	8008a30 <_printf_i+0xec>
 8008a2c:	681e      	ldr	r6, [r3, #0]
 8008a2e:	e002      	b.n	8008a36 <_printf_i+0xf2>
 8008a30:	0646      	lsls	r6, r0, #25
 8008a32:	d5fb      	bpl.n	8008a2c <_printf_i+0xe8>
 8008a34:	881e      	ldrh	r6, [r3, #0]
 8008a36:	4854      	ldr	r0, [pc, #336]	; (8008b88 <_printf_i+0x244>)
 8008a38:	2f6f      	cmp	r7, #111	; 0x6f
 8008a3a:	bf0c      	ite	eq
 8008a3c:	2308      	moveq	r3, #8
 8008a3e:	230a      	movne	r3, #10
 8008a40:	2100      	movs	r1, #0
 8008a42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a46:	6865      	ldr	r5, [r4, #4]
 8008a48:	60a5      	str	r5, [r4, #8]
 8008a4a:	2d00      	cmp	r5, #0
 8008a4c:	bfa2      	ittt	ge
 8008a4e:	6821      	ldrge	r1, [r4, #0]
 8008a50:	f021 0104 	bicge.w	r1, r1, #4
 8008a54:	6021      	strge	r1, [r4, #0]
 8008a56:	b90e      	cbnz	r6, 8008a5c <_printf_i+0x118>
 8008a58:	2d00      	cmp	r5, #0
 8008a5a:	d04d      	beq.n	8008af8 <_printf_i+0x1b4>
 8008a5c:	4615      	mov	r5, r2
 8008a5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008a62:	fb03 6711 	mls	r7, r3, r1, r6
 8008a66:	5dc7      	ldrb	r7, [r0, r7]
 8008a68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008a6c:	4637      	mov	r7, r6
 8008a6e:	42bb      	cmp	r3, r7
 8008a70:	460e      	mov	r6, r1
 8008a72:	d9f4      	bls.n	8008a5e <_printf_i+0x11a>
 8008a74:	2b08      	cmp	r3, #8
 8008a76:	d10b      	bne.n	8008a90 <_printf_i+0x14c>
 8008a78:	6823      	ldr	r3, [r4, #0]
 8008a7a:	07de      	lsls	r6, r3, #31
 8008a7c:	d508      	bpl.n	8008a90 <_printf_i+0x14c>
 8008a7e:	6923      	ldr	r3, [r4, #16]
 8008a80:	6861      	ldr	r1, [r4, #4]
 8008a82:	4299      	cmp	r1, r3
 8008a84:	bfde      	ittt	le
 8008a86:	2330      	movle	r3, #48	; 0x30
 8008a88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008a8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008a90:	1b52      	subs	r2, r2, r5
 8008a92:	6122      	str	r2, [r4, #16]
 8008a94:	f8cd a000 	str.w	sl, [sp]
 8008a98:	464b      	mov	r3, r9
 8008a9a:	aa03      	add	r2, sp, #12
 8008a9c:	4621      	mov	r1, r4
 8008a9e:	4640      	mov	r0, r8
 8008aa0:	f7ff fee2 	bl	8008868 <_printf_common>
 8008aa4:	3001      	adds	r0, #1
 8008aa6:	d14c      	bne.n	8008b42 <_printf_i+0x1fe>
 8008aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8008aac:	b004      	add	sp, #16
 8008aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ab2:	4835      	ldr	r0, [pc, #212]	; (8008b88 <_printf_i+0x244>)
 8008ab4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008ab8:	6829      	ldr	r1, [r5, #0]
 8008aba:	6823      	ldr	r3, [r4, #0]
 8008abc:	f851 6b04 	ldr.w	r6, [r1], #4
 8008ac0:	6029      	str	r1, [r5, #0]
 8008ac2:	061d      	lsls	r5, r3, #24
 8008ac4:	d514      	bpl.n	8008af0 <_printf_i+0x1ac>
 8008ac6:	07df      	lsls	r7, r3, #31
 8008ac8:	bf44      	itt	mi
 8008aca:	f043 0320 	orrmi.w	r3, r3, #32
 8008ace:	6023      	strmi	r3, [r4, #0]
 8008ad0:	b91e      	cbnz	r6, 8008ada <_printf_i+0x196>
 8008ad2:	6823      	ldr	r3, [r4, #0]
 8008ad4:	f023 0320 	bic.w	r3, r3, #32
 8008ad8:	6023      	str	r3, [r4, #0]
 8008ada:	2310      	movs	r3, #16
 8008adc:	e7b0      	b.n	8008a40 <_printf_i+0xfc>
 8008ade:	6823      	ldr	r3, [r4, #0]
 8008ae0:	f043 0320 	orr.w	r3, r3, #32
 8008ae4:	6023      	str	r3, [r4, #0]
 8008ae6:	2378      	movs	r3, #120	; 0x78
 8008ae8:	4828      	ldr	r0, [pc, #160]	; (8008b8c <_printf_i+0x248>)
 8008aea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008aee:	e7e3      	b.n	8008ab8 <_printf_i+0x174>
 8008af0:	0659      	lsls	r1, r3, #25
 8008af2:	bf48      	it	mi
 8008af4:	b2b6      	uxthmi	r6, r6
 8008af6:	e7e6      	b.n	8008ac6 <_printf_i+0x182>
 8008af8:	4615      	mov	r5, r2
 8008afa:	e7bb      	b.n	8008a74 <_printf_i+0x130>
 8008afc:	682b      	ldr	r3, [r5, #0]
 8008afe:	6826      	ldr	r6, [r4, #0]
 8008b00:	6961      	ldr	r1, [r4, #20]
 8008b02:	1d18      	adds	r0, r3, #4
 8008b04:	6028      	str	r0, [r5, #0]
 8008b06:	0635      	lsls	r5, r6, #24
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	d501      	bpl.n	8008b10 <_printf_i+0x1cc>
 8008b0c:	6019      	str	r1, [r3, #0]
 8008b0e:	e002      	b.n	8008b16 <_printf_i+0x1d2>
 8008b10:	0670      	lsls	r0, r6, #25
 8008b12:	d5fb      	bpl.n	8008b0c <_printf_i+0x1c8>
 8008b14:	8019      	strh	r1, [r3, #0]
 8008b16:	2300      	movs	r3, #0
 8008b18:	6123      	str	r3, [r4, #16]
 8008b1a:	4615      	mov	r5, r2
 8008b1c:	e7ba      	b.n	8008a94 <_printf_i+0x150>
 8008b1e:	682b      	ldr	r3, [r5, #0]
 8008b20:	1d1a      	adds	r2, r3, #4
 8008b22:	602a      	str	r2, [r5, #0]
 8008b24:	681d      	ldr	r5, [r3, #0]
 8008b26:	6862      	ldr	r2, [r4, #4]
 8008b28:	2100      	movs	r1, #0
 8008b2a:	4628      	mov	r0, r5
 8008b2c:	f7f7 fb58 	bl	80001e0 <memchr>
 8008b30:	b108      	cbz	r0, 8008b36 <_printf_i+0x1f2>
 8008b32:	1b40      	subs	r0, r0, r5
 8008b34:	6060      	str	r0, [r4, #4]
 8008b36:	6863      	ldr	r3, [r4, #4]
 8008b38:	6123      	str	r3, [r4, #16]
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b40:	e7a8      	b.n	8008a94 <_printf_i+0x150>
 8008b42:	6923      	ldr	r3, [r4, #16]
 8008b44:	462a      	mov	r2, r5
 8008b46:	4649      	mov	r1, r9
 8008b48:	4640      	mov	r0, r8
 8008b4a:	47d0      	blx	sl
 8008b4c:	3001      	adds	r0, #1
 8008b4e:	d0ab      	beq.n	8008aa8 <_printf_i+0x164>
 8008b50:	6823      	ldr	r3, [r4, #0]
 8008b52:	079b      	lsls	r3, r3, #30
 8008b54:	d413      	bmi.n	8008b7e <_printf_i+0x23a>
 8008b56:	68e0      	ldr	r0, [r4, #12]
 8008b58:	9b03      	ldr	r3, [sp, #12]
 8008b5a:	4298      	cmp	r0, r3
 8008b5c:	bfb8      	it	lt
 8008b5e:	4618      	movlt	r0, r3
 8008b60:	e7a4      	b.n	8008aac <_printf_i+0x168>
 8008b62:	2301      	movs	r3, #1
 8008b64:	4632      	mov	r2, r6
 8008b66:	4649      	mov	r1, r9
 8008b68:	4640      	mov	r0, r8
 8008b6a:	47d0      	blx	sl
 8008b6c:	3001      	adds	r0, #1
 8008b6e:	d09b      	beq.n	8008aa8 <_printf_i+0x164>
 8008b70:	3501      	adds	r5, #1
 8008b72:	68e3      	ldr	r3, [r4, #12]
 8008b74:	9903      	ldr	r1, [sp, #12]
 8008b76:	1a5b      	subs	r3, r3, r1
 8008b78:	42ab      	cmp	r3, r5
 8008b7a:	dcf2      	bgt.n	8008b62 <_printf_i+0x21e>
 8008b7c:	e7eb      	b.n	8008b56 <_printf_i+0x212>
 8008b7e:	2500      	movs	r5, #0
 8008b80:	f104 0619 	add.w	r6, r4, #25
 8008b84:	e7f5      	b.n	8008b72 <_printf_i+0x22e>
 8008b86:	bf00      	nop
 8008b88:	08009669 	.word	0x08009669
 8008b8c:	0800967a 	.word	0x0800967a

08008b90 <_sbrk_r>:
 8008b90:	b538      	push	{r3, r4, r5, lr}
 8008b92:	4d06      	ldr	r5, [pc, #24]	; (8008bac <_sbrk_r+0x1c>)
 8008b94:	2300      	movs	r3, #0
 8008b96:	4604      	mov	r4, r0
 8008b98:	4608      	mov	r0, r1
 8008b9a:	602b      	str	r3, [r5, #0]
 8008b9c:	f7f9 f8c6 	bl	8001d2c <_sbrk>
 8008ba0:	1c43      	adds	r3, r0, #1
 8008ba2:	d102      	bne.n	8008baa <_sbrk_r+0x1a>
 8008ba4:	682b      	ldr	r3, [r5, #0]
 8008ba6:	b103      	cbz	r3, 8008baa <_sbrk_r+0x1a>
 8008ba8:	6023      	str	r3, [r4, #0]
 8008baa:	bd38      	pop	{r3, r4, r5, pc}
 8008bac:	20003470 	.word	0x20003470

08008bb0 <__sread>:
 8008bb0:	b510      	push	{r4, lr}
 8008bb2:	460c      	mov	r4, r1
 8008bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bb8:	f000 f8a0 	bl	8008cfc <_read_r>
 8008bbc:	2800      	cmp	r0, #0
 8008bbe:	bfab      	itete	ge
 8008bc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008bc2:	89a3      	ldrhlt	r3, [r4, #12]
 8008bc4:	181b      	addge	r3, r3, r0
 8008bc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008bca:	bfac      	ite	ge
 8008bcc:	6563      	strge	r3, [r4, #84]	; 0x54
 8008bce:	81a3      	strhlt	r3, [r4, #12]
 8008bd0:	bd10      	pop	{r4, pc}

08008bd2 <__swrite>:
 8008bd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bd6:	461f      	mov	r7, r3
 8008bd8:	898b      	ldrh	r3, [r1, #12]
 8008bda:	05db      	lsls	r3, r3, #23
 8008bdc:	4605      	mov	r5, r0
 8008bde:	460c      	mov	r4, r1
 8008be0:	4616      	mov	r6, r2
 8008be2:	d505      	bpl.n	8008bf0 <__swrite+0x1e>
 8008be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008be8:	2302      	movs	r3, #2
 8008bea:	2200      	movs	r2, #0
 8008bec:	f000 f868 	bl	8008cc0 <_lseek_r>
 8008bf0:	89a3      	ldrh	r3, [r4, #12]
 8008bf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008bfa:	81a3      	strh	r3, [r4, #12]
 8008bfc:	4632      	mov	r2, r6
 8008bfe:	463b      	mov	r3, r7
 8008c00:	4628      	mov	r0, r5
 8008c02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c06:	f000 b817 	b.w	8008c38 <_write_r>

08008c0a <__sseek>:
 8008c0a:	b510      	push	{r4, lr}
 8008c0c:	460c      	mov	r4, r1
 8008c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c12:	f000 f855 	bl	8008cc0 <_lseek_r>
 8008c16:	1c43      	adds	r3, r0, #1
 8008c18:	89a3      	ldrh	r3, [r4, #12]
 8008c1a:	bf15      	itete	ne
 8008c1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008c1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008c22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008c26:	81a3      	strheq	r3, [r4, #12]
 8008c28:	bf18      	it	ne
 8008c2a:	81a3      	strhne	r3, [r4, #12]
 8008c2c:	bd10      	pop	{r4, pc}

08008c2e <__sclose>:
 8008c2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c32:	f000 b813 	b.w	8008c5c <_close_r>
	...

08008c38 <_write_r>:
 8008c38:	b538      	push	{r3, r4, r5, lr}
 8008c3a:	4d07      	ldr	r5, [pc, #28]	; (8008c58 <_write_r+0x20>)
 8008c3c:	4604      	mov	r4, r0
 8008c3e:	4608      	mov	r0, r1
 8008c40:	4611      	mov	r1, r2
 8008c42:	2200      	movs	r2, #0
 8008c44:	602a      	str	r2, [r5, #0]
 8008c46:	461a      	mov	r2, r3
 8008c48:	f7f9 f81f 	bl	8001c8a <_write>
 8008c4c:	1c43      	adds	r3, r0, #1
 8008c4e:	d102      	bne.n	8008c56 <_write_r+0x1e>
 8008c50:	682b      	ldr	r3, [r5, #0]
 8008c52:	b103      	cbz	r3, 8008c56 <_write_r+0x1e>
 8008c54:	6023      	str	r3, [r4, #0]
 8008c56:	bd38      	pop	{r3, r4, r5, pc}
 8008c58:	20003470 	.word	0x20003470

08008c5c <_close_r>:
 8008c5c:	b538      	push	{r3, r4, r5, lr}
 8008c5e:	4d06      	ldr	r5, [pc, #24]	; (8008c78 <_close_r+0x1c>)
 8008c60:	2300      	movs	r3, #0
 8008c62:	4604      	mov	r4, r0
 8008c64:	4608      	mov	r0, r1
 8008c66:	602b      	str	r3, [r5, #0]
 8008c68:	f7f9 f82b 	bl	8001cc2 <_close>
 8008c6c:	1c43      	adds	r3, r0, #1
 8008c6e:	d102      	bne.n	8008c76 <_close_r+0x1a>
 8008c70:	682b      	ldr	r3, [r5, #0]
 8008c72:	b103      	cbz	r3, 8008c76 <_close_r+0x1a>
 8008c74:	6023      	str	r3, [r4, #0]
 8008c76:	bd38      	pop	{r3, r4, r5, pc}
 8008c78:	20003470 	.word	0x20003470

08008c7c <_fstat_r>:
 8008c7c:	b538      	push	{r3, r4, r5, lr}
 8008c7e:	4d07      	ldr	r5, [pc, #28]	; (8008c9c <_fstat_r+0x20>)
 8008c80:	2300      	movs	r3, #0
 8008c82:	4604      	mov	r4, r0
 8008c84:	4608      	mov	r0, r1
 8008c86:	4611      	mov	r1, r2
 8008c88:	602b      	str	r3, [r5, #0]
 8008c8a:	f7f9 f826 	bl	8001cda <_fstat>
 8008c8e:	1c43      	adds	r3, r0, #1
 8008c90:	d102      	bne.n	8008c98 <_fstat_r+0x1c>
 8008c92:	682b      	ldr	r3, [r5, #0]
 8008c94:	b103      	cbz	r3, 8008c98 <_fstat_r+0x1c>
 8008c96:	6023      	str	r3, [r4, #0]
 8008c98:	bd38      	pop	{r3, r4, r5, pc}
 8008c9a:	bf00      	nop
 8008c9c:	20003470 	.word	0x20003470

08008ca0 <_isatty_r>:
 8008ca0:	b538      	push	{r3, r4, r5, lr}
 8008ca2:	4d06      	ldr	r5, [pc, #24]	; (8008cbc <_isatty_r+0x1c>)
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	4604      	mov	r4, r0
 8008ca8:	4608      	mov	r0, r1
 8008caa:	602b      	str	r3, [r5, #0]
 8008cac:	f7f9 f825 	bl	8001cfa <_isatty>
 8008cb0:	1c43      	adds	r3, r0, #1
 8008cb2:	d102      	bne.n	8008cba <_isatty_r+0x1a>
 8008cb4:	682b      	ldr	r3, [r5, #0]
 8008cb6:	b103      	cbz	r3, 8008cba <_isatty_r+0x1a>
 8008cb8:	6023      	str	r3, [r4, #0]
 8008cba:	bd38      	pop	{r3, r4, r5, pc}
 8008cbc:	20003470 	.word	0x20003470

08008cc0 <_lseek_r>:
 8008cc0:	b538      	push	{r3, r4, r5, lr}
 8008cc2:	4d07      	ldr	r5, [pc, #28]	; (8008ce0 <_lseek_r+0x20>)
 8008cc4:	4604      	mov	r4, r0
 8008cc6:	4608      	mov	r0, r1
 8008cc8:	4611      	mov	r1, r2
 8008cca:	2200      	movs	r2, #0
 8008ccc:	602a      	str	r2, [r5, #0]
 8008cce:	461a      	mov	r2, r3
 8008cd0:	f7f9 f81e 	bl	8001d10 <_lseek>
 8008cd4:	1c43      	adds	r3, r0, #1
 8008cd6:	d102      	bne.n	8008cde <_lseek_r+0x1e>
 8008cd8:	682b      	ldr	r3, [r5, #0]
 8008cda:	b103      	cbz	r3, 8008cde <_lseek_r+0x1e>
 8008cdc:	6023      	str	r3, [r4, #0]
 8008cde:	bd38      	pop	{r3, r4, r5, pc}
 8008ce0:	20003470 	.word	0x20003470

08008ce4 <__malloc_lock>:
 8008ce4:	4801      	ldr	r0, [pc, #4]	; (8008cec <__malloc_lock+0x8>)
 8008ce6:	f7ff bb1d 	b.w	8008324 <__retarget_lock_acquire_recursive>
 8008cea:	bf00      	nop
 8008cec:	20003464 	.word	0x20003464

08008cf0 <__malloc_unlock>:
 8008cf0:	4801      	ldr	r0, [pc, #4]	; (8008cf8 <__malloc_unlock+0x8>)
 8008cf2:	f7ff bb18 	b.w	8008326 <__retarget_lock_release_recursive>
 8008cf6:	bf00      	nop
 8008cf8:	20003464 	.word	0x20003464

08008cfc <_read_r>:
 8008cfc:	b538      	push	{r3, r4, r5, lr}
 8008cfe:	4d07      	ldr	r5, [pc, #28]	; (8008d1c <_read_r+0x20>)
 8008d00:	4604      	mov	r4, r0
 8008d02:	4608      	mov	r0, r1
 8008d04:	4611      	mov	r1, r2
 8008d06:	2200      	movs	r2, #0
 8008d08:	602a      	str	r2, [r5, #0]
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	f7f8 ffa0 	bl	8001c50 <_read>
 8008d10:	1c43      	adds	r3, r0, #1
 8008d12:	d102      	bne.n	8008d1a <_read_r+0x1e>
 8008d14:	682b      	ldr	r3, [r5, #0]
 8008d16:	b103      	cbz	r3, 8008d1a <_read_r+0x1e>
 8008d18:	6023      	str	r3, [r4, #0]
 8008d1a:	bd38      	pop	{r3, r4, r5, pc}
 8008d1c:	20003470 	.word	0x20003470

08008d20 <_init>:
 8008d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d22:	bf00      	nop
 8008d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d26:	bc08      	pop	{r3}
 8008d28:	469e      	mov	lr, r3
 8008d2a:	4770      	bx	lr

08008d2c <_fini>:
 8008d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d2e:	bf00      	nop
 8008d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d32:	bc08      	pop	{r3}
 8008d34:	469e      	mov	lr, r3
 8008d36:	4770      	bx	lr
